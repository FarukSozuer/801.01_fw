
801.01_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  00000000  00000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b34  10000000  10000000  00002000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .startup_copro_fw.Reset_Handler 00000050  10007b34  10007b34  00009b34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000003d0  10007b84  10007b84  00009b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  10007f54  10007f54  0000a1ac  2**0
                  CONTENTS
  5 .ARM          00000008  10007f54  10007f54  00009f54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  10007f5c  10007f5c  0000a1ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  10007f5c  10007f5c  00009f5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .fini_array   00000004  10007f60  10007f60  00009f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         00000120  10020000  10007f64  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .resource_table 0000008c  10020120  10008084  0000a120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 .bss          0000027c  100201ac  10008110  0000a1ac  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  10020428  1000838c  0000a1ac  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0000a1ac  2**0
                  CONTENTS, READONLY
 14 .debug_info   00018d2f  00000000  00000000  0000a1dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003c2f  00000000  00000000  00022f0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000eb8  00000000  00000000  00026b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000ab8  00000000  00000000  000279f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000499b6  00000000  00000000  000284b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00016575  00000000  00000000  00071e66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001c7843  00000000  00000000  000883db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0024fc1e  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000409c  00000000  00000000  0024fc64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000071  00000000  00000000  00253d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

10000000 <__do_global_dtors_aux>:
10000000:	b510      	push	{r4, lr}
10000002:	4c05      	ldr	r4, [pc, #20]	@ (10000018 <__do_global_dtors_aux+0x18>)
10000004:	7823      	ldrb	r3, [r4, #0]
10000006:	b933      	cbnz	r3, 10000016 <__do_global_dtors_aux+0x16>
10000008:	4b04      	ldr	r3, [pc, #16]	@ (1000001c <__do_global_dtors_aux+0x1c>)
1000000a:	b113      	cbz	r3, 10000012 <__do_global_dtors_aux+0x12>
1000000c:	4804      	ldr	r0, [pc, #16]	@ (10000020 <__do_global_dtors_aux+0x20>)
1000000e:	f3af 8000 	nop.w
10000012:	2301      	movs	r3, #1
10000014:	7023      	strb	r3, [r4, #0]
10000016:	bd10      	pop	{r4, pc}
10000018:	100201ac 	.word	0x100201ac
1000001c:	00000000 	.word	0x00000000
10000020:	10007b1c 	.word	0x10007b1c

10000024 <frame_dummy>:
10000024:	b508      	push	{r3, lr}
10000026:	4b03      	ldr	r3, [pc, #12]	@ (10000034 <frame_dummy+0x10>)
10000028:	b11b      	cbz	r3, 10000032 <frame_dummy+0xe>
1000002a:	4903      	ldr	r1, [pc, #12]	@ (10000038 <frame_dummy+0x14>)
1000002c:	4803      	ldr	r0, [pc, #12]	@ (1000003c <frame_dummy+0x18>)
1000002e:	f3af 8000 	nop.w
10000032:	bd08      	pop	{r3, pc}
10000034:	00000000 	.word	0x00000000
10000038:	100201b0 	.word	0x100201b0
1000003c:	10007b1c 	.word	0x10007b1c

10000040 <strcmp>:
10000040:	f810 2b01 	ldrb.w	r2, [r0], #1
10000044:	f811 3b01 	ldrb.w	r3, [r1], #1
10000048:	2a01      	cmp	r2, #1
1000004a:	bf28      	it	cs
1000004c:	429a      	cmpcs	r2, r3
1000004e:	d0f7      	beq.n	10000040 <strcmp>
10000050:	1ad0      	subs	r0, r2, r3
10000052:	4770      	bx	lr
	...

10000060 <memchr>:
10000060:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
10000064:	2a10      	cmp	r2, #16
10000066:	db2b      	blt.n	100000c0 <memchr+0x60>
10000068:	f010 0f07 	tst.w	r0, #7
1000006c:	d008      	beq.n	10000080 <memchr+0x20>
1000006e:	f810 3b01 	ldrb.w	r3, [r0], #1
10000072:	3a01      	subs	r2, #1
10000074:	428b      	cmp	r3, r1
10000076:	d02d      	beq.n	100000d4 <memchr+0x74>
10000078:	f010 0f07 	tst.w	r0, #7
1000007c:	b342      	cbz	r2, 100000d0 <memchr+0x70>
1000007e:	d1f6      	bne.n	1000006e <memchr+0xe>
10000080:	b4f0      	push	{r4, r5, r6, r7}
10000082:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
10000086:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
1000008a:	f022 0407 	bic.w	r4, r2, #7
1000008e:	f07f 0700 	mvns.w	r7, #0
10000092:	2300      	movs	r3, #0
10000094:	e8f0 5602 	ldrd	r5, r6, [r0], #8
10000098:	3c08      	subs	r4, #8
1000009a:	ea85 0501 	eor.w	r5, r5, r1
1000009e:	ea86 0601 	eor.w	r6, r6, r1
100000a2:	fa85 f547 	uadd8	r5, r5, r7
100000a6:	faa3 f587 	sel	r5, r3, r7
100000aa:	fa86 f647 	uadd8	r6, r6, r7
100000ae:	faa5 f687 	sel	r6, r5, r7
100000b2:	b98e      	cbnz	r6, 100000d8 <memchr+0x78>
100000b4:	d1ee      	bne.n	10000094 <memchr+0x34>
100000b6:	bcf0      	pop	{r4, r5, r6, r7}
100000b8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
100000bc:	f002 0207 	and.w	r2, r2, #7
100000c0:	b132      	cbz	r2, 100000d0 <memchr+0x70>
100000c2:	f810 3b01 	ldrb.w	r3, [r0], #1
100000c6:	3a01      	subs	r2, #1
100000c8:	ea83 0301 	eor.w	r3, r3, r1
100000cc:	b113      	cbz	r3, 100000d4 <memchr+0x74>
100000ce:	d1f8      	bne.n	100000c2 <memchr+0x62>
100000d0:	2000      	movs	r0, #0
100000d2:	4770      	bx	lr
100000d4:	3801      	subs	r0, #1
100000d6:	4770      	bx	lr
100000d8:	2d00      	cmp	r5, #0
100000da:	bf06      	itte	eq
100000dc:	4635      	moveq	r5, r6
100000de:	3803      	subeq	r0, #3
100000e0:	3807      	subne	r0, #7
100000e2:	f015 0f01 	tst.w	r5, #1
100000e6:	d107      	bne.n	100000f8 <memchr+0x98>
100000e8:	3001      	adds	r0, #1
100000ea:	f415 7f80 	tst.w	r5, #256	@ 0x100
100000ee:	bf02      	ittt	eq
100000f0:	3001      	addeq	r0, #1
100000f2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
100000f6:	3001      	addeq	r0, #1
100000f8:	bcf0      	pop	{r4, r5, r6, r7}
100000fa:	3801      	subs	r0, #1
100000fc:	4770      	bx	lr
100000fe:	bf00      	nop

10000100 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
10000100:	b480      	push	{r7}
10000102:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if defined (CORE_CM4)
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
10000104:	4b0f      	ldr	r3, [pc, #60]	@ (10000144 <SystemInit+0x44>)
10000106:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
1000010a:	4a0e      	ldr	r2, [pc, #56]	@ (10000144 <SystemInit+0x44>)
1000010c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
10000110:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (VECT_TAB_SRAM)
  SCB->VTOR = MCU_AHB_SRAM | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif
  /* Disable all interrupts and events */
  CLEAR_REG(EXTI_C2->IMR1);
10000114:	4b0c      	ldr	r3, [pc, #48]	@ (10000148 <SystemInit+0x48>)
10000116:	2200      	movs	r2, #0
10000118:	601a      	str	r2, [r3, #0]
  CLEAR_REG(EXTI_C2->IMR2);
1000011a:	4b0b      	ldr	r3, [pc, #44]	@ (10000148 <SystemInit+0x48>)
1000011c:	2200      	movs	r2, #0
1000011e:	611a      	str	r2, [r3, #16]
  CLEAR_REG(EXTI_C2->IMR3);
10000120:	4b09      	ldr	r3, [pc, #36]	@ (10000148 <SystemInit+0x48>)
10000122:	2200      	movs	r2, #0
10000124:	621a      	str	r2, [r3, #32]
  CLEAR_REG(EXTI_C2->EMR1);
10000126:	4b08      	ldr	r3, [pc, #32]	@ (10000148 <SystemInit+0x48>)
10000128:	2200      	movs	r2, #0
1000012a:	605a      	str	r2, [r3, #4]
  CLEAR_REG(EXTI_C2->EMR2);
1000012c:	4b06      	ldr	r3, [pc, #24]	@ (10000148 <SystemInit+0x48>)
1000012e:	2200      	movs	r2, #0
10000130:	615a      	str	r2, [r3, #20]
  CLEAR_REG(EXTI_C2->EMR3);
10000132:	4b05      	ldr	r3, [pc, #20]	@ (10000148 <SystemInit+0x48>)
10000134:	2200      	movs	r2, #0
10000136:	625a      	str	r2, [r3, #36]	@ 0x24
#else
#error Please #define CORE_CM4
#endif	                         
}
10000138:	bf00      	nop
1000013a:	46bd      	mov	sp, r7
1000013c:	f85d 7b04 	ldr.w	r7, [sp], #4
10000140:	4770      	bx	lr
10000142:	bf00      	nop
10000144:	e000ed00 	.word	0xe000ed00
10000148:	5000d0c0 	.word	0x5000d0c0

1000014c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
1000014c:	b480      	push	{r7}
1000014e:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX_CLK_ENABLE();
10000150:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000154:	2204      	movs	r2, #4
10000156:	f8c3 2a98 	str.w	r2, [r3, #2712]	@ 0xa98
  __HAL_RCC_DMA1_CLK_ENABLE();
1000015a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000015e:	2201      	movs	r2, #1
10000160:	f8c3 2a98 	str.w	r2, [r3, #2712]	@ 0xa98

}
10000164:	bf00      	nop
10000166:	46bd      	mov	sp, r7
10000168:	f85d 7b04 	ldr.w	r7, [sp], #4
1000016c:	4770      	bx	lr

1000016e <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
1000016e:	b480      	push	{r7}
10000170:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
10000172:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000176:	2204      	movs	r2, #4
10000178:	f8c3 2aa8 	str.w	r2, [r3, #2728]	@ 0xaa8
  __HAL_RCC_GPIOH_CLK_ENABLE();
1000017c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000180:	2280      	movs	r2, #128	@ 0x80
10000182:	f8c3 2aa8 	str.w	r2, [r3, #2728]	@ 0xaa8

}
10000186:	bf00      	nop
10000188:	46bd      	mov	sp, r7
1000018a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000018e:	4770      	bx	lr

10000190 <MX_IPCC_Init>:

IPCC_HandleTypeDef hipcc;

/* IPCC init function */
void MX_IPCC_Init(void)
{
10000190:	b580      	push	{r7, lr}
10000192:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
10000194:	4b06      	ldr	r3, [pc, #24]	@ (100001b0 <MX_IPCC_Init+0x20>)
10000196:	4a07      	ldr	r2, [pc, #28]	@ (100001b4 <MX_IPCC_Init+0x24>)
10000198:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
1000019a:	4805      	ldr	r0, [pc, #20]	@ (100001b0 <MX_IPCC_Init+0x20>)
1000019c:	f000 fcc8 	bl	10000b30 <HAL_IPCC_Init>
100001a0:	4603      	mov	r3, r0
100001a2:	2b00      	cmp	r3, #0
100001a4:	d001      	beq.n	100001aa <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
100001a6:	f000 f9f4 	bl	10000592 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
100001aa:	bf00      	nop
100001ac:	bd80      	pop	{r7, pc}
100001ae:	bf00      	nop
100001b0:	100201c8 	.word	0x100201c8
100001b4:	4c001000 	.word	0x4c001000

100001b8 <HAL_IPCC_MspInit>:

void HAL_IPCC_MspInit(IPCC_HandleTypeDef* ipccHandle)
{
100001b8:	b580      	push	{r7, lr}
100001ba:	b082      	sub	sp, #8
100001bc:	af00      	add	r7, sp, #0
100001be:	6078      	str	r0, [r7, #4]

  if(ipccHandle->Instance==IPCC)
100001c0:	687b      	ldr	r3, [r7, #4]
100001c2:	681b      	ldr	r3, [r3, #0]
100001c4:	4a0e      	ldr	r2, [pc, #56]	@ (10000200 <HAL_IPCC_MspInit+0x48>)
100001c6:	4293      	cmp	r3, r2
100001c8:	d115      	bne.n	100001f6 <HAL_IPCC_MspInit+0x3e>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* IPCC clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
100001ca:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100001ce:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
100001d2:	f8c3 2aa0 	str.w	r2, [r3, #2720]	@ 0xaa0

    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_RX1_IRQn, 1, 0);
100001d6:	2200      	movs	r2, #0
100001d8:	2101      	movs	r1, #1
100001da:	2067      	movs	r0, #103	@ 0x67
100001dc:	f000 fc71 	bl	10000ac2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_RX1_IRQn);
100001e0:	2067      	movs	r0, #103	@ 0x67
100001e2:	f000 fc8a 	bl	10000afa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_TX1_IRQn, 1, 0);
100001e6:	2200      	movs	r2, #0
100001e8:	2101      	movs	r1, #1
100001ea:	2068      	movs	r0, #104	@ 0x68
100001ec:	f000 fc69 	bl	10000ac2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_TX1_IRQn);
100001f0:	2068      	movs	r0, #104	@ 0x68
100001f2:	f000 fc82 	bl	10000afa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }
}
100001f6:	bf00      	nop
100001f8:	3708      	adds	r7, #8
100001fa:	46bd      	mov	sp, r7
100001fc:	bd80      	pop	{r7, pc}
100001fe:	bf00      	nop
10000200:	4c001000 	.word	0x4c001000

10000204 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
10000204:	b580      	push	{r7, lr}
10000206:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
10000208:	f000 fb10 	bl	1000082c <HAL_Init>

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  if(IS_ENGINEERING_BOOT_MODE())
1000020c:	4b0e      	ldr	r3, [pc, #56]	@ (10000248 <main+0x44>)
1000020e:	681b      	ldr	r3, [r3, #0]
10000210:	f003 0307 	and.w	r3, r3, #7
10000214:	2b04      	cmp	r3, #4
10000216:	d101      	bne.n	1000021c <main+0x18>
  {
    /* Configure the system clock */
    SystemClock_Config();
10000218:	f000 f818 	bl	1000024c <SystemClock_Config>
  }

  if(IS_ENGINEERING_BOOT_MODE())
1000021c:	4b0a      	ldr	r3, [pc, #40]	@ (10000248 <main+0x44>)
1000021e:	681b      	ldr	r3, [r3, #0]
10000220:	f003 0307 	and.w	r3, r3, #7
10000224:	2b04      	cmp	r3, #4
10000226:	d102      	bne.n	1000022e <main+0x2a>
  {
    /* Configure the peripherals common clocks */
    PeriphCommonClock_Config();
10000228:	f000 f986 	bl	10000538 <PeriphCommonClock_Config>
1000022c:	e005      	b.n	1000023a <main+0x36>
  }
  else
  {
    /* IPCC initialisation */
    MX_IPCC_Init();
1000022e:	f7ff ffaf 	bl	10000190 <MX_IPCC_Init>
    /* OpenAmp initialisation ---------------------------------*/
    MX_OPENAMP_Init(RPMSG_REMOTE, NULL);
10000232:	2100      	movs	r1, #0
10000234:	2001      	movs	r0, #1
10000236:	f006 fbef 	bl	10006a18 <MX_OPENAMP_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
1000023a:	f7ff ff98 	bl	1000016e <MX_GPIO_Init>
  MX_DMA_Init();
1000023e:	f7ff ff85 	bl	1000014c <MX_DMA_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
10000242:	bf00      	nop
10000244:	e7fd      	b.n	10000242 <main+0x3e>
10000246:	bf00      	nop
10000248:	50020000 	.word	0x50020000

1000024c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
1000024c:	b580      	push	{r7, lr}
1000024e:	b0d2      	sub	sp, #328	@ 0x148
10000250:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
10000252:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000256:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
1000025a:	4618      	mov	r0, r3
1000025c:	f44f 738a 	mov.w	r3, #276	@ 0x114
10000260:	461a      	mov	r2, r3
10000262:	2100      	movs	r1, #0
10000264:	f006 fe73 	bl	10006f4e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
10000268:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000026c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
10000270:	4618      	mov	r0, r3
10000272:	2330      	movs	r3, #48	@ 0x30
10000274:	461a      	mov	r2, r3
10000276:	2100      	movs	r1, #0
10000278:	f006 fe69 	bl	10006f4e <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
1000027c:	f000 fe6e 	bl	10000f5c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
10000280:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000284:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10000288:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
1000028c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10000290:	f043 0320 	orr.w	r3, r3, #32
10000294:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI|RCC_OSCILLATORTYPE_HSI
10000298:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000029c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100002a0:	2217      	movs	r2, #23
100002a2:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_DIG;
100002a4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100002a8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100002ac:	f44f 62b0 	mov.w	r2, #1408	@ 0x580
100002b0:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
100002b2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100002b6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100002ba:	2201      	movs	r2, #1
100002bc:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
100002be:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100002c2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100002c6:	2201      	movs	r2, #1
100002c8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDivValue = RCC_HSI_DIV1;
100002ca:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100002ce:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100002d2:	2200      	movs	r2, #0
100002d4:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
100002d6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100002da:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100002de:	2210      	movs	r2, #16
100002e0:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
100002e2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100002e6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100002ea:	2200      	movs	r2, #0
100002ec:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL2.PLLState = RCC_PLL_ON;
100002ee:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100002f2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100002f6:	2202      	movs	r2, #2
100002f8:	661a      	str	r2, [r3, #96]	@ 0x60
  RCC_OscInitStruct.PLL2.PLLSource = RCC_PLL12SOURCE_HSE;
100002fa:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100002fe:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000302:	2201      	movs	r2, #1
10000304:	665a      	str	r2, [r3, #100]	@ 0x64
  RCC_OscInitStruct.PLL2.PLLM = 3;
10000306:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000030a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
1000030e:	2203      	movs	r2, #3
10000310:	669a      	str	r2, [r3, #104]	@ 0x68
  RCC_OscInitStruct.PLL2.PLLN = 66;
10000312:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000316:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
1000031a:	2242      	movs	r2, #66	@ 0x42
1000031c:	66da      	str	r2, [r3, #108]	@ 0x6c
  RCC_OscInitStruct.PLL2.PLLP = 2;
1000031e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000322:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000326:	2202      	movs	r2, #2
10000328:	671a      	str	r2, [r3, #112]	@ 0x70
  RCC_OscInitStruct.PLL2.PLLQ = 1;
1000032a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000032e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000332:	2201      	movs	r2, #1
10000334:	675a      	str	r2, [r3, #116]	@ 0x74
  RCC_OscInitStruct.PLL2.PLLR = 1;
10000336:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000033a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
1000033e:	2201      	movs	r2, #1
10000340:	679a      	str	r2, [r3, #120]	@ 0x78
  RCC_OscInitStruct.PLL2.PLLFRACV = 0x1400;
10000342:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000346:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
1000034a:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
1000034e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  RCC_OscInitStruct.PLL2.PLLMODE = RCC_PLL_FRACTIONAL;
10000352:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000356:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
1000035a:	2201      	movs	r2, #1
1000035c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  RCC_OscInitStruct.PLL3.PLLState = RCC_PLL_ON;
10000360:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000364:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000368:	2202      	movs	r2, #2
1000036a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  RCC_OscInitStruct.PLL3.PLLSource = RCC_PLL3SOURCE_HSE;
1000036e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000372:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000376:	2201      	movs	r2, #1
10000378:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  RCC_OscInitStruct.PLL3.PLLM = 2;
1000037c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000380:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000384:	2202      	movs	r2, #2
10000386:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  RCC_OscInitStruct.PLL3.PLLN = 34;
1000038a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000038e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000392:	2222      	movs	r2, #34	@ 0x22
10000394:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  RCC_OscInitStruct.PLL3.PLLP = 2;
10000398:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000039c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100003a0:	2202      	movs	r2, #2
100003a2:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  RCC_OscInitStruct.PLL3.PLLQ = 17;
100003a6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100003aa:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100003ae:	2211      	movs	r2, #17
100003b0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  RCC_OscInitStruct.PLL3.PLLR = 37;
100003b4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100003b8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100003bc:	2225      	movs	r2, #37	@ 0x25
100003be:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  RCC_OscInitStruct.PLL3.PLLRGE = RCC_PLL3IFRANGE_1;
100003c2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100003c6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100003ca:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
100003ce:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  RCC_OscInitStruct.PLL3.PLLFRACV = 6660;
100003d2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100003d6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100003da:	f641 2204 	movw	r2, #6660	@ 0x1a04
100003de:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  RCC_OscInitStruct.PLL3.PLLMODE = RCC_PLL_FRACTIONAL;
100003e2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100003e6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100003ea:	2201      	movs	r2, #1
100003ec:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  RCC_OscInitStruct.PLL4.PLLState = RCC_PLL_ON;
100003f0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100003f4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100003f8:	2202      	movs	r2, #2
100003fa:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
  RCC_OscInitStruct.PLL4.PLLSource = RCC_PLL4SOURCE_HSE;
100003fe:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000402:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000406:	2201      	movs	r2, #1
10000408:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  RCC_OscInitStruct.PLL4.PLLM = 4;
1000040c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000410:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000414:	2204      	movs	r2, #4
10000416:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  RCC_OscInitStruct.PLL4.PLLN = 99;
1000041a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000041e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000422:	2263      	movs	r2, #99	@ 0x63
10000424:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
  RCC_OscInitStruct.PLL4.PLLP = 6;
10000428:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000042c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000430:	2206      	movs	r2, #6
10000432:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
  RCC_OscInitStruct.PLL4.PLLQ = 8;
10000436:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000043a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
1000043e:	2208      	movs	r2, #8
10000440:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
  RCC_OscInitStruct.PLL4.PLLR = 8;
10000444:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000448:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
1000044c:	2208      	movs	r2, #8
1000044e:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
  RCC_OscInitStruct.PLL4.PLLRGE = RCC_PLL4IFRANGE_0;
10000452:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000456:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
1000045a:	2200      	movs	r2, #0
1000045c:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
  RCC_OscInitStruct.PLL4.PLLFRACV = 0;
10000460:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000464:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000468:	2200      	movs	r2, #0
1000046a:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
  RCC_OscInitStruct.PLL4.PLLMODE = RCC_PLL_INTEGER;
1000046e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000472:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000476:	2200      	movs	r2, #0
10000478:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
1000047c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
10000480:	4618      	mov	r0, r3
10000482:	f000 fd7b 	bl	10000f7c <HAL_RCC_OscConfig>
10000486:	4603      	mov	r3, r0
10000488:	2b00      	cmp	r3, #0
1000048a:	d001      	beq.n	10000490 <SystemClock_Config+0x244>
  {
    Error_Handler();
1000048c:	f000 f881 	bl	10000592 <Error_Handler>
  }

  /** RCC Clock Config
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_ACLK
10000490:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000494:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
10000498:	22fe      	movs	r2, #254	@ 0xfe
1000049a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3|RCC_CLOCKTYPE_PCLK4
                              |RCC_CLOCKTYPE_PCLK5;
  RCC_ClkInitStruct.AXISSInit.AXI_Clock = RCC_AXISSOURCE_PLL2;
1000049c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100004a0:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
100004a4:	2202      	movs	r2, #2
100004a6:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.AXISSInit.AXI_Div = RCC_AXI_DIV1;
100004a8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100004ac:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
100004b0:	2200      	movs	r2, #0
100004b2:	611a      	str	r2, [r3, #16]
  RCC_ClkInitStruct.MCUInit.MCU_Clock = RCC_MCUSSOURCE_PLL3;
100004b4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100004b8:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
100004bc:	2203      	movs	r2, #3
100004be:	615a      	str	r2, [r3, #20]
  RCC_ClkInitStruct.MCUInit.MCU_Div = RCC_MCU_DIV1;
100004c0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100004c4:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
100004c8:	2200      	movs	r2, #0
100004ca:	619a      	str	r2, [r3, #24]
  RCC_ClkInitStruct.APB4_Div = RCC_APB4_DIV2;
100004cc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100004d0:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
100004d4:	2201      	movs	r2, #1
100004d6:	61da      	str	r2, [r3, #28]
  RCC_ClkInitStruct.APB5_Div = RCC_APB5_DIV4;
100004d8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100004dc:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
100004e0:	2202      	movs	r2, #2
100004e2:	621a      	str	r2, [r3, #32]
  RCC_ClkInitStruct.APB1_Div = RCC_APB1_DIV2;
100004e4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100004e8:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
100004ec:	2201      	movs	r2, #1
100004ee:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_ClkInitStruct.APB2_Div = RCC_APB2_DIV2;
100004f0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100004f4:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
100004f8:	2201      	movs	r2, #1
100004fa:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_ClkInitStruct.APB3_Div = RCC_APB3_DIV2;
100004fc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000500:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
10000504:	2201      	movs	r2, #1
10000506:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct) != HAL_OK)
10000508:	1d3b      	adds	r3, r7, #4
1000050a:	4618      	mov	r0, r3
1000050c:	f001 fad4 	bl	10001ab8 <HAL_RCC_ClockConfig>
10000510:	4603      	mov	r3, r0
10000512:	2b00      	cmp	r3, #0
10000514:	d001      	beq.n	1000051a <SystemClock_Config+0x2ce>
  {
    Error_Handler();
10000516:	f000 f83c 	bl	10000592 <Error_Handler>
  }

  /** Set the HSE division factor for RTC clock
  */
  __HAL_RCC_RTC_HSEDIV(24);
1000051a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000051e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10000520:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
10000524:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10000528:	f043 0317 	orr.w	r3, r3, #23
1000052c:	6453      	str	r3, [r2, #68]	@ 0x44
}
1000052e:	bf00      	nop
10000530:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
10000534:	46bd      	mov	sp, r7
10000536:	bd80      	pop	{r7, pc}

10000538 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
10000538:	b580      	push	{r7, lr}
1000053a:	b0d6      	sub	sp, #344	@ 0x158
1000053c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
1000053e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
10000542:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
10000546:	4618      	mov	r0, r3
10000548:	f44f 73ac 	mov.w	r3, #344	@ 0x158
1000054c:	461a      	mov	r2, r3
1000054e:	2100      	movs	r1, #0
10000550:	f006 fcfd 	bl	10006f4e <memset>

  /** Initializes the common periph clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
10000554:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
10000558:	f5a3 71ac 	sub.w	r1, r3, #344	@ 0x158
1000055c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
10000560:	f04f 0300 	mov.w	r3, #0
10000564:	e9c1 2300 	strd	r2, r3, [r1]
  PeriphClkInit.CkperClockSelection = RCC_CKPERCLKSOURCE_HSE;
10000568:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
1000056c:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
10000570:	2202      	movs	r2, #2
10000572:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
10000576:	463b      	mov	r3, r7
10000578:	4618      	mov	r0, r3
1000057a:	f002 fb1b 	bl	10002bb4 <HAL_RCCEx_PeriphCLKConfig>
1000057e:	4603      	mov	r3, r0
10000580:	2b00      	cmp	r3, #0
10000582:	d001      	beq.n	10000588 <PeriphCommonClock_Config+0x50>
  {
    Error_Handler();
10000584:	f000 f805 	bl	10000592 <Error_Handler>
  }
}
10000588:	bf00      	nop
1000058a:	f507 77ac 	add.w	r7, r7, #344	@ 0x158
1000058e:	46bd      	mov	sp, r7
10000590:	bd80      	pop	{r7, pc}

10000592 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
10000592:	b480      	push	{r7}
10000594:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
10000596:	b672      	cpsid	i
}
10000598:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
1000059a:	bf00      	nop
1000059c:	e7fd      	b.n	1000059a <Error_Handler+0x8>

1000059e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
1000059e:	b580      	push	{r7, lr}
100005a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
100005a2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100005a6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
100005aa:	f8c3 2aa0 	str.w	r2, [r3, #2720]	@ 0xaa0

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
100005ae:	2200      	movs	r2, #0
100005b0:	2101      	movs	r1, #1
100005b2:	f06f 000b 	mvn.w	r0, #11
100005b6:	f000 fa84 	bl	10000ac2 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 1, 0);
100005ba:	2200      	movs	r2, #0
100005bc:	2101      	movs	r1, #1
100005be:	f06f 000a 	mvn.w	r0, #10
100005c2:	f000 fa7e 	bl	10000ac2 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
100005c6:	2200      	movs	r2, #0
100005c8:	2101      	movs	r1, #1
100005ca:	f06f 0009 	mvn.w	r0, #9
100005ce:	f000 fa78 	bl	10000ac2 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 1, 0);
100005d2:	2200      	movs	r2, #0
100005d4:	2101      	movs	r1, #1
100005d6:	f06f 0004 	mvn.w	r0, #4
100005da:	f000 fa72 	bl	10000ac2 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
100005de:	2200      	movs	r2, #0
100005e0:	2101      	movs	r1, #1
100005e2:	f06f 0003 	mvn.w	r0, #3
100005e6:	f000 fa6c 	bl	10000ac2 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 1, 0);
100005ea:	2200      	movs	r2, #0
100005ec:	2101      	movs	r1, #1
100005ee:	f06f 0001 	mvn.w	r0, #1
100005f2:	f000 fa66 	bl	10000ac2 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_WAKEUP_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_WAKEUP_IRQn, 0, 0);
100005f6:	2200      	movs	r2, #0
100005f8:	2100      	movs	r1, #0
100005fa:	2091      	movs	r0, #145	@ 0x91
100005fc:	f000 fa61 	bl	10000ac2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_WAKEUP_IRQn);
10000600:	2091      	movs	r0, #145	@ 0x91
10000602:	f000 fa7a 	bl	10000afa <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
10000606:	bf00      	nop
10000608:	bd80      	pop	{r7, pc}

1000060a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
1000060a:	b480      	push	{r7}
1000060c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
1000060e:	bf00      	nop
10000610:	e7fd      	b.n	1000060e <NMI_Handler+0x4>

10000612 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
10000612:	b480      	push	{r7}
10000614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
10000616:	bf00      	nop
10000618:	e7fd      	b.n	10000616 <HardFault_Handler+0x4>

1000061a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
1000061a:	b480      	push	{r7}
1000061c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
1000061e:	bf00      	nop
10000620:	e7fd      	b.n	1000061e <MemManage_Handler+0x4>

10000622 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
10000622:	b480      	push	{r7}
10000624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
10000626:	bf00      	nop
10000628:	e7fd      	b.n	10000626 <BusFault_Handler+0x4>

1000062a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
1000062a:	b480      	push	{r7}
1000062c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
1000062e:	bf00      	nop
10000630:	e7fd      	b.n	1000062e <UsageFault_Handler+0x4>

10000632 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
10000632:	b480      	push	{r7}
10000634:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
10000636:	bf00      	nop
10000638:	46bd      	mov	sp, r7
1000063a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000063e:	4770      	bx	lr

10000640 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
10000640:	b480      	push	{r7}
10000642:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
10000644:	bf00      	nop
10000646:	46bd      	mov	sp, r7
10000648:	f85d 7b04 	ldr.w	r7, [sp], #4
1000064c:	4770      	bx	lr

1000064e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
1000064e:	b480      	push	{r7}
10000650:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
10000652:	bf00      	nop
10000654:	46bd      	mov	sp, r7
10000656:	f85d 7b04 	ldr.w	r7, [sp], #4
1000065a:	4770      	bx	lr

1000065c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
1000065c:	b580      	push	{r7, lr}
1000065e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
10000660:	f000 f934 	bl	100008cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
10000664:	bf00      	nop
10000666:	bd80      	pop	{r7, pc}

10000668 <IPCC_RX1_IRQHandler>:

/**
  * @brief This function handles IPCC RX1 occupied interrupt.
  */
void IPCC_RX1_IRQHandler(void)
{
10000668:	b580      	push	{r7, lr}
1000066a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_RX1_IRQn 0 */

  /* USER CODE END IPCC_RX1_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
1000066c:	4802      	ldr	r0, [pc, #8]	@ (10000678 <IPCC_RX1_IRQHandler+0x10>)
1000066e:	f000 fba7 	bl	10000dc0 <HAL_IPCC_RX_IRQHandler>
  /* USER CODE BEGIN IPCC_RX1_IRQn 1 */

  /* USER CODE END IPCC_RX1_IRQn 1 */
}
10000672:	bf00      	nop
10000674:	bd80      	pop	{r7, pc}
10000676:	bf00      	nop
10000678:	100201c8 	.word	0x100201c8

1000067c <IPCC_TX1_IRQHandler>:

/**
  * @brief This function handles IPCC TX1 free interrupt.
  */
void IPCC_TX1_IRQHandler(void)
{
1000067c:	b580      	push	{r7, lr}
1000067e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_TX1_IRQn 0 */

  /* USER CODE END IPCC_TX1_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
10000680:	4802      	ldr	r0, [pc, #8]	@ (1000068c <IPCC_TX1_IRQHandler+0x10>)
10000682:	f000 fb4f 	bl	10000d24 <HAL_IPCC_TX_IRQHandler>
  /* USER CODE BEGIN IPCC_TX1_IRQn 1 */

  /* USER CODE END IPCC_TX1_IRQn 1 */
}
10000686:	bf00      	nop
10000688:	bd80      	pop	{r7, pc}
1000068a:	bf00      	nop
1000068c:	100201c8 	.word	0x100201c8

10000690 <RCC_WAKEUP_IRQHandler>:

/**
  * @brief This function handles RCC wake-up interrupt.
  */
void RCC_WAKEUP_IRQHandler(void)
{
10000690:	b580      	push	{r7, lr}
10000692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RCC_WAKEUP_IRQn 0 */

  /* USER CODE END RCC_WAKEUP_IRQn 0 */
  HAL_RCC_WAKEUP_IRQHandler();
10000694:	f001 fe2e 	bl	100022f4 <HAL_RCC_WAKEUP_IRQHandler>
  /* USER CODE BEGIN RCC_WAKEUP_IRQn 1 */

  /* USER CODE END RCC_WAKEUP_IRQn 1 */
}
10000698:	bf00      	nop
1000069a:	bd80      	pop	{r7, pc}

1000069c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
1000069c:	b480      	push	{r7}
1000069e:	af00      	add	r7, sp, #0
  return 1;
100006a0:	2301      	movs	r3, #1
}
100006a2:	4618      	mov	r0, r3
100006a4:	46bd      	mov	sp, r7
100006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
100006aa:	4770      	bx	lr

100006ac <_kill>:

int _kill(int pid, int sig)
{
100006ac:	b580      	push	{r7, lr}
100006ae:	b082      	sub	sp, #8
100006b0:	af00      	add	r7, sp, #0
100006b2:	6078      	str	r0, [r7, #4]
100006b4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
100006b6:	f006 fccd 	bl	10007054 <__errno>
100006ba:	4603      	mov	r3, r0
100006bc:	2216      	movs	r2, #22
100006be:	601a      	str	r2, [r3, #0]
  return -1;
100006c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
100006c4:	4618      	mov	r0, r3
100006c6:	3708      	adds	r7, #8
100006c8:	46bd      	mov	sp, r7
100006ca:	bd80      	pop	{r7, pc}

100006cc <_exit>:

void _exit (int status)
{
100006cc:	b580      	push	{r7, lr}
100006ce:	b082      	sub	sp, #8
100006d0:	af00      	add	r7, sp, #0
100006d2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
100006d4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
100006d8:	6878      	ldr	r0, [r7, #4]
100006da:	f7ff ffe7 	bl	100006ac <_kill>
  while (1) {}    /* Make sure we hang here */
100006de:	bf00      	nop
100006e0:	e7fd      	b.n	100006de <_exit+0x12>

100006e2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
100006e2:	b580      	push	{r7, lr}
100006e4:	b086      	sub	sp, #24
100006e6:	af00      	add	r7, sp, #0
100006e8:	60f8      	str	r0, [r7, #12]
100006ea:	60b9      	str	r1, [r7, #8]
100006ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
100006ee:	2300      	movs	r3, #0
100006f0:	617b      	str	r3, [r7, #20]
100006f2:	e00a      	b.n	1000070a <_read+0x28>
  {
    *ptr++ = __io_getchar();
100006f4:	f3af 8000 	nop.w
100006f8:	4601      	mov	r1, r0
100006fa:	68bb      	ldr	r3, [r7, #8]
100006fc:	1c5a      	adds	r2, r3, #1
100006fe:	60ba      	str	r2, [r7, #8]
10000700:	b2ca      	uxtb	r2, r1
10000702:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
10000704:	697b      	ldr	r3, [r7, #20]
10000706:	3301      	adds	r3, #1
10000708:	617b      	str	r3, [r7, #20]
1000070a:	697a      	ldr	r2, [r7, #20]
1000070c:	687b      	ldr	r3, [r7, #4]
1000070e:	429a      	cmp	r2, r3
10000710:	dbf0      	blt.n	100006f4 <_read+0x12>
  }

  return len;
10000712:	687b      	ldr	r3, [r7, #4]
}
10000714:	4618      	mov	r0, r3
10000716:	3718      	adds	r7, #24
10000718:	46bd      	mov	sp, r7
1000071a:	bd80      	pop	{r7, pc}

1000071c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
1000071c:	b580      	push	{r7, lr}
1000071e:	b086      	sub	sp, #24
10000720:	af00      	add	r7, sp, #0
10000722:	60f8      	str	r0, [r7, #12]
10000724:	60b9      	str	r1, [r7, #8]
10000726:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
10000728:	2300      	movs	r3, #0
1000072a:	617b      	str	r3, [r7, #20]
1000072c:	e009      	b.n	10000742 <_write+0x26>
  {
    __io_putchar(*ptr++);
1000072e:	68bb      	ldr	r3, [r7, #8]
10000730:	1c5a      	adds	r2, r3, #1
10000732:	60ba      	str	r2, [r7, #8]
10000734:	781b      	ldrb	r3, [r3, #0]
10000736:	4618      	mov	r0, r3
10000738:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
1000073c:	697b      	ldr	r3, [r7, #20]
1000073e:	3301      	adds	r3, #1
10000740:	617b      	str	r3, [r7, #20]
10000742:	697a      	ldr	r2, [r7, #20]
10000744:	687b      	ldr	r3, [r7, #4]
10000746:	429a      	cmp	r2, r3
10000748:	dbf1      	blt.n	1000072e <_write+0x12>
  }
  return len;
1000074a:	687b      	ldr	r3, [r7, #4]
}
1000074c:	4618      	mov	r0, r3
1000074e:	3718      	adds	r7, #24
10000750:	46bd      	mov	sp, r7
10000752:	bd80      	pop	{r7, pc}

10000754 <_close>:

int _close(int file)
{
10000754:	b480      	push	{r7}
10000756:	b083      	sub	sp, #12
10000758:	af00      	add	r7, sp, #0
1000075a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
1000075c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
10000760:	4618      	mov	r0, r3
10000762:	370c      	adds	r7, #12
10000764:	46bd      	mov	sp, r7
10000766:	f85d 7b04 	ldr.w	r7, [sp], #4
1000076a:	4770      	bx	lr

1000076c <_fstat>:


int _fstat(int file, struct stat *st)
{
1000076c:	b480      	push	{r7}
1000076e:	b083      	sub	sp, #12
10000770:	af00      	add	r7, sp, #0
10000772:	6078      	str	r0, [r7, #4]
10000774:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
10000776:	683b      	ldr	r3, [r7, #0]
10000778:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
1000077c:	605a      	str	r2, [r3, #4]
  return 0;
1000077e:	2300      	movs	r3, #0
}
10000780:	4618      	mov	r0, r3
10000782:	370c      	adds	r7, #12
10000784:	46bd      	mov	sp, r7
10000786:	f85d 7b04 	ldr.w	r7, [sp], #4
1000078a:	4770      	bx	lr

1000078c <_isatty>:

int _isatty(int file)
{
1000078c:	b480      	push	{r7}
1000078e:	b083      	sub	sp, #12
10000790:	af00      	add	r7, sp, #0
10000792:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
10000794:	2301      	movs	r3, #1
}
10000796:	4618      	mov	r0, r3
10000798:	370c      	adds	r7, #12
1000079a:	46bd      	mov	sp, r7
1000079c:	f85d 7b04 	ldr.w	r7, [sp], #4
100007a0:	4770      	bx	lr

100007a2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
100007a2:	b480      	push	{r7}
100007a4:	b085      	sub	sp, #20
100007a6:	af00      	add	r7, sp, #0
100007a8:	60f8      	str	r0, [r7, #12]
100007aa:	60b9      	str	r1, [r7, #8]
100007ac:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
100007ae:	2300      	movs	r3, #0
}
100007b0:	4618      	mov	r0, r3
100007b2:	3714      	adds	r7, #20
100007b4:	46bd      	mov	sp, r7
100007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
100007ba:	4770      	bx	lr

100007bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
100007bc:	b580      	push	{r7, lr}
100007be:	b086      	sub	sp, #24
100007c0:	af00      	add	r7, sp, #0
100007c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
100007c4:	4a14      	ldr	r2, [pc, #80]	@ (10000818 <_sbrk+0x5c>)
100007c6:	4b15      	ldr	r3, [pc, #84]	@ (1000081c <_sbrk+0x60>)
100007c8:	1ad3      	subs	r3, r2, r3
100007ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
100007cc:	697b      	ldr	r3, [r7, #20]
100007ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
100007d0:	4b13      	ldr	r3, [pc, #76]	@ (10000820 <_sbrk+0x64>)
100007d2:	681b      	ldr	r3, [r3, #0]
100007d4:	2b00      	cmp	r3, #0
100007d6:	d102      	bne.n	100007de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
100007d8:	4b11      	ldr	r3, [pc, #68]	@ (10000820 <_sbrk+0x64>)
100007da:	4a12      	ldr	r2, [pc, #72]	@ (10000824 <_sbrk+0x68>)
100007dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
100007de:	4b10      	ldr	r3, [pc, #64]	@ (10000820 <_sbrk+0x64>)
100007e0:	681a      	ldr	r2, [r3, #0]
100007e2:	687b      	ldr	r3, [r7, #4]
100007e4:	4413      	add	r3, r2
100007e6:	693a      	ldr	r2, [r7, #16]
100007e8:	429a      	cmp	r2, r3
100007ea:	d207      	bcs.n	100007fc <_sbrk+0x40>
  {
    errno = ENOMEM;
100007ec:	f006 fc32 	bl	10007054 <__errno>
100007f0:	4603      	mov	r3, r0
100007f2:	220c      	movs	r2, #12
100007f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
100007f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
100007fa:	e009      	b.n	10000810 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
100007fc:	4b08      	ldr	r3, [pc, #32]	@ (10000820 <_sbrk+0x64>)
100007fe:	681b      	ldr	r3, [r3, #0]
10000800:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
10000802:	4b07      	ldr	r3, [pc, #28]	@ (10000820 <_sbrk+0x64>)
10000804:	681a      	ldr	r2, [r3, #0]
10000806:	687b      	ldr	r3, [r7, #4]
10000808:	4413      	add	r3, r2
1000080a:	4a05      	ldr	r2, [pc, #20]	@ (10000820 <_sbrk+0x64>)
1000080c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
1000080e:	68fb      	ldr	r3, [r7, #12]
}
10000810:	4618      	mov	r0, r3
10000812:	3718      	adds	r7, #24
10000814:	46bd      	mov	sp, r7
10000816:	bd80      	pop	{r7, pc}
10000818:	10040000 	.word	0x10040000
1000081c:	00000400 	.word	0x00000400
10000820:	10020204 	.word	0x10020204
10000824:	10020428 	.word	0x10020428

10000828 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
10000828:	e7fe      	b.n	10000828 <ADC1_IRQHandler>
	...

1000082c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
1000082c:	b580      	push	{r7, lr}
1000082e:	af00      	add	r7, sp, #0
  /* Set Interrupt Group Priority */
#if defined (CORE_CM4)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
10000830:	2003      	movs	r0, #3
10000832:	f000 f93b 	bl	10000aac <HAL_NVIC_SetPriorityGrouping>
#endif

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
10000836:	f001 fd1c 	bl	10002272 <HAL_RCC_GetSystemCoreClockFreq>
1000083a:	4603      	mov	r3, r0
1000083c:	4a07      	ldr	r2, [pc, #28]	@ (1000085c <HAL_Init+0x30>)
1000083e:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
10000840:	2001      	movs	r0, #1
10000842:	f000 f80d 	bl	10000860 <HAL_InitTick>
10000846:	4603      	mov	r3, r0
10000848:	2b00      	cmp	r3, #0
1000084a:	d001      	beq.n	10000850 <HAL_Init+0x24>
  {
    return HAL_ERROR;
1000084c:	2301      	movs	r3, #1
1000084e:	e002      	b.n	10000856 <HAL_Init+0x2a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
10000850:	f7ff fea5 	bl	1000059e <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
10000854:	2300      	movs	r3, #0
}
10000856:	4618      	mov	r0, r3
10000858:	bd80      	pop	{r7, pc}
1000085a:	bf00      	nop
1000085c:	10020000 	.word	0x10020000

10000860 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
10000860:	b580      	push	{r7, lr}
10000862:	b082      	sub	sp, #8
10000864:	af00      	add	r7, sp, #0
10000866:	6078      	str	r0, [r7, #4]

#endif /* CORE_CA7 */


#if defined (CORE_CM4)
  if ((uint32_t)uwTickFreq == 0U)
10000868:	4b15      	ldr	r3, [pc, #84]	@ (100008c0 <HAL_InitTick+0x60>)
1000086a:	781b      	ldrb	r3, [r3, #0]
1000086c:	2b00      	cmp	r3, #0
1000086e:	d101      	bne.n	10000874 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
10000870:	2301      	movs	r3, #1
10000872:	e021      	b.n	100008b8 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock /(1000U / uwTickFreq)) > 0U)
10000874:	4b13      	ldr	r3, [pc, #76]	@ (100008c4 <HAL_InitTick+0x64>)
10000876:	681a      	ldr	r2, [r3, #0]
10000878:	4b11      	ldr	r3, [pc, #68]	@ (100008c0 <HAL_InitTick+0x60>)
1000087a:	781b      	ldrb	r3, [r3, #0]
1000087c:	4619      	mov	r1, r3
1000087e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
10000882:	fbb3 f3f1 	udiv	r3, r3, r1
10000886:	fbb2 f3f3 	udiv	r3, r2, r3
1000088a:	4618      	mov	r0, r3
1000088c:	f000 f943 	bl	10000b16 <HAL_SYSTICK_Config>
10000890:	4603      	mov	r3, r0
10000892:	2b00      	cmp	r3, #0
10000894:	d001      	beq.n	1000089a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
10000896:	2301      	movs	r3, #1
10000898:	e00e      	b.n	100008b8 <HAL_InitTick+0x58>
  }
  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
1000089a:	687b      	ldr	r3, [r7, #4]
1000089c:	2b0f      	cmp	r3, #15
1000089e:	d80a      	bhi.n	100008b6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
100008a0:	2200      	movs	r2, #0
100008a2:	6879      	ldr	r1, [r7, #4]
100008a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
100008a8:	f000 f90b 	bl	10000ac2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
100008ac:	4a06      	ldr	r2, [pc, #24]	@ (100008c8 <HAL_InitTick+0x68>)
100008ae:	687b      	ldr	r3, [r7, #4]
100008b0:	6013      	str	r3, [r2, #0]
#endif /* CORE_CM4 */



  /* Return function status */
  return HAL_OK;
100008b2:	2300      	movs	r3, #0
100008b4:	e000      	b.n	100008b8 <HAL_InitTick+0x58>
    return HAL_ERROR;
100008b6:	2301      	movs	r3, #1
}
100008b8:	4618      	mov	r0, r3
100008ba:	3708      	adds	r7, #8
100008bc:	46bd      	mov	sp, r7
100008be:	bd80      	pop	{r7, pc}
100008c0:	10020008 	.word	0x10020008
100008c4:	10020000 	.word	0x10020000
100008c8:	10020004 	.word	0x10020004

100008cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
100008cc:	b480      	push	{r7}
100008ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
100008d0:	4b06      	ldr	r3, [pc, #24]	@ (100008ec <HAL_IncTick+0x20>)
100008d2:	781b      	ldrb	r3, [r3, #0]
100008d4:	461a      	mov	r2, r3
100008d6:	4b06      	ldr	r3, [pc, #24]	@ (100008f0 <HAL_IncTick+0x24>)
100008d8:	681b      	ldr	r3, [r3, #0]
100008da:	4413      	add	r3, r2
100008dc:	4a04      	ldr	r2, [pc, #16]	@ (100008f0 <HAL_IncTick+0x24>)
100008de:	6013      	str	r3, [r2, #0]
}
100008e0:	bf00      	nop
100008e2:	46bd      	mov	sp, r7
100008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
100008e8:	4770      	bx	lr
100008ea:	bf00      	nop
100008ec:	10020008 	.word	0x10020008
100008f0:	10020208 	.word	0x10020208

100008f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
100008f4:	b480      	push	{r7}
100008f6:	af00      	add	r7, sp, #0
#endif /* CORE_CA7 */


#if defined (CORE_CM4)
  /* tick is incremented in systick handler */
  return uwTick;
100008f8:	4b03      	ldr	r3, [pc, #12]	@ (10000908 <HAL_GetTick+0x14>)
100008fa:	681b      	ldr	r3, [r3, #0]
#endif /* CORE_CM4 */

}
100008fc:	4618      	mov	r0, r3
100008fe:	46bd      	mov	sp, r7
10000900:	f85d 7b04 	ldr.w	r7, [sp], #4
10000904:	4770      	bx	lr
10000906:	bf00      	nop
10000908:	10020208 	.word	0x10020208

1000090c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
1000090c:	b480      	push	{r7}
1000090e:	b085      	sub	sp, #20
10000910:	af00      	add	r7, sp, #0
10000912:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
10000914:	687b      	ldr	r3, [r7, #4]
10000916:	f003 0307 	and.w	r3, r3, #7
1000091a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
1000091c:	4b0c      	ldr	r3, [pc, #48]	@ (10000950 <__NVIC_SetPriorityGrouping+0x44>)
1000091e:	68db      	ldr	r3, [r3, #12]
10000920:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
10000922:	68ba      	ldr	r2, [r7, #8]
10000924:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
10000928:	4013      	ands	r3, r2
1000092a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
1000092c:	68fb      	ldr	r3, [r7, #12]
1000092e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
10000930:	68bb      	ldr	r3, [r7, #8]
10000932:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
10000934:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
10000938:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
1000093c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
1000093e:	4a04      	ldr	r2, [pc, #16]	@ (10000950 <__NVIC_SetPriorityGrouping+0x44>)
10000940:	68bb      	ldr	r3, [r7, #8]
10000942:	60d3      	str	r3, [r2, #12]
}
10000944:	bf00      	nop
10000946:	3714      	adds	r7, #20
10000948:	46bd      	mov	sp, r7
1000094a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000094e:	4770      	bx	lr
10000950:	e000ed00 	.word	0xe000ed00

10000954 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
10000954:	b480      	push	{r7}
10000956:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
10000958:	4b04      	ldr	r3, [pc, #16]	@ (1000096c <__NVIC_GetPriorityGrouping+0x18>)
1000095a:	68db      	ldr	r3, [r3, #12]
1000095c:	0a1b      	lsrs	r3, r3, #8
1000095e:	f003 0307 	and.w	r3, r3, #7
}
10000962:	4618      	mov	r0, r3
10000964:	46bd      	mov	sp, r7
10000966:	f85d 7b04 	ldr.w	r7, [sp], #4
1000096a:	4770      	bx	lr
1000096c:	e000ed00 	.word	0xe000ed00

10000970 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
10000970:	b480      	push	{r7}
10000972:	b083      	sub	sp, #12
10000974:	af00      	add	r7, sp, #0
10000976:	4603      	mov	r3, r0
10000978:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
1000097a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
1000097e:	2b00      	cmp	r3, #0
10000980:	db0b      	blt.n	1000099a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
10000982:	88fb      	ldrh	r3, [r7, #6]
10000984:	f003 021f 	and.w	r2, r3, #31
10000988:	4907      	ldr	r1, [pc, #28]	@ (100009a8 <__NVIC_EnableIRQ+0x38>)
1000098a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
1000098e:	095b      	lsrs	r3, r3, #5
10000990:	2001      	movs	r0, #1
10000992:	fa00 f202 	lsl.w	r2, r0, r2
10000996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
1000099a:	bf00      	nop
1000099c:	370c      	adds	r7, #12
1000099e:	46bd      	mov	sp, r7
100009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
100009a4:	4770      	bx	lr
100009a6:	bf00      	nop
100009a8:	e000e100 	.word	0xe000e100

100009ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
100009ac:	b480      	push	{r7}
100009ae:	b083      	sub	sp, #12
100009b0:	af00      	add	r7, sp, #0
100009b2:	4603      	mov	r3, r0
100009b4:	6039      	str	r1, [r7, #0]
100009b6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
100009b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
100009bc:	2b00      	cmp	r3, #0
100009be:	db0a      	blt.n	100009d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
100009c0:	683b      	ldr	r3, [r7, #0]
100009c2:	b2da      	uxtb	r2, r3
100009c4:	490c      	ldr	r1, [pc, #48]	@ (100009f8 <__NVIC_SetPriority+0x4c>)
100009c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
100009ca:	0112      	lsls	r2, r2, #4
100009cc:	b2d2      	uxtb	r2, r2
100009ce:	440b      	add	r3, r1
100009d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
100009d4:	e00a      	b.n	100009ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
100009d6:	683b      	ldr	r3, [r7, #0]
100009d8:	b2da      	uxtb	r2, r3
100009da:	4908      	ldr	r1, [pc, #32]	@ (100009fc <__NVIC_SetPriority+0x50>)
100009dc:	88fb      	ldrh	r3, [r7, #6]
100009de:	f003 030f 	and.w	r3, r3, #15
100009e2:	3b04      	subs	r3, #4
100009e4:	0112      	lsls	r2, r2, #4
100009e6:	b2d2      	uxtb	r2, r2
100009e8:	440b      	add	r3, r1
100009ea:	761a      	strb	r2, [r3, #24]
}
100009ec:	bf00      	nop
100009ee:	370c      	adds	r7, #12
100009f0:	46bd      	mov	sp, r7
100009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
100009f6:	4770      	bx	lr
100009f8:	e000e100 	.word	0xe000e100
100009fc:	e000ed00 	.word	0xe000ed00

10000a00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
10000a00:	b480      	push	{r7}
10000a02:	b089      	sub	sp, #36	@ 0x24
10000a04:	af00      	add	r7, sp, #0
10000a06:	60f8      	str	r0, [r7, #12]
10000a08:	60b9      	str	r1, [r7, #8]
10000a0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
10000a0c:	68fb      	ldr	r3, [r7, #12]
10000a0e:	f003 0307 	and.w	r3, r3, #7
10000a12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
10000a14:	69fb      	ldr	r3, [r7, #28]
10000a16:	f1c3 0307 	rsb	r3, r3, #7
10000a1a:	2b04      	cmp	r3, #4
10000a1c:	bf28      	it	cs
10000a1e:	2304      	movcs	r3, #4
10000a20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
10000a22:	69fb      	ldr	r3, [r7, #28]
10000a24:	3304      	adds	r3, #4
10000a26:	2b06      	cmp	r3, #6
10000a28:	d902      	bls.n	10000a30 <NVIC_EncodePriority+0x30>
10000a2a:	69fb      	ldr	r3, [r7, #28]
10000a2c:	3b03      	subs	r3, #3
10000a2e:	e000      	b.n	10000a32 <NVIC_EncodePriority+0x32>
10000a30:	2300      	movs	r3, #0
10000a32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
10000a34:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
10000a38:	69bb      	ldr	r3, [r7, #24]
10000a3a:	fa02 f303 	lsl.w	r3, r2, r3
10000a3e:	43da      	mvns	r2, r3
10000a40:	68bb      	ldr	r3, [r7, #8]
10000a42:	401a      	ands	r2, r3
10000a44:	697b      	ldr	r3, [r7, #20]
10000a46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
10000a48:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
10000a4c:	697b      	ldr	r3, [r7, #20]
10000a4e:	fa01 f303 	lsl.w	r3, r1, r3
10000a52:	43d9      	mvns	r1, r3
10000a54:	687b      	ldr	r3, [r7, #4]
10000a56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
10000a58:	4313      	orrs	r3, r2
         );
}
10000a5a:	4618      	mov	r0, r3
10000a5c:	3724      	adds	r7, #36	@ 0x24
10000a5e:	46bd      	mov	sp, r7
10000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
10000a64:	4770      	bx	lr
	...

10000a68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
10000a68:	b580      	push	{r7, lr}
10000a6a:	b082      	sub	sp, #8
10000a6c:	af00      	add	r7, sp, #0
10000a6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
10000a70:	687b      	ldr	r3, [r7, #4]
10000a72:	3b01      	subs	r3, #1
10000a74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
10000a78:	d301      	bcc.n	10000a7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
10000a7a:	2301      	movs	r3, #1
10000a7c:	e00f      	b.n	10000a9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
10000a7e:	4a0a      	ldr	r2, [pc, #40]	@ (10000aa8 <SysTick_Config+0x40>)
10000a80:	687b      	ldr	r3, [r7, #4]
10000a82:	3b01      	subs	r3, #1
10000a84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
10000a86:	210f      	movs	r1, #15
10000a88:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
10000a8c:	f7ff ff8e 	bl	100009ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
10000a90:	4b05      	ldr	r3, [pc, #20]	@ (10000aa8 <SysTick_Config+0x40>)
10000a92:	2200      	movs	r2, #0
10000a94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
10000a96:	4b04      	ldr	r3, [pc, #16]	@ (10000aa8 <SysTick_Config+0x40>)
10000a98:	2207      	movs	r2, #7
10000a9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
10000a9c:	2300      	movs	r3, #0
}
10000a9e:	4618      	mov	r0, r3
10000aa0:	3708      	adds	r7, #8
10000aa2:	46bd      	mov	sp, r7
10000aa4:	bd80      	pop	{r7, pc}
10000aa6:	bf00      	nop
10000aa8:	e000e010 	.word	0xe000e010

10000aac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
10000aac:	b580      	push	{r7, lr}
10000aae:	b082      	sub	sp, #8
10000ab0:	af00      	add	r7, sp, #0
10000ab2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
10000ab4:	6878      	ldr	r0, [r7, #4]
10000ab6:	f7ff ff29 	bl	1000090c <__NVIC_SetPriorityGrouping>
}
10000aba:	bf00      	nop
10000abc:	3708      	adds	r7, #8
10000abe:	46bd      	mov	sp, r7
10000ac0:	bd80      	pop	{r7, pc}

10000ac2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
10000ac2:	b580      	push	{r7, lr}
10000ac4:	b086      	sub	sp, #24
10000ac6:	af00      	add	r7, sp, #0
10000ac8:	4603      	mov	r3, r0
10000aca:	60b9      	str	r1, [r7, #8]
10000acc:	607a      	str	r2, [r7, #4]
10000ace:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup = 0x00;
10000ad0:	2300      	movs	r3, #0
10000ad2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
10000ad4:	f7ff ff3e 	bl	10000954 <__NVIC_GetPriorityGrouping>
10000ad8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
10000ada:	687a      	ldr	r2, [r7, #4]
10000adc:	68b9      	ldr	r1, [r7, #8]
10000ade:	6978      	ldr	r0, [r7, #20]
10000ae0:	f7ff ff8e 	bl	10000a00 <NVIC_EncodePriority>
10000ae4:	4602      	mov	r2, r0
10000ae6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
10000aea:	4611      	mov	r1, r2
10000aec:	4618      	mov	r0, r3
10000aee:	f7ff ff5d 	bl	100009ac <__NVIC_SetPriority>
}
10000af2:	bf00      	nop
10000af4:	3718      	adds	r7, #24
10000af6:	46bd      	mov	sp, r7
10000af8:	bd80      	pop	{r7, pc}

10000afa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32mp1xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
10000afa:	b580      	push	{r7, lr}
10000afc:	b082      	sub	sp, #8
10000afe:	af00      	add	r7, sp, #0
10000b00:	4603      	mov	r3, r0
10000b02:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
10000b04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
10000b08:	4618      	mov	r0, r3
10000b0a:	f7ff ff31 	bl	10000970 <__NVIC_EnableIRQ>
}
10000b0e:	bf00      	nop
10000b10:	3708      	adds	r7, #8
10000b12:	46bd      	mov	sp, r7
10000b14:	bd80      	pop	{r7, pc}

10000b16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
10000b16:	b580      	push	{r7, lr}
10000b18:	b082      	sub	sp, #8
10000b1a:	af00      	add	r7, sp, #0
10000b1c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
10000b1e:	6878      	ldr	r0, [r7, #4]
10000b20:	f7ff ffa2 	bl	10000a68 <SysTick_Config>
10000b24:	4603      	mov	r3, r0
}
10000b26:	4618      	mov	r0, r3
10000b28:	3708      	adds	r7, #8
10000b2a:	46bd      	mov	sp, r7
10000b2c:	bd80      	pop	{r7, pc}
	...

10000b30 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
10000b30:	b580      	push	{r7, lr}
10000b32:	b084      	sub	sp, #16
10000b34:	af00      	add	r7, sp, #0
10000b36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
10000b38:	2300      	movs	r3, #0
10000b3a:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
10000b3c:	687b      	ldr	r3, [r7, #4]
10000b3e:	2b00      	cmp	r3, #0
10000b40:	d01e      	beq.n	10000b80 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

#if defined(CORE_CM4)
    IPCC_CommonTypeDef *currentInstance = IPCC_C2;
10000b42:	4b13      	ldr	r3, [pc, #76]	@ (10000b90 <HAL_IPCC_Init+0x60>)
10000b44:	60bb      	str	r3, [r7, #8]
#else
    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
#endif

    if (hipcc->State == HAL_IPCC_STATE_RESET)
10000b46:	687b      	ldr	r3, [r7, #4]
10000b48:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
10000b4c:	b2db      	uxtb	r3, r3
10000b4e:	2b00      	cmp	r3, #0
10000b50:	d102      	bne.n	10000b58 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
10000b52:	6878      	ldr	r0, [r7, #4]
10000b54:	f7ff fb30 	bl	100001b8 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
10000b58:	68b8      	ldr	r0, [r7, #8]
10000b5a:	f000 f9eb 	bl	10000f34 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
10000b5e:	68bb      	ldr	r3, [r7, #8]
10000b60:	681b      	ldr	r3, [r3, #0]
10000b62:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
10000b66:	68bb      	ldr	r3, [r7, #8]
10000b68:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
10000b6a:	6878      	ldr	r0, [r7, #4]
10000b6c:	f000 f9bc 	bl	10000ee8 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
10000b70:	687b      	ldr	r3, [r7, #4]
10000b72:	2200      	movs	r2, #0
10000b74:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
10000b76:	687b      	ldr	r3, [r7, #4]
10000b78:	2201      	movs	r2, #1
10000b7a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
10000b7e:	e001      	b.n	10000b84 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
10000b80:	2301      	movs	r3, #1
10000b82:	73fb      	strb	r3, [r7, #15]
  }

  return err;
10000b84:	7bfb      	ldrb	r3, [r7, #15]
}
10000b86:	4618      	mov	r0, r3
10000b88:	3710      	adds	r7, #16
10000b8a:	46bd      	mov	sp, r7
10000b8c:	bd80      	pop	{r7, pc}
10000b8e:	bf00      	nop
10000b90:	4c001010 	.word	0x4c001010

10000b94 <HAL_IPCC_ActivateNotification>:
  * @param  ChannelDir Channel direction
  * @param  cb Interrupt callback
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_ActivateNotification(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir, ChannelCb cb)
{
10000b94:	b580      	push	{r7, lr}
10000b96:	b086      	sub	sp, #24
10000b98:	af00      	add	r7, sp, #0
10000b9a:	60f8      	str	r0, [r7, #12]
10000b9c:	60b9      	str	r1, [r7, #8]
10000b9e:	603b      	str	r3, [r7, #0]
10000ba0:	4613      	mov	r3, r2
10000ba2:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef err = HAL_OK;
10000ba4:	2300      	movs	r3, #0
10000ba6:	75fb      	strb	r3, [r7, #23]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
10000ba8:	68fb      	ldr	r3, [r7, #12]
10000baa:	2b00      	cmp	r3, #0
10000bac:	d039      	beq.n	10000c22 <HAL_IPCC_ActivateNotification+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    /* Check IPCC state */
    if (hipcc->State == HAL_IPCC_STATE_READY)
10000bae:	68fb      	ldr	r3, [r7, #12]
10000bb0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
10000bb4:	b2db      	uxtb	r3, r3
10000bb6:	2b01      	cmp	r3, #1
10000bb8:	d130      	bne.n	10000c1c <HAL_IPCC_ActivateNotification+0x88>
    {
      /* Set callback and register masking information */
      if (ChannelDir == IPCC_CHANNEL_DIR_TX)
10000bba:	79fb      	ldrb	r3, [r7, #7]
10000bbc:	2b00      	cmp	r3, #0
10000bbe:	d113      	bne.n	10000be8 <HAL_IPCC_ActivateNotification+0x54>
      {
        hipcc->ChannelCallbackTx[ChannelIndex] = cb;
10000bc0:	68fa      	ldr	r2, [r7, #12]
10000bc2:	68bb      	ldr	r3, [r7, #8]
10000bc4:	3306      	adds	r3, #6
10000bc6:	009b      	lsls	r3, r3, #2
10000bc8:	4413      	add	r3, r2
10000bca:	683a      	ldr	r2, [r7, #0]
10000bcc:	605a      	str	r2, [r3, #4]
        hipcc->callbackRequest |= (IPCC_MR_CH1FM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
10000bce:	68fb      	ldr	r3, [r7, #12]
10000bd0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
10000bd2:	68bb      	ldr	r3, [r7, #8]
10000bd4:	f003 030f 	and.w	r3, r3, #15
10000bd8:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
10000bdc:	fa01 f303 	lsl.w	r3, r1, r3
10000be0:	431a      	orrs	r2, r3
10000be2:	68fb      	ldr	r3, [r7, #12]
10000be4:	635a      	str	r2, [r3, #52]	@ 0x34
10000be6:	e010      	b.n	10000c0a <HAL_IPCC_ActivateNotification+0x76>
      }
      else
      {
        hipcc->ChannelCallbackRx[ChannelIndex] = cb;
10000be8:	68fa      	ldr	r2, [r7, #12]
10000bea:	68bb      	ldr	r3, [r7, #8]
10000bec:	009b      	lsls	r3, r3, #2
10000bee:	4413      	add	r3, r2
10000bf0:	683a      	ldr	r2, [r7, #0]
10000bf2:	605a      	str	r2, [r3, #4]
        hipcc->callbackRequest |= (IPCC_MR_CH1OM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
10000bf4:	68fb      	ldr	r3, [r7, #12]
10000bf6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
10000bf8:	68bb      	ldr	r3, [r7, #8]
10000bfa:	f003 030f 	and.w	r3, r3, #15
10000bfe:	2101      	movs	r1, #1
10000c00:	fa01 f303 	lsl.w	r3, r1, r3
10000c04:	431a      	orrs	r2, r3
10000c06:	68fb      	ldr	r3, [r7, #12]
10000c08:	635a      	str	r2, [r3, #52]	@ 0x34
      }

      /* Unmask only the channels in reception (Transmission channel mask/unmask is done in HAL_IPCC_NotifyCPU) */
      if (ChannelDir == IPCC_CHANNEL_DIR_RX)
10000c0a:	79fb      	ldrb	r3, [r7, #7]
10000c0c:	2b01      	cmp	r3, #1
10000c0e:	d10a      	bne.n	10000c26 <HAL_IPCC_ActivateNotification+0x92>
      {
        IPCC_UnmaskInterrupt(ChannelIndex, ChannelDir);
10000c10:	79fb      	ldrb	r3, [r7, #7]
10000c12:	4619      	mov	r1, r3
10000c14:	68b8      	ldr	r0, [r7, #8]
10000c16:	f000 f939 	bl	10000e8c <IPCC_UnmaskInterrupt>
10000c1a:	e004      	b.n	10000c26 <HAL_IPCC_ActivateNotification+0x92>
      }
    }
    else
    {
      err = HAL_ERROR;
10000c1c:	2301      	movs	r3, #1
10000c1e:	75fb      	strb	r3, [r7, #23]
10000c20:	e001      	b.n	10000c26 <HAL_IPCC_ActivateNotification+0x92>
    }
  }
  else
  {
    err = HAL_ERROR;
10000c22:	2301      	movs	r3, #1
10000c24:	75fb      	strb	r3, [r7, #23]
  }
  return err;
10000c26:	7dfb      	ldrb	r3, [r7, #23]
}
10000c28:	4618      	mov	r0, r3
10000c2a:	3718      	adds	r7, #24
10000c2c:	46bd      	mov	sp, r7
10000c2e:	bd80      	pop	{r7, pc}

10000c30 <HAL_IPCC_GetChannelStatus>:
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param  ChannelDir Channel direction
  * @retval Channel status
  */
IPCC_CHANNELStatusTypeDef HAL_IPCC_GetChannelStatus(IPCC_HandleTypeDef const *const hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
10000c30:	b480      	push	{r7}
10000c32:	b089      	sub	sp, #36	@ 0x24
10000c34:	af00      	add	r7, sp, #0
10000c36:	60f8      	str	r0, [r7, #12]
10000c38:	60b9      	str	r1, [r7, #8]
10000c3a:	4613      	mov	r3, r2
10000c3c:	71fb      	strb	r3, [r7, #7]
  uint32_t channel_state;
#if defined(CORE_CM4)
  IPCC_CommonTypeDef *currentInstance = IPCC_C2;
10000c3e:	4b14      	ldr	r3, [pc, #80]	@ (10000c90 <HAL_IPCC_GetChannelStatus+0x60>)
10000c40:	61bb      	str	r3, [r7, #24]
  IPCC_CommonTypeDef *otherInstance = IPCC_C1;
10000c42:	4b14      	ldr	r3, [pc, #80]	@ (10000c94 <HAL_IPCC_GetChannelStatus+0x64>)
10000c44:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

  /* Read corresponding channel depending of the MCU and the direction */
  if (ChannelDir == IPCC_CHANNEL_DIR_TX)
10000c46:	79fb      	ldrb	r3, [r7, #7]
10000c48:	2b00      	cmp	r3, #0
10000c4a:	d10a      	bne.n	10000c62 <HAL_IPCC_GetChannelStatus+0x32>
  {
    channel_state = (currentInstance->SR) & (IPCC_SR_CH1F_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
10000c4c:	69bb      	ldr	r3, [r7, #24]
10000c4e:	68da      	ldr	r2, [r3, #12]
10000c50:	68bb      	ldr	r3, [r7, #8]
10000c52:	f003 030f 	and.w	r3, r3, #15
10000c56:	2101      	movs	r1, #1
10000c58:	fa01 f303 	lsl.w	r3, r1, r3
10000c5c:	4013      	ands	r3, r2
10000c5e:	61fb      	str	r3, [r7, #28]
10000c60:	e009      	b.n	10000c76 <HAL_IPCC_GetChannelStatus+0x46>
  }
  else
  {
    channel_state = (otherInstance->SR) & (IPCC_SR_CH1F_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
10000c62:	697b      	ldr	r3, [r7, #20]
10000c64:	68da      	ldr	r2, [r3, #12]
10000c66:	68bb      	ldr	r3, [r7, #8]
10000c68:	f003 030f 	and.w	r3, r3, #15
10000c6c:	2101      	movs	r1, #1
10000c6e:	fa01 f303 	lsl.w	r3, r1, r3
10000c72:	4013      	ands	r3, r2
10000c74:	61fb      	str	r3, [r7, #28]
  }

  return (channel_state == 0UL) ? IPCC_CHANNEL_STATUS_FREE : IPCC_CHANNEL_STATUS_OCCUPIED ;
10000c76:	69fb      	ldr	r3, [r7, #28]
10000c78:	2b00      	cmp	r3, #0
10000c7a:	bf14      	ite	ne
10000c7c:	2301      	movne	r3, #1
10000c7e:	2300      	moveq	r3, #0
10000c80:	b2db      	uxtb	r3, r3
}
10000c82:	4618      	mov	r0, r3
10000c84:	3724      	adds	r7, #36	@ 0x24
10000c86:	46bd      	mov	sp, r7
10000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
10000c8c:	4770      	bx	lr
10000c8e:	bf00      	nop
10000c90:	4c001010 	.word	0x4c001010
10000c94:	4c001000 	.word	0x4c001000

10000c98 <HAL_IPCC_NotifyCPU>:
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param  ChannelDir Channel direction
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_NotifyCPU(IPCC_HandleTypeDef const *const hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
10000c98:	b580      	push	{r7, lr}
10000c9a:	b088      	sub	sp, #32
10000c9c:	af00      	add	r7, sp, #0
10000c9e:	60f8      	str	r0, [r7, #12]
10000ca0:	60b9      	str	r1, [r7, #8]
10000ca2:	4613      	mov	r3, r2
10000ca4:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef err = HAL_OK;
10000ca6:	2300      	movs	r3, #0
10000ca8:	77fb      	strb	r3, [r7, #31]
  uint32_t mask;
#if defined(CORE_CM4)
  IPCC_CommonTypeDef *currentInstance = IPCC_C2;
10000caa:	4b1d      	ldr	r3, [pc, #116]	@ (10000d20 <HAL_IPCC_NotifyCPU+0x88>)
10000cac:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

  /* Check if IPCC is initiliased */
  if (hipcc->State == HAL_IPCC_STATE_READY)
10000cae:	68fb      	ldr	r3, [r7, #12]
10000cb0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
10000cb4:	b2db      	uxtb	r3, r3
10000cb6:	2b01      	cmp	r3, #1
10000cb8:	d12a      	bne.n	10000d10 <HAL_IPCC_NotifyCPU+0x78>
  {
    /* For IPCC_CHANNEL_DIR_TX, set the status. For IPCC_CHANNEL_DIR_RX, clear the status */
    currentInstance->SCR |= ((ChannelDir == IPCC_CHANNEL_DIR_TX) ? IPCC_SCR_CH1S : IPCC_SCR_CH1C) << (ChannelIndex & CHANNEL_INDEX_Msk) ;
10000cba:	69bb      	ldr	r3, [r7, #24]
10000cbc:	689a      	ldr	r2, [r3, #8]
10000cbe:	79fb      	ldrb	r3, [r7, #7]
10000cc0:	2b00      	cmp	r3, #0
10000cc2:	d102      	bne.n	10000cca <HAL_IPCC_NotifyCPU+0x32>
10000cc4:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
10000cc8:	e000      	b.n	10000ccc <HAL_IPCC_NotifyCPU+0x34>
10000cca:	2101      	movs	r1, #1
10000ccc:	68bb      	ldr	r3, [r7, #8]
10000cce:	f003 030f 	and.w	r3, r3, #15
10000cd2:	fa01 f303 	lsl.w	r3, r1, r3
10000cd6:	431a      	orrs	r2, r3
10000cd8:	69bb      	ldr	r3, [r7, #24]
10000cda:	609a      	str	r2, [r3, #8]

    /* Unmask interrupt if the callback is requested */
    mask = ((ChannelDir == IPCC_CHANNEL_DIR_TX) ? IPCC_MR_CH1FM_Msk : IPCC_MR_CH1OM_Msk) << (ChannelIndex & CHANNEL_INDEX_Msk) ;
10000cdc:	79fb      	ldrb	r3, [r7, #7]
10000cde:	2b00      	cmp	r3, #0
10000ce0:	d102      	bne.n	10000ce8 <HAL_IPCC_NotifyCPU+0x50>
10000ce2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
10000ce6:	e000      	b.n	10000cea <HAL_IPCC_NotifyCPU+0x52>
10000ce8:	2201      	movs	r2, #1
10000cea:	68bb      	ldr	r3, [r7, #8]
10000cec:	f003 030f 	and.w	r3, r3, #15
10000cf0:	fa02 f303 	lsl.w	r3, r2, r3
10000cf4:	617b      	str	r3, [r7, #20]
    if ((hipcc->callbackRequest & mask) == mask)
10000cf6:	68fb      	ldr	r3, [r7, #12]
10000cf8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
10000cfa:	697b      	ldr	r3, [r7, #20]
10000cfc:	4013      	ands	r3, r2
10000cfe:	697a      	ldr	r2, [r7, #20]
10000d00:	429a      	cmp	r2, r3
10000d02:	d107      	bne.n	10000d14 <HAL_IPCC_NotifyCPU+0x7c>
    {
      IPCC_UnmaskInterrupt(ChannelIndex, ChannelDir);
10000d04:	79fb      	ldrb	r3, [r7, #7]
10000d06:	4619      	mov	r1, r3
10000d08:	68b8      	ldr	r0, [r7, #8]
10000d0a:	f000 f8bf 	bl	10000e8c <IPCC_UnmaskInterrupt>
10000d0e:	e001      	b.n	10000d14 <HAL_IPCC_NotifyCPU+0x7c>
    }
  }
  else
  {
    err = HAL_ERROR;
10000d10:	2301      	movs	r3, #1
10000d12:	77fb      	strb	r3, [r7, #31]
  }

  return err;
10000d14:	7ffb      	ldrb	r3, [r7, #31]
}
10000d16:	4618      	mov	r0, r3
10000d18:	3720      	adds	r7, #32
10000d1a:	46bd      	mov	sp, r7
10000d1c:	bd80      	pop	{r7, pc}
10000d1e:	bf00      	nop
10000d20:	4c001010 	.word	0x4c001010

10000d24 <HAL_IPCC_TX_IRQHandler>:
  * @brief  This function handles IPCC Tx Free interrupt request.
  * @param  hipcc IPCC handle
  * @retval None
  */
void HAL_IPCC_TX_IRQHandler(IPCC_HandleTypeDef *const hipcc)
{
10000d24:	b580      	push	{r7, lr}
10000d26:	b086      	sub	sp, #24
10000d28:	af00      	add	r7, sp, #0
10000d2a:	6078      	str	r0, [r7, #4]
  uint32_t irqmask;
  uint32_t bit_pos;
  uint32_t ch_count = 0U;
10000d2c:	2300      	movs	r3, #0
10000d2e:	613b      	str	r3, [r7, #16]
#if defined(CORE_CM4)
  IPCC_CommonTypeDef *currentInstance = IPCC_C2;
10000d30:	4b22      	ldr	r3, [pc, #136]	@ (10000dbc <HAL_IPCC_TX_IRQHandler+0x98>)
10000d32:	60fb      	str	r3, [r7, #12]
#else
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
#endif

  /* check the Tx free channels which are not masked */
  irqmask = ~(currentInstance->MR) & IPCC_ALL_TX_BUF;
10000d34:	68fb      	ldr	r3, [r7, #12]
10000d36:	685b      	ldr	r3, [r3, #4]
10000d38:	43db      	mvns	r3, r3
10000d3a:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
10000d3e:	617b      	str	r3, [r7, #20]
  irqmask = irqmask & ~(currentInstance->SR << IPCC_MR_CH1FM_Pos);
10000d40:	68fb      	ldr	r3, [r7, #12]
10000d42:	68db      	ldr	r3, [r3, #12]
10000d44:	041b      	lsls	r3, r3, #16
10000d46:	43db      	mvns	r3, r3
10000d48:	697a      	ldr	r2, [r7, #20]
10000d4a:	4013      	ands	r3, r2
10000d4c:	617b      	str	r3, [r7, #20]

  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
10000d4e:	e02c      	b.n	10000daa <HAL_IPCC_TX_IRQHandler+0x86>
  {
    bit_pos = 1UL << (IPCC_MR_CH1FM_Pos + (ch_count & CHANNEL_INDEX_Msk));
10000d50:	693b      	ldr	r3, [r7, #16]
10000d52:	f003 030f 	and.w	r3, r3, #15
10000d56:	3310      	adds	r3, #16
10000d58:	2201      	movs	r2, #1
10000d5a:	fa02 f303 	lsl.w	r3, r2, r3
10000d5e:	60bb      	str	r3, [r7, #8]

    if ((irqmask & bit_pos) != 0U)
10000d60:	697a      	ldr	r2, [r7, #20]
10000d62:	68bb      	ldr	r3, [r7, #8]
10000d64:	4013      	ands	r3, r2
10000d66:	2b00      	cmp	r3, #0
10000d68:	d01c      	beq.n	10000da4 <HAL_IPCC_TX_IRQHandler+0x80>
    {
      /* mask the channel Free interrupt  */
      currentInstance->MR |= bit_pos;
10000d6a:	68fb      	ldr	r3, [r7, #12]
10000d6c:	685a      	ldr	r2, [r3, #4]
10000d6e:	68bb      	ldr	r3, [r7, #8]
10000d70:	431a      	orrs	r2, r3
10000d72:	68fb      	ldr	r3, [r7, #12]
10000d74:	605a      	str	r2, [r3, #4]
      if (hipcc->ChannelCallbackTx[ch_count] != NULL)
10000d76:	687a      	ldr	r2, [r7, #4]
10000d78:	693b      	ldr	r3, [r7, #16]
10000d7a:	3306      	adds	r3, #6
10000d7c:	009b      	lsls	r3, r3, #2
10000d7e:	4413      	add	r3, r2
10000d80:	685b      	ldr	r3, [r3, #4]
10000d82:	2b00      	cmp	r3, #0
10000d84:	d009      	beq.n	10000d9a <HAL_IPCC_TX_IRQHandler+0x76>
      {
        hipcc->ChannelCallbackTx[ch_count](hipcc, ch_count, IPCC_CHANNEL_DIR_TX);
10000d86:	687a      	ldr	r2, [r7, #4]
10000d88:	693b      	ldr	r3, [r7, #16]
10000d8a:	3306      	adds	r3, #6
10000d8c:	009b      	lsls	r3, r3, #2
10000d8e:	4413      	add	r3, r2
10000d90:	685b      	ldr	r3, [r3, #4]
10000d92:	2200      	movs	r2, #0
10000d94:	6939      	ldr	r1, [r7, #16]
10000d96:	6878      	ldr	r0, [r7, #4]
10000d98:	4798      	blx	r3
      }
      irqmask =  irqmask & ~(bit_pos);
10000d9a:	68bb      	ldr	r3, [r7, #8]
10000d9c:	43db      	mvns	r3, r3
10000d9e:	697a      	ldr	r2, [r7, #20]
10000da0:	4013      	ands	r3, r2
10000da2:	617b      	str	r3, [r7, #20]
    }
    ch_count++;
10000da4:	693b      	ldr	r3, [r7, #16]
10000da6:	3301      	adds	r3, #1
10000da8:	613b      	str	r3, [r7, #16]
  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
10000daa:	697b      	ldr	r3, [r7, #20]
10000dac:	2b00      	cmp	r3, #0
10000dae:	d1cf      	bne.n	10000d50 <HAL_IPCC_TX_IRQHandler+0x2c>
  }
}
10000db0:	bf00      	nop
10000db2:	bf00      	nop
10000db4:	3718      	adds	r7, #24
10000db6:	46bd      	mov	sp, r7
10000db8:	bd80      	pop	{r7, pc}
10000dba:	bf00      	nop
10000dbc:	4c001010 	.word	0x4c001010

10000dc0 <HAL_IPCC_RX_IRQHandler>:
  * @brief  This function handles IPCC Rx Occupied interrupt request.
  * @param  hipcc : IPCC handle
  * @retval None
  */
void HAL_IPCC_RX_IRQHandler(IPCC_HandleTypeDef *const hipcc)
{
10000dc0:	b580      	push	{r7, lr}
10000dc2:	b088      	sub	sp, #32
10000dc4:	af00      	add	r7, sp, #0
10000dc6:	6078      	str	r0, [r7, #4]
  uint32_t irqmask;
  uint32_t bit_pos;
  uint32_t ch_count = 0U;
10000dc8:	2300      	movs	r3, #0
10000dca:	61bb      	str	r3, [r7, #24]
#if defined(CORE_CM4)
  IPCC_CommonTypeDef *currentInstance = IPCC_C2;
10000dcc:	4b20      	ldr	r3, [pc, #128]	@ (10000e50 <HAL_IPCC_RX_IRQHandler+0x90>)
10000dce:	617b      	str	r3, [r7, #20]
  IPCC_CommonTypeDef *otherInstance = IPCC_C1;
10000dd0:	4b20      	ldr	r3, [pc, #128]	@ (10000e54 <HAL_IPCC_RX_IRQHandler+0x94>)
10000dd2:	613b      	str	r3, [r7, #16]
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
  IPCC_CommonTypeDef *otherInstance = IPCC_C2;
#endif

  /* check the Rx occupied channels which are not masked */
  irqmask = ~(currentInstance->MR) & IPCC_ALL_RX_BUF;
10000dd4:	697b      	ldr	r3, [r7, #20]
10000dd6:	685b      	ldr	r3, [r3, #4]
10000dd8:	43db      	mvns	r3, r3
10000dda:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
10000dde:	61fb      	str	r3, [r7, #28]
  irqmask = irqmask & otherInstance->SR;
10000de0:	693b      	ldr	r3, [r7, #16]
10000de2:	68db      	ldr	r3, [r3, #12]
10000de4:	69fa      	ldr	r2, [r7, #28]
10000de6:	4013      	ands	r3, r2
10000de8:	61fb      	str	r3, [r7, #28]

  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
10000dea:	e029      	b.n	10000e40 <HAL_IPCC_RX_IRQHandler+0x80>
  {
    bit_pos = 1UL << (ch_count & CHANNEL_INDEX_Msk);
10000dec:	69bb      	ldr	r3, [r7, #24]
10000dee:	f003 030f 	and.w	r3, r3, #15
10000df2:	2201      	movs	r2, #1
10000df4:	fa02 f303 	lsl.w	r3, r2, r3
10000df8:	60fb      	str	r3, [r7, #12]

    if ((irqmask & bit_pos) != 0U)
10000dfa:	69fa      	ldr	r2, [r7, #28]
10000dfc:	68fb      	ldr	r3, [r7, #12]
10000dfe:	4013      	ands	r3, r2
10000e00:	2b00      	cmp	r3, #0
10000e02:	d01a      	beq.n	10000e3a <HAL_IPCC_RX_IRQHandler+0x7a>
    {
      /* mask the channel occupied interrupt */
      currentInstance->MR |= bit_pos;
10000e04:	697b      	ldr	r3, [r7, #20]
10000e06:	685a      	ldr	r2, [r3, #4]
10000e08:	68fb      	ldr	r3, [r7, #12]
10000e0a:	431a      	orrs	r2, r3
10000e0c:	697b      	ldr	r3, [r7, #20]
10000e0e:	605a      	str	r2, [r3, #4]
      if (hipcc->ChannelCallbackRx[ch_count] != NULL)
10000e10:	687a      	ldr	r2, [r7, #4]
10000e12:	69bb      	ldr	r3, [r7, #24]
10000e14:	009b      	lsls	r3, r3, #2
10000e16:	4413      	add	r3, r2
10000e18:	685b      	ldr	r3, [r3, #4]
10000e1a:	2b00      	cmp	r3, #0
10000e1c:	d008      	beq.n	10000e30 <HAL_IPCC_RX_IRQHandler+0x70>
      {
        hipcc->ChannelCallbackRx[ch_count](hipcc, ch_count, IPCC_CHANNEL_DIR_RX);
10000e1e:	687a      	ldr	r2, [r7, #4]
10000e20:	69bb      	ldr	r3, [r7, #24]
10000e22:	009b      	lsls	r3, r3, #2
10000e24:	4413      	add	r3, r2
10000e26:	685b      	ldr	r3, [r3, #4]
10000e28:	2201      	movs	r2, #1
10000e2a:	69b9      	ldr	r1, [r7, #24]
10000e2c:	6878      	ldr	r0, [r7, #4]
10000e2e:	4798      	blx	r3
      }
      irqmask = irqmask & ~(bit_pos);
10000e30:	68fb      	ldr	r3, [r7, #12]
10000e32:	43db      	mvns	r3, r3
10000e34:	69fa      	ldr	r2, [r7, #28]
10000e36:	4013      	ands	r3, r2
10000e38:	61fb      	str	r3, [r7, #28]
    }
    ch_count++;
10000e3a:	69bb      	ldr	r3, [r7, #24]
10000e3c:	3301      	adds	r3, #1
10000e3e:	61bb      	str	r3, [r7, #24]
  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
10000e40:	69fb      	ldr	r3, [r7, #28]
10000e42:	2b00      	cmp	r3, #0
10000e44:	d1d2      	bne.n	10000dec <HAL_IPCC_RX_IRQHandler+0x2c>
  }
}
10000e46:	bf00      	nop
10000e48:	bf00      	nop
10000e4a:	3720      	adds	r7, #32
10000e4c:	46bd      	mov	sp, r7
10000e4e:	bd80      	pop	{r7, pc}
10000e50:	4c001010 	.word	0x4c001010
10000e54:	4c001000 	.word	0x4c001000

10000e58 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
10000e58:	b480      	push	{r7}
10000e5a:	b085      	sub	sp, #20
10000e5c:	af00      	add	r7, sp, #0
10000e5e:	60f8      	str	r0, [r7, #12]
10000e60:	60b9      	str	r1, [r7, #8]
10000e62:	4613      	mov	r3, r2
10000e64:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
10000e66:	bf00      	nop
10000e68:	3714      	adds	r7, #20
10000e6a:	46bd      	mov	sp, r7
10000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
10000e70:	4770      	bx	lr

10000e72 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
10000e72:	b480      	push	{r7}
10000e74:	b085      	sub	sp, #20
10000e76:	af00      	add	r7, sp, #0
10000e78:	60f8      	str	r0, [r7, #12]
10000e7a:	60b9      	str	r1, [r7, #8]
10000e7c:	4613      	mov	r3, r2
10000e7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
10000e80:	bf00      	nop
10000e82:	3714      	adds	r7, #20
10000e84:	46bd      	mov	sp, r7
10000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
10000e8a:	4770      	bx	lr

10000e8c <IPCC_UnmaskInterrupt>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param  ChannelDir Channel direction
  */
void IPCC_UnmaskInterrupt(uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
10000e8c:	b480      	push	{r7}
10000e8e:	b085      	sub	sp, #20
10000e90:	af00      	add	r7, sp, #0
10000e92:	6078      	str	r0, [r7, #4]
10000e94:	460b      	mov	r3, r1
10000e96:	70fb      	strb	r3, [r7, #3]
#if defined(CORE_CM4)
  IPCC_CommonTypeDef *currentInstance = IPCC_C2;
10000e98:	4b12      	ldr	r3, [pc, #72]	@ (10000ee4 <IPCC_UnmaskInterrupt+0x58>)
10000e9a:	60fb      	str	r3, [r7, #12]
#else
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
#endif
  if (ChannelDir == IPCC_CHANNEL_DIR_TX)
10000e9c:	78fb      	ldrb	r3, [r7, #3]
10000e9e:	2b00      	cmp	r3, #0
10000ea0:	d10d      	bne.n	10000ebe <IPCC_UnmaskInterrupt+0x32>
  {
    /* Unmask interrupt */
    currentInstance->MR &= ~(IPCC_MR_CH1FM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
10000ea2:	68fb      	ldr	r3, [r7, #12]
10000ea4:	685a      	ldr	r2, [r3, #4]
10000ea6:	687b      	ldr	r3, [r7, #4]
10000ea8:	f003 030f 	and.w	r3, r3, #15
10000eac:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
10000eb0:	fa01 f303 	lsl.w	r3, r1, r3
10000eb4:	43db      	mvns	r3, r3
10000eb6:	401a      	ands	r2, r3
10000eb8:	68fb      	ldr	r3, [r7, #12]
10000eba:	605a      	str	r2, [r3, #4]
  else
  {
    /* Unmask interrupt */
    currentInstance->MR &= ~(IPCC_MR_CH1OM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
  }
}
10000ebc:	e00b      	b.n	10000ed6 <IPCC_UnmaskInterrupt+0x4a>
    currentInstance->MR &= ~(IPCC_MR_CH1OM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
10000ebe:	68fb      	ldr	r3, [r7, #12]
10000ec0:	685a      	ldr	r2, [r3, #4]
10000ec2:	687b      	ldr	r3, [r7, #4]
10000ec4:	f003 030f 	and.w	r3, r3, #15
10000ec8:	2101      	movs	r1, #1
10000eca:	fa01 f303 	lsl.w	r3, r1, r3
10000ece:	43db      	mvns	r3, r3
10000ed0:	401a      	ands	r2, r3
10000ed2:	68fb      	ldr	r3, [r7, #12]
10000ed4:	605a      	str	r2, [r3, #4]
}
10000ed6:	bf00      	nop
10000ed8:	3714      	adds	r7, #20
10000eda:	46bd      	mov	sp, r7
10000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
10000ee0:	4770      	bx	lr
10000ee2:	bf00      	nop
10000ee4:	4c001010 	.word	0x4c001010

10000ee8 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
10000ee8:	b480      	push	{r7}
10000eea:	b085      	sub	sp, #20
10000eec:	af00      	add	r7, sp, #0
10000eee:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
10000ef0:	2300      	movs	r3, #0
10000ef2:	60fb      	str	r3, [r7, #12]
10000ef4:	e00f      	b.n	10000f16 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
10000ef6:	687a      	ldr	r2, [r7, #4]
10000ef8:	68fb      	ldr	r3, [r7, #12]
10000efa:	009b      	lsls	r3, r3, #2
10000efc:	4413      	add	r3, r2
10000efe:	4a0b      	ldr	r2, [pc, #44]	@ (10000f2c <IPCC_SetDefaultCallbacks+0x44>)
10000f00:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
10000f02:	687a      	ldr	r2, [r7, #4]
10000f04:	68fb      	ldr	r3, [r7, #12]
10000f06:	3306      	adds	r3, #6
10000f08:	009b      	lsls	r3, r3, #2
10000f0a:	4413      	add	r3, r2
10000f0c:	4a08      	ldr	r2, [pc, #32]	@ (10000f30 <IPCC_SetDefaultCallbacks+0x48>)
10000f0e:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
10000f10:	68fb      	ldr	r3, [r7, #12]
10000f12:	3301      	adds	r3, #1
10000f14:	60fb      	str	r3, [r7, #12]
10000f16:	68fb      	ldr	r3, [r7, #12]
10000f18:	2b05      	cmp	r3, #5
10000f1a:	d9ec      	bls.n	10000ef6 <IPCC_SetDefaultCallbacks+0xe>
  }
}
10000f1c:	bf00      	nop
10000f1e:	bf00      	nop
10000f20:	3714      	adds	r7, #20
10000f22:	46bd      	mov	sp, r7
10000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
10000f28:	4770      	bx	lr
10000f2a:	bf00      	nop
10000f2c:	10000e59 	.word	0x10000e59
10000f30:	10000e73 	.word	0x10000e73

10000f34 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
10000f34:	b480      	push	{r7}
10000f36:	b083      	sub	sp, #12
10000f38:	af00      	add	r7, sp, #0
10000f3a:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
10000f3c:	687b      	ldr	r3, [r7, #4]
10000f3e:	2200      	movs	r2, #0
10000f40:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
10000f42:	687b      	ldr	r3, [r7, #4]
10000f44:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
10000f48:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
10000f4a:	687b      	ldr	r3, [r7, #4]
10000f4c:	223f      	movs	r2, #63	@ 0x3f
10000f4e:	609a      	str	r2, [r3, #8]
}
10000f50:	bf00      	nop
10000f52:	370c      	adds	r7, #12
10000f54:	46bd      	mov	sp, r7
10000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
10000f5a:	4770      	bx	lr

10000f5c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
10000f5c:	b480      	push	{r7}
10000f5e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
10000f60:	4b05      	ldr	r3, [pc, #20]	@ (10000f78 <HAL_PWR_EnableBkUpAccess+0x1c>)
10000f62:	681b      	ldr	r3, [r3, #0]
10000f64:	4a04      	ldr	r2, [pc, #16]	@ (10000f78 <HAL_PWR_EnableBkUpAccess+0x1c>)
10000f66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
10000f6a:	6013      	str	r3, [r2, #0]
}
10000f6c:	bf00      	nop
10000f6e:	46bd      	mov	sp, r7
10000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
10000f74:	4770      	bx	lr
10000f76:	bf00      	nop
10000f78:	50001000 	.word	0x50001000

10000f7c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
10000f7c:	b580      	push	{r7, lr}
10000f7e:	b084      	sub	sp, #16
10000f80:	af00      	add	r7, sp, #0
10000f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef result = HAL_OK;
10000f84:	2300      	movs	r3, #0
10000f86:	73fb      	strb	r3, [r7, #15]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
10000f88:	687b      	ldr	r3, [r7, #4]
10000f8a:	2b00      	cmp	r3, #0
10000f8c:	d101      	bne.n	10000f92 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
10000f8e:	2301      	movs	r3, #1
10000f90:	e320      	b.n	100015d4 <HAL_RCC_OscConfig+0x658>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
10000f92:	687b      	ldr	r3, [r7, #4]
10000f94:	681b      	ldr	r3, [r3, #0]
10000f96:	f003 0301 	and.w	r3, r3, #1
10000f9a:	2b00      	cmp	r3, #0
10000f9c:	f000 8081 	beq.w	100010a2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used somewhere in the system it will not be disabled */
    if (IS_HSE_IN_USE())
10000fa0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000fa4:	6a1b      	ldr	r3, [r3, #32]
10000fa6:	f003 0303 	and.w	r3, r3, #3
10000faa:	2b01      	cmp	r3, #1
10000fac:	d107      	bne.n	10000fbe <HAL_RCC_OscConfig+0x42>
10000fae:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000fb2:	6a1b      	ldr	r3, [r3, #32]
10000fb4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10000fb8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10000fbc:	d054      	beq.n	10001068 <HAL_RCC_OscConfig+0xec>
10000fbe:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10000fc4:	f003 0307 	and.w	r3, r3, #7
10000fc8:	2b01      	cmp	r3, #1
10000fca:	d107      	bne.n	10000fdc <HAL_RCC_OscConfig+0x60>
10000fcc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10000fd2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10000fd6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10000fda:	d045      	beq.n	10001068 <HAL_RCC_OscConfig+0xec>
10000fdc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000fe0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10000fe2:	f003 0303 	and.w	r3, r3, #3
10000fe6:	2b01      	cmp	r3, #1
10000fe8:	d107      	bne.n	10000ffa <HAL_RCC_OscConfig+0x7e>
10000fea:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000fee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10000ff0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10000ff4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10000ff8:	d036      	beq.n	10001068 <HAL_RCC_OscConfig+0xec>
10000ffa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000ffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10001000:	f003 0303 	and.w	r3, r3, #3
10001004:	2b01      	cmp	r3, #1
10001006:	d10f      	bne.n	10001028 <HAL_RCC_OscConfig+0xac>
10001008:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000100c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10001010:	f003 0302 	and.w	r3, r3, #2
10001014:	2b02      	cmp	r3, #2
10001016:	d027      	beq.n	10001068 <HAL_RCC_OscConfig+0xec>
10001018:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000101c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10001020:	f003 0302 	and.w	r3, r3, #2
10001024:	2b02      	cmp	r3, #2
10001026:	d01f      	beq.n	10001068 <HAL_RCC_OscConfig+0xec>
10001028:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000102c:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
10001030:	f003 0303 	and.w	r3, r3, #3
10001034:	2b01      	cmp	r3, #1
10001036:	d107      	bne.n	10001048 <HAL_RCC_OscConfig+0xcc>
10001038:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000103c:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10001040:	f003 0302 	and.w	r3, r3, #2
10001044:	2b02      	cmp	r3, #2
10001046:	d00f      	beq.n	10001068 <HAL_RCC_OscConfig+0xec>
10001048:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000104c:	f8d3 3824 	ldr.w	r3, [r3, #2084]	@ 0x824
10001050:	f003 0303 	and.w	r3, r3, #3
10001054:	2b01      	cmp	r3, #1
10001056:	d117      	bne.n	10001088 <HAL_RCC_OscConfig+0x10c>
10001058:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000105c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10001060:	f003 0302 	and.w	r3, r3, #2
10001064:	2b02      	cmp	r3, #2
10001066:	d10f      	bne.n	10001088 <HAL_RCC_OscConfig+0x10c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState != RCC_HSE_ON))
10001068:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000106c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10001070:	f403 7380 	and.w	r3, r3, #256	@ 0x100
10001074:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
10001078:	d112      	bne.n	100010a0 <HAL_RCC_OscConfig+0x124>
1000107a:	687b      	ldr	r3, [r7, #4]
1000107c:	685b      	ldr	r3, [r3, #4]
1000107e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
10001082:	d00d      	beq.n	100010a0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
10001084:	2301      	movs	r3, #1
10001086:	e2a5      	b.n	100015d4 <HAL_RCC_OscConfig+0x658>
      }
    }
    else
    {
      /* Configure HSE oscillator */
      result = HAL_RCC_HSEConfig(RCC_OscInitStruct->HSEState);
10001088:	687b      	ldr	r3, [r7, #4]
1000108a:	685b      	ldr	r3, [r3, #4]
1000108c:	4618      	mov	r0, r3
1000108e:	f000 faa7 	bl	100015e0 <HAL_RCC_HSEConfig>
10001092:	4603      	mov	r3, r0
10001094:	73fb      	strb	r3, [r7, #15]
      if (result != HAL_OK)
10001096:	7bfb      	ldrb	r3, [r7, #15]
10001098:	2b00      	cmp	r3, #0
1000109a:	d002      	beq.n	100010a2 <HAL_RCC_OscConfig+0x126>
      {
        return result;
1000109c:	7bfb      	ldrb	r3, [r7, #15]
1000109e:	e299      	b.n	100015d4 <HAL_RCC_OscConfig+0x658>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState != RCC_HSE_ON))
100010a0:	bf00      	nop
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
100010a2:	687b      	ldr	r3, [r7, #4]
100010a4:	681b      	ldr	r3, [r3, #0]
100010a6:	f003 0302 	and.w	r3, r3, #2
100010aa:	2b00      	cmp	r3, #0
100010ac:	f000 814e 	beq.w	1000134c <HAL_RCC_OscConfig+0x3d0>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDivValue));

    /* When the HSI is used as system clock it will not disabled */
    if (IS_HSI_IN_USE())
100010b0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100010b4:	6a1b      	ldr	r3, [r3, #32]
100010b6:	f003 0303 	and.w	r3, r3, #3
100010ba:	2b00      	cmp	r3, #0
100010bc:	d107      	bne.n	100010ce <HAL_RCC_OscConfig+0x152>
100010be:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100010c2:	6a1b      	ldr	r3, [r3, #32]
100010c4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
100010c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
100010cc:	d055      	beq.n	1000117a <HAL_RCC_OscConfig+0x1fe>
100010ce:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100010d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100010d4:	f003 0307 	and.w	r3, r3, #7
100010d8:	2b00      	cmp	r3, #0
100010da:	d107      	bne.n	100010ec <HAL_RCC_OscConfig+0x170>
100010dc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100010e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100010e2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
100010e6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
100010ea:	d046      	beq.n	1000117a <HAL_RCC_OscConfig+0x1fe>
100010ec:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100010f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
100010f2:	f003 0303 	and.w	r3, r3, #3
100010f6:	2b00      	cmp	r3, #0
100010f8:	d107      	bne.n	1000110a <HAL_RCC_OscConfig+0x18e>
100010fa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100010fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10001100:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10001104:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10001108:	d037      	beq.n	1000117a <HAL_RCC_OscConfig+0x1fe>
1000110a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000110e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10001110:	f003 0303 	and.w	r3, r3, #3
10001114:	2b00      	cmp	r3, #0
10001116:	d10f      	bne.n	10001138 <HAL_RCC_OscConfig+0x1bc>
10001118:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000111c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10001120:	f003 0302 	and.w	r3, r3, #2
10001124:	2b02      	cmp	r3, #2
10001126:	d028      	beq.n	1000117a <HAL_RCC_OscConfig+0x1fe>
10001128:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000112c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10001130:	f003 0302 	and.w	r3, r3, #2
10001134:	2b02      	cmp	r3, #2
10001136:	d020      	beq.n	1000117a <HAL_RCC_OscConfig+0x1fe>
10001138:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000113c:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
10001140:	f003 0303 	and.w	r3, r3, #3
10001144:	2b00      	cmp	r3, #0
10001146:	d107      	bne.n	10001158 <HAL_RCC_OscConfig+0x1dc>
10001148:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000114c:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10001150:	f003 0302 	and.w	r3, r3, #2
10001154:	2b02      	cmp	r3, #2
10001156:	d010      	beq.n	1000117a <HAL_RCC_OscConfig+0x1fe>
10001158:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000115c:	f8d3 3824 	ldr.w	r3, [r3, #2084]	@ 0x824
10001160:	f003 0303 	and.w	r3, r3, #3
10001164:	2b00      	cmp	r3, #0
10001166:	f040 8088 	bne.w	1000127a <HAL_RCC_OscConfig+0x2fe>
1000116a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000116e:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10001172:	f003 0302 	and.w	r3, r3, #2
10001176:	2b02      	cmp	r3, #2
10001178:	d17f      	bne.n	1000127a <HAL_RCC_OscConfig+0x2fe>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
1000117a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000117e:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10001182:	f003 0301 	and.w	r3, r3, #1
10001186:	2b01      	cmp	r3, #1
10001188:	d105      	bne.n	10001196 <HAL_RCC_OscConfig+0x21a>
1000118a:	687b      	ldr	r3, [r7, #4]
1000118c:	68db      	ldr	r3, [r3, #12]
1000118e:	2b01      	cmp	r3, #1
10001190:	d001      	beq.n	10001196 <HAL_RCC_OscConfig+0x21a>
      {
        return HAL_ERROR;
10001192:	2301      	movs	r3, #1
10001194:	e21e      	b.n	100015d4 <HAL_RCC_OscConfig+0x658>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
10001196:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000119a:	699b      	ldr	r3, [r3, #24]
1000119c:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
100011a0:	687b      	ldr	r3, [r7, #4]
100011a2:	691b      	ldr	r3, [r3, #16]
100011a4:	021b      	lsls	r3, r3, #8
100011a6:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100011aa:	4313      	orrs	r3, r2
100011ac:	618b      	str	r3, [r1, #24]

        /* It is not allowed to change HSIDIV if HSI is currently used as
         * reference clock for a PLL
         */
        if (((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) ||
100011ae:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100011b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100011b4:	f003 0303 	and.w	r3, r3, #3
100011b8:	2b00      	cmp	r3, #0
100011ba:	d10f      	bne.n	100011dc <HAL_RCC_OscConfig+0x260>
             ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY)) &&
100011bc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100011c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
100011c4:	f003 0302 	and.w	r3, r3, #2
        if (((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) ||
100011c8:	2b02      	cmp	r3, #2
100011ca:	d047      	beq.n	1000125c <HAL_RCC_OscConfig+0x2e0>
              ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY))))) &&
100011cc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100011d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
100011d4:	f003 0302 	and.w	r3, r3, #2
             ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY)) &&
100011d8:	2b02      	cmp	r3, #2
100011da:	d03f      	beq.n	1000125c <HAL_RCC_OscConfig+0x2e0>
            ((__HAL_RCC_GET_PLL3_SOURCE() != RCC_PLL3SOURCE_HSI) ||
100011dc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100011e0:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
100011e4:	f003 0303 	and.w	r3, r3, #3
              ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY))))) &&
100011e8:	2b00      	cmp	r3, #0
100011ea:	d107      	bne.n	100011fc <HAL_RCC_OscConfig+0x280>
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY))) &&
100011ec:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100011f0:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100011f4:	f003 0302 	and.w	r3, r3, #2
            ((__HAL_RCC_GET_PLL3_SOURCE() != RCC_PLL3SOURCE_HSI) ||
100011f8:	2b02      	cmp	r3, #2
100011fa:	d02f      	beq.n	1000125c <HAL_RCC_OscConfig+0x2e0>
            ((__HAL_RCC_GET_PLL4_SOURCE() != RCC_PLL4SOURCE_HSI) ||
100011fc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001200:	f8d3 3824 	ldr.w	r3, [r3, #2084]	@ 0x824
10001204:	f003 0303 	and.w	r3, r3, #3
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY))) &&
10001208:	2b00      	cmp	r3, #0
1000120a:	d107      	bne.n	1000121c <HAL_RCC_OscConfig+0x2a0>
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY))))
1000120c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001210:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10001214:	f003 0302 	and.w	r3, r3, #2
            ((__HAL_RCC_GET_PLL4_SOURCE() != RCC_PLL4SOURCE_HSI) ||
10001218:	2b02      	cmp	r3, #2
1000121a:	d01f      	beq.n	1000125c <HAL_RCC_OscConfig+0x2e0>
        {
          /* Update HSIDIV value */
          __HAL_RCC_HSI_DIV(RCC_OscInitStruct->HSIDivValue);
1000121c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001220:	699b      	ldr	r3, [r3, #24]
10001222:	f023 0203 	bic.w	r2, r3, #3
10001226:	687b      	ldr	r3, [r7, #4]
10001228:	695b      	ldr	r3, [r3, #20]
1000122a:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
1000122e:	4313      	orrs	r3, r2
10001230:	618b      	str	r3, [r1, #24]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
10001232:	f7ff fb5f 	bl	100008f4 <HAL_GetTick>
10001236:	60b8      	str	r0, [r7, #8]

          /* Wait till HSIDIV is ready */
          while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
10001238:	e008      	b.n	1000124c <HAL_RCC_OscConfig+0x2d0>
          {
            if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
1000123a:	f7ff fb5b 	bl	100008f4 <HAL_GetTick>
1000123e:	4602      	mov	r2, r0
10001240:	68bb      	ldr	r3, [r7, #8]
10001242:	1ad3      	subs	r3, r2, r3
10001244:	2b64      	cmp	r3, #100	@ 0x64
10001246:	d901      	bls.n	1000124c <HAL_RCC_OscConfig+0x2d0>
            {
              return HAL_TIMEOUT;
10001248:	2303      	movs	r3, #3
1000124a:	e1c3      	b.n	100015d4 <HAL_RCC_OscConfig+0x658>
          while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
1000124c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001250:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10001254:	f003 0304 	and.w	r3, r3, #4
10001258:	2b04      	cmp	r3, #4
1000125a:	d1ee      	bne.n	1000123a <HAL_RCC_OscConfig+0x2be>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  HAL_RCC_GetSystemCoreClockFreq();
1000125c:	f001 f809 	bl	10002272 <HAL_RCC_GetSystemCoreClockFreq>
10001260:	4603      	mov	r3, r0
10001262:	4ab3      	ldr	r2, [pc, #716]	@ (10001530 <HAL_RCC_OscConfig+0x5b4>)
10001264:	6013      	str	r3, [r2, #0]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
10001266:	4bb3      	ldr	r3, [pc, #716]	@ (10001534 <HAL_RCC_OscConfig+0x5b8>)
10001268:	681b      	ldr	r3, [r3, #0]
1000126a:	4618      	mov	r0, r3
1000126c:	f7ff faf8 	bl	10000860 <HAL_InitTick>
10001270:	4603      	mov	r3, r0
10001272:	2b00      	cmp	r3, #0
10001274:	d069      	beq.n	1000134a <HAL_RCC_OscConfig+0x3ce>
        {
          return HAL_ERROR;
10001276:	2301      	movs	r3, #1
10001278:	e1ac      	b.n	100015d4 <HAL_RCC_OscConfig+0x658>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
1000127a:	687b      	ldr	r3, [r7, #4]
1000127c:	68db      	ldr	r3, [r3, #12]
1000127e:	2b00      	cmp	r3, #0
10001280:	d049      	beq.n	10001316 <HAL_RCC_OscConfig+0x39a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
10001282:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001286:	68db      	ldr	r3, [r3, #12]
10001288:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000128c:	f043 0301 	orr.w	r3, r3, #1
10001290:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10001292:	f7ff fb2f 	bl	100008f4 <HAL_GetTick>
10001296:	60b8      	str	r0, [r7, #8]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10001298:	e008      	b.n	100012ac <HAL_RCC_OscConfig+0x330>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
1000129a:	f7ff fb2b 	bl	100008f4 <HAL_GetTick>
1000129e:	4602      	mov	r2, r0
100012a0:	68bb      	ldr	r3, [r7, #8]
100012a2:	1ad3      	subs	r3, r2, r3
100012a4:	2b64      	cmp	r3, #100	@ 0x64
100012a6:	d901      	bls.n	100012ac <HAL_RCC_OscConfig+0x330>
          {
            return HAL_TIMEOUT;
100012a8:	2303      	movs	r3, #3
100012aa:	e193      	b.n	100015d4 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
100012ac:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100012b0:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
100012b4:	f003 0301 	and.w	r3, r3, #1
100012b8:	2b01      	cmp	r3, #1
100012ba:	d1ee      	bne.n	1000129a <HAL_RCC_OscConfig+0x31e>
          }
        }

        /* Update HSIDIV value */
        __HAL_RCC_HSI_DIV(RCC_OscInitStruct->HSIDivValue);
100012bc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100012c0:	699b      	ldr	r3, [r3, #24]
100012c2:	f023 0203 	bic.w	r2, r3, #3
100012c6:	687b      	ldr	r3, [r7, #4]
100012c8:	695b      	ldr	r3, [r3, #20]
100012ca:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100012ce:	4313      	orrs	r3, r2
100012d0:	618b      	str	r3, [r1, #24]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100012d2:	f7ff fb0f 	bl	100008f4 <HAL_GetTick>
100012d6:	60b8      	str	r0, [r7, #8]

        /* Wait till HSIDIV is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
100012d8:	e008      	b.n	100012ec <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
100012da:	f7ff fb0b 	bl	100008f4 <HAL_GetTick>
100012de:	4602      	mov	r2, r0
100012e0:	68bb      	ldr	r3, [r7, #8]
100012e2:	1ad3      	subs	r3, r2, r3
100012e4:	2b64      	cmp	r3, #100	@ 0x64
100012e6:	d901      	bls.n	100012ec <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
100012e8:	2303      	movs	r3, #3
100012ea:	e173      	b.n	100015d4 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
100012ec:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100012f0:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
100012f4:	f003 0304 	and.w	r3, r3, #4
100012f8:	2b04      	cmp	r3, #4
100012fa:	d1ee      	bne.n	100012da <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
100012fc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001300:	699b      	ldr	r3, [r3, #24]
10001302:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
10001306:	687b      	ldr	r3, [r7, #4]
10001308:	691b      	ldr	r3, [r3, #16]
1000130a:	021b      	lsls	r3, r3, #8
1000130c:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10001310:	4313      	orrs	r3, r2
10001312:	618b      	str	r3, [r1, #24]
10001314:	e01a      	b.n	1000134c <HAL_RCC_OscConfig+0x3d0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
10001316:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000131a:	2201      	movs	r2, #1
1000131c:	611a      	str	r2, [r3, #16]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
1000131e:	f7ff fae9 	bl	100008f4 <HAL_GetTick>
10001322:	60b8      	str	r0, [r7, #8]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
10001324:	e008      	b.n	10001338 <HAL_RCC_OscConfig+0x3bc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
10001326:	f7ff fae5 	bl	100008f4 <HAL_GetTick>
1000132a:	4602      	mov	r2, r0
1000132c:	68bb      	ldr	r3, [r7, #8]
1000132e:	1ad3      	subs	r3, r2, r3
10001330:	2b64      	cmp	r3, #100	@ 0x64
10001332:	d901      	bls.n	10001338 <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
10001334:	2303      	movs	r3, #3
10001336:	e14d      	b.n	100015d4 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
10001338:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000133c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10001340:	f003 0301 	and.w	r3, r3, #1
10001344:	2b01      	cmp	r3, #1
10001346:	d0ee      	beq.n	10001326 <HAL_RCC_OscConfig+0x3aa>
10001348:	e000      	b.n	1000134c <HAL_RCC_OscConfig+0x3d0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
1000134a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
1000134c:	687b      	ldr	r3, [r7, #4]
1000134e:	681b      	ldr	r3, [r3, #0]
10001350:	f003 0310 	and.w	r3, r3, #16
10001354:	2b00      	cmp	r3, #0
10001356:	f000 8091 	beq.w	1000147c <HAL_RCC_OscConfig+0x500>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    if (IS_CSI_IN_USE())
1000135a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000135e:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
10001362:	f003 0303 	and.w	r3, r3, #3
10001366:	2b02      	cmp	r3, #2
10001368:	d107      	bne.n	1000137a <HAL_RCC_OscConfig+0x3fe>
1000136a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000136e:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10001372:	f003 0302 	and.w	r3, r3, #2
10001376:	2b02      	cmp	r3, #2
10001378:	d01e      	beq.n	100013b8 <HAL_RCC_OscConfig+0x43c>
1000137a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000137e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10001380:	f003 0303 	and.w	r3, r3, #3
10001384:	2b02      	cmp	r3, #2
10001386:	d107      	bne.n	10001398 <HAL_RCC_OscConfig+0x41c>
10001388:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000138c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
1000138e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10001392:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10001396:	d00f      	beq.n	100013b8 <HAL_RCC_OscConfig+0x43c>
10001398:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000139c:	f8d3 3824 	ldr.w	r3, [r3, #2084]	@ 0x824
100013a0:	f003 0303 	and.w	r3, r3, #3
100013a4:	2b02      	cmp	r3, #2
100013a6:	d122      	bne.n	100013ee <HAL_RCC_OscConfig+0x472>
100013a8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100013ac:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100013b0:	f003 0302 	and.w	r3, r3, #2
100013b4:	2b02      	cmp	r3, #2
100013b6:	d11a      	bne.n	100013ee <HAL_RCC_OscConfig+0x472>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
100013b8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100013bc:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
100013c0:	f003 0310 	and.w	r3, r3, #16
100013c4:	2b10      	cmp	r3, #16
100013c6:	d105      	bne.n	100013d4 <HAL_RCC_OscConfig+0x458>
100013c8:	687b      	ldr	r3, [r7, #4]
100013ca:	69db      	ldr	r3, [r3, #28]
100013cc:	2b10      	cmp	r3, #16
100013ce:	d001      	beq.n	100013d4 <HAL_RCC_OscConfig+0x458>
      {
        return HAL_ERROR;
100013d0:	2301      	movs	r3, #1
100013d2:	e0ff      	b.n	100015d4 <HAL_RCC_OscConfig+0x658>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
100013d4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100013d8:	69db      	ldr	r3, [r3, #28]
100013da:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
100013de:	687b      	ldr	r3, [r7, #4]
100013e0:	6a1b      	ldr	r3, [r3, #32]
100013e2:	021b      	lsls	r3, r3, #8
100013e4:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100013e8:	4313      	orrs	r3, r2
100013ea:	61cb      	str	r3, [r1, #28]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
100013ec:	e046      	b.n	1000147c <HAL_RCC_OscConfig+0x500>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
100013ee:	687b      	ldr	r3, [r7, #4]
100013f0:	69db      	ldr	r3, [r3, #28]
100013f2:	2b00      	cmp	r3, #0
100013f4:	d029      	beq.n	1000144a <HAL_RCC_OscConfig+0x4ce>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
100013f6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100013fa:	68db      	ldr	r3, [r3, #12]
100013fc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001400:	f043 0310 	orr.w	r3, r3, #16
10001404:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10001406:	f7ff fa75 	bl	100008f4 <HAL_GetTick>
1000140a:	60b8      	str	r0, [r7, #8]

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
1000140c:	e008      	b.n	10001420 <HAL_RCC_OscConfig+0x4a4>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
1000140e:	f7ff fa71 	bl	100008f4 <HAL_GetTick>
10001412:	4602      	mov	r2, r0
10001414:	68bb      	ldr	r3, [r7, #8]
10001416:	1ad3      	subs	r3, r2, r3
10001418:	2b64      	cmp	r3, #100	@ 0x64
1000141a:	d901      	bls.n	10001420 <HAL_RCC_OscConfig+0x4a4>
          {
            return HAL_TIMEOUT;
1000141c:	2303      	movs	r3, #3
1000141e:	e0d9      	b.n	100015d4 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
10001420:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001424:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10001428:	f003 0310 	and.w	r3, r3, #16
1000142c:	2b10      	cmp	r3, #16
1000142e:	d1ee      	bne.n	1000140e <HAL_RCC_OscConfig+0x492>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
10001430:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001434:	69db      	ldr	r3, [r3, #28]
10001436:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
1000143a:	687b      	ldr	r3, [r7, #4]
1000143c:	6a1b      	ldr	r3, [r3, #32]
1000143e:	021b      	lsls	r3, r3, #8
10001440:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10001444:	4313      	orrs	r3, r2
10001446:	61cb      	str	r3, [r1, #28]
10001448:	e018      	b.n	1000147c <HAL_RCC_OscConfig+0x500>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
1000144a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000144e:	2210      	movs	r2, #16
10001450:	611a      	str	r2, [r3, #16]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10001452:	f7ff fa4f 	bl	100008f4 <HAL_GetTick>
10001456:	60b8      	str	r0, [r7, #8]

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
10001458:	e008      	b.n	1000146c <HAL_RCC_OscConfig+0x4f0>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
1000145a:	f7ff fa4b 	bl	100008f4 <HAL_GetTick>
1000145e:	4602      	mov	r2, r0
10001460:	68bb      	ldr	r3, [r7, #8]
10001462:	1ad3      	subs	r3, r2, r3
10001464:	2b64      	cmp	r3, #100	@ 0x64
10001466:	d901      	bls.n	1000146c <HAL_RCC_OscConfig+0x4f0>
          {
            return HAL_TIMEOUT;
10001468:	2303      	movs	r3, #3
1000146a:	e0b3      	b.n	100015d4 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
1000146c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001470:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10001474:	f003 0310 	and.w	r3, r3, #16
10001478:	2b10      	cmp	r3, #16
1000147a:	d0ee      	beq.n	1000145a <HAL_RCC_OscConfig+0x4de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
1000147c:	687b      	ldr	r3, [r7, #4]
1000147e:	681b      	ldr	r3, [r3, #0]
10001480:	f003 0308 	and.w	r3, r3, #8
10001484:	2b00      	cmp	r3, #0
10001486:	d042      	beq.n	1000150e <HAL_RCC_OscConfig+0x592>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
10001488:	687b      	ldr	r3, [r7, #4]
1000148a:	699b      	ldr	r3, [r3, #24]
1000148c:	2b00      	cmp	r3, #0
1000148e:	d01f      	beq.n	100014d0 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
10001490:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001494:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
10001498:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000149c:	f043 0301 	orr.w	r3, r3, #1
100014a0:	f8c2 3144 	str.w	r3, [r2, #324]	@ 0x144

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
100014a4:	f7ff fa26 	bl	100008f4 <HAL_GetTick>
100014a8:	60b8      	str	r0, [r7, #8]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
100014aa:	e008      	b.n	100014be <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
100014ac:	f7ff fa22 	bl	100008f4 <HAL_GetTick>
100014b0:	4602      	mov	r2, r0
100014b2:	68bb      	ldr	r3, [r7, #8]
100014b4:	1ad3      	subs	r3, r2, r3
100014b6:	2b64      	cmp	r3, #100	@ 0x64
100014b8:	d901      	bls.n	100014be <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
100014ba:	2303      	movs	r3, #3
100014bc:	e08a      	b.n	100015d4 <HAL_RCC_OscConfig+0x658>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
100014be:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100014c2:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
100014c6:	f003 0302 	and.w	r3, r3, #2
100014ca:	2b02      	cmp	r3, #2
100014cc:	d1ee      	bne.n	100014ac <HAL_RCC_OscConfig+0x530>
100014ce:	e01e      	b.n	1000150e <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
100014d0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100014d4:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
100014d8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100014dc:	f023 0301 	bic.w	r3, r3, #1
100014e0:	f8c2 3144 	str.w	r3, [r2, #324]	@ 0x144

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
100014e4:	f7ff fa06 	bl	100008f4 <HAL_GetTick>
100014e8:	60b8      	str	r0, [r7, #8]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
100014ea:	e008      	b.n	100014fe <HAL_RCC_OscConfig+0x582>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
100014ec:	f7ff fa02 	bl	100008f4 <HAL_GetTick>
100014f0:	4602      	mov	r2, r0
100014f2:	68bb      	ldr	r3, [r7, #8]
100014f4:	1ad3      	subs	r3, r2, r3
100014f6:	2b64      	cmp	r3, #100	@ 0x64
100014f8:	d901      	bls.n	100014fe <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
100014fa:	2303      	movs	r3, #3
100014fc:	e06a      	b.n	100015d4 <HAL_RCC_OscConfig+0x658>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
100014fe:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001502:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
10001506:	f003 0302 	and.w	r3, r3, #2
1000150a:	2b02      	cmp	r3, #2
1000150c:	d0ee      	beq.n	100014ec <HAL_RCC_OscConfig+0x570>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
1000150e:	687b      	ldr	r3, [r7, #4]
10001510:	681b      	ldr	r3, [r3, #0]
10001512:	f003 0304 	and.w	r3, r3, #4
10001516:	2b00      	cmp	r3, #0
10001518:	d02b      	beq.n	10001572 <HAL_RCC_OscConfig+0x5f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
1000151a:	4b07      	ldr	r3, [pc, #28]	@ (10001538 <HAL_RCC_OscConfig+0x5bc>)
1000151c:	681b      	ldr	r3, [r3, #0]
1000151e:	4a06      	ldr	r2, [pc, #24]	@ (10001538 <HAL_RCC_OscConfig+0x5bc>)
10001520:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
10001524:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
10001526:	f7ff f9e5 	bl	100008f4 <HAL_GetTick>
1000152a:	60b8      	str	r0, [r7, #8]

    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
1000152c:	e00f      	b.n	1000154e <HAL_RCC_OscConfig+0x5d2>
1000152e:	bf00      	nop
10001530:	10020000 	.word	0x10020000
10001534:	10020004 	.word	0x10020004
10001538:	50001000 	.word	0x50001000
    {
      if ((HAL_GetTick() - tickstart) > DBP_TIMEOUT_VALUE)
1000153c:	f7ff f9da 	bl	100008f4 <HAL_GetTick>
10001540:	4602      	mov	r2, r0
10001542:	68bb      	ldr	r3, [r7, #8]
10001544:	1ad3      	subs	r3, r2, r3
10001546:	2b64      	cmp	r3, #100	@ 0x64
10001548:	d901      	bls.n	1000154e <HAL_RCC_OscConfig+0x5d2>
      {
        return HAL_TIMEOUT;
1000154a:	2303      	movs	r3, #3
1000154c:	e042      	b.n	100015d4 <HAL_RCC_OscConfig+0x658>
    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
1000154e:	4b23      	ldr	r3, [pc, #140]	@ (100015dc <HAL_RCC_OscConfig+0x660>)
10001550:	681b      	ldr	r3, [r3, #0]
10001552:	f403 7380 	and.w	r3, r3, #256	@ 0x100
10001556:	2b00      	cmp	r3, #0
10001558:	d0f0      	beq.n	1000153c <HAL_RCC_OscConfig+0x5c0>
      }
    }

    result = HAL_RCC_LSEConfig(RCC_OscInitStruct->LSEState);
1000155a:	687b      	ldr	r3, [r7, #4]
1000155c:	689b      	ldr	r3, [r3, #8]
1000155e:	4618      	mov	r0, r3
10001560:	f000 f8a9 	bl	100016b6 <HAL_RCC_LSEConfig>
10001564:	4603      	mov	r3, r0
10001566:	73fb      	strb	r3, [r7, #15]
    if (result != HAL_OK)
10001568:	7bfb      	ldrb	r3, [r7, #15]
1000156a:	2b00      	cmp	r3, #0
1000156c:	d001      	beq.n	10001572 <HAL_RCC_OscConfig+0x5f6>
    {
      return result;
1000156e:	7bfb      	ldrb	r3, [r7, #15]
10001570:	e030      	b.n	100015d4 <HAL_RCC_OscConfig+0x658>
  } /* Close LSE Configuration */

  /*-------------------------------- PLL Configuration -----------------------*/

  /* Configure PLL1 */
  result = RCC_PLL1_Config(&(RCC_OscInitStruct->PLL));
10001572:	687b      	ldr	r3, [r7, #4]
10001574:	3324      	adds	r3, #36	@ 0x24
10001576:	4618      	mov	r0, r3
10001578:	f000 f91a 	bl	100017b0 <RCC_PLL1_Config>
1000157c:	4603      	mov	r3, r0
1000157e:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
10001580:	7bfb      	ldrb	r3, [r7, #15]
10001582:	2b00      	cmp	r3, #0
10001584:	d001      	beq.n	1000158a <HAL_RCC_OscConfig+0x60e>
  {
    return result;
10001586:	7bfb      	ldrb	r3, [r7, #15]
10001588:	e024      	b.n	100015d4 <HAL_RCC_OscConfig+0x658>
  }

  /* Configure PLL2 */
  result = RCCEx_PLL2_Config(&(RCC_OscInitStruct->PLL2));
1000158a:	687b      	ldr	r3, [r7, #4]
1000158c:	3360      	adds	r3, #96	@ 0x60
1000158e:	4618      	mov	r0, r3
10001590:	f000 fecc 	bl	1000232c <RCCEx_PLL2_Config>
10001594:	4603      	mov	r3, r0
10001596:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
10001598:	7bfb      	ldrb	r3, [r7, #15]
1000159a:	2b00      	cmp	r3, #0
1000159c:	d001      	beq.n	100015a2 <HAL_RCC_OscConfig+0x626>
  {
    return result;
1000159e:	7bfb      	ldrb	r3, [r7, #15]
100015a0:	e018      	b.n	100015d4 <HAL_RCC_OscConfig+0x658>
  }

  /* Configure PLL3 */
  result = RCCEx_PLL3_Config(&(RCC_OscInitStruct->PLL3));
100015a2:	687b      	ldr	r3, [r7, #4]
100015a4:	339c      	adds	r3, #156	@ 0x9c
100015a6:	4618      	mov	r0, r3
100015a8:	f001 f842 	bl	10002630 <RCCEx_PLL3_Config>
100015ac:	4603      	mov	r3, r0
100015ae:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
100015b0:	7bfb      	ldrb	r3, [r7, #15]
100015b2:	2b00      	cmp	r3, #0
100015b4:	d001      	beq.n	100015ba <HAL_RCC_OscConfig+0x63e>
  {
    return result;
100015b6:	7bfb      	ldrb	r3, [r7, #15]
100015b8:	e00c      	b.n	100015d4 <HAL_RCC_OscConfig+0x658>
  }

  /* Configure PLL4 */
  result = RCCEx_PLL4_Config(&(RCC_OscInitStruct->PLL4));
100015ba:	687b      	ldr	r3, [r7, #4]
100015bc:	33d8      	adds	r3, #216	@ 0xd8
100015be:	4618      	mov	r0, r3
100015c0:	f001 f9a0 	bl	10002904 <RCCEx_PLL4_Config>
100015c4:	4603      	mov	r3, r0
100015c6:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
100015c8:	7bfb      	ldrb	r3, [r7, #15]
100015ca:	2b00      	cmp	r3, #0
100015cc:	d001      	beq.n	100015d2 <HAL_RCC_OscConfig+0x656>
  {
    return result;
100015ce:	7bfb      	ldrb	r3, [r7, #15]
100015d0:	e000      	b.n	100015d4 <HAL_RCC_OscConfig+0x658>
  }

  return HAL_OK;
100015d2:	2300      	movs	r3, #0
}
100015d4:	4618      	mov	r0, r3
100015d6:	3710      	adds	r7, #16
100015d8:	46bd      	mov	sp, r7
100015da:	bd80      	pop	{r7, pc}
100015dc:	50001000 	.word	0x50001000

100015e0 <HAL_RCC_HSEConfig>:
  *               @arg RCC_HSE_BYPASS_DIG: HSE oscillator bypassed with external
  *                    clock using a full-swing digital signal provided to OSC_IN
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_HSEConfig(uint32_t State)
{
100015e0:	b580      	push	{r7, lr}
100015e2:	b084      	sub	sp, #16
100015e4:	af00      	add	r7, sp, #0
100015e6:	6078      	str	r0, [r7, #4]

  /* Check parameter */
  assert_param(IS_RCC_HSE(State));

  /* Disable HSEON before configuring the HSE --------------*/
  WRITE_REG(RCC->OCENCLRR, RCC_OCENCLRR_HSEON);
100015e8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100015ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
100015f0:	611a      	str	r2, [r3, #16]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
100015f2:	f7ff f97f 	bl	100008f4 <HAL_GetTick>
100015f6:	60f8      	str	r0, [r7, #12]

  /* Wait till HSE is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
100015f8:	e008      	b.n	1000160c <HAL_RCC_HSEConfig+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
100015fa:	f7ff f97b 	bl	100008f4 <HAL_GetTick>
100015fe:	4602      	mov	r2, r0
10001600:	68fb      	ldr	r3, [r7, #12]
10001602:	1ad3      	subs	r3, r2, r3
10001604:	2b64      	cmp	r3, #100	@ 0x64
10001606:	d901      	bls.n	1000160c <HAL_RCC_HSEConfig+0x2c>
    {
      return HAL_TIMEOUT;
10001608:	2303      	movs	r3, #3
1000160a:	e050      	b.n	100016ae <HAL_RCC_HSEConfig+0xce>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
1000160c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001610:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10001614:	f403 7380 	and.w	r3, r3, #256	@ 0x100
10001618:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
1000161c:	d0ed      	beq.n	100015fa <HAL_RCC_HSEConfig+0x1a>
    }
  }

  /* Clear remaining bits */
  WRITE_REG(RCC->OCENCLRR, (RCC_OCENCLRR_DIGBYP | RCC_OCENSETR_HSEBYP));
1000161e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001622:	f44f 6290 	mov.w	r2, #1152	@ 0x480
10001626:	611a      	str	r2, [r3, #16]

  /* Enable HSE if needed ---------------------------------------*/
  if (State != RCC_HSE_OFF)
10001628:	687b      	ldr	r3, [r7, #4]
1000162a:	2b00      	cmp	r3, #0
1000162c:	d03e      	beq.n	100016ac <HAL_RCC_HSEConfig+0xcc>
  {
    if (State == RCC_HSE_BYPASS)
1000162e:	687b      	ldr	r3, [r7, #4]
10001630:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
10001634:	d108      	bne.n	10001648 <HAL_RCC_HSEConfig+0x68>
    {
      SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEBYP);
10001636:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000163a:	68db      	ldr	r3, [r3, #12]
1000163c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001640:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
10001644:	60d3      	str	r3, [r2, #12]
10001646:	e013      	b.n	10001670 <HAL_RCC_HSEConfig+0x90>
    }
    else if (State == RCC_HSE_BYPASS_DIG)
10001648:	687b      	ldr	r3, [r7, #4]
1000164a:	f5b3 6fb0 	cmp.w	r3, #1408	@ 0x580
1000164e:	d10f      	bne.n	10001670 <HAL_RCC_HSEConfig+0x90>
    {
      SET_BIT(RCC->OCENSETR, RCC_OCENCLRR_DIGBYP);
10001650:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001654:	68db      	ldr	r3, [r3, #12]
10001656:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000165a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
1000165e:	60d3      	str	r3, [r2, #12]
      SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEBYP);
10001660:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001664:	68db      	ldr	r3, [r3, #12]
10001666:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000166a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
1000166e:	60d3      	str	r3, [r2, #12]
    }

    /* Enable oscillator */
    SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEON);
10001670:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001674:	68db      	ldr	r3, [r3, #12]
10001676:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000167a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
1000167e:	60d3      	str	r3, [r2, #12]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10001680:	f7ff f938 	bl	100008f4 <HAL_GetTick>
10001684:	60f8      	str	r0, [r7, #12]

    /* Wait till HSE is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
10001686:	e008      	b.n	1000169a <HAL_RCC_HSEConfig+0xba>
    {
      if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
10001688:	f7ff f934 	bl	100008f4 <HAL_GetTick>
1000168c:	4602      	mov	r2, r0
1000168e:	68fb      	ldr	r3, [r7, #12]
10001690:	1ad3      	subs	r3, r2, r3
10001692:	2b64      	cmp	r3, #100	@ 0x64
10001694:	d901      	bls.n	1000169a <HAL_RCC_HSEConfig+0xba>
      {
        return HAL_TIMEOUT;
10001696:	2303      	movs	r3, #3
10001698:	e009      	b.n	100016ae <HAL_RCC_HSEConfig+0xce>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
1000169a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000169e:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
100016a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
100016a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
100016aa:	d1ed      	bne.n	10001688 <HAL_RCC_HSEConfig+0xa8>
      }
    }
  }

  return HAL_OK;
100016ac:	2300      	movs	r3, #0
}
100016ae:	4618      	mov	r0, r3
100016b0:	3710      	adds	r7, #16
100016b2:	46bd      	mov	sp, r7
100016b4:	bd80      	pop	{r7, pc}

100016b6 <HAL_RCC_LSEConfig>:
  *            @arg RCC_LSE_BYPASS_DIG: LSE oscillator bypassed with external
  *                 clock using a full-swing digital signal provided to OSC32_IN
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_LSEConfig(uint32_t State)
{
100016b6:	b580      	push	{r7, lr}
100016b8:	b084      	sub	sp, #16
100016ba:	af00      	add	r7, sp, #0
100016bc:	6078      	str	r0, [r7, #4]

  /* Check parameter */
  assert_param(IS_RCC_LSE(State));

  /* Turning LSE off is needed before configuring */
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
100016be:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100016c2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
100016c6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100016ca:	f023 0301 	bic.w	r3, r3, #1
100016ce:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
100016d2:	f7ff f90f 	bl	100008f4 <HAL_GetTick>
100016d6:	60f8      	str	r0, [r7, #12]

  /* Wait till LSE is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
100016d8:	e00a      	b.n	100016f0 <HAL_RCC_LSEConfig+0x3a>
  {
    if ((HAL_GetTick() - tickstart) > LSE_TIMEOUT_VALUE)
100016da:	f7ff f90b 	bl	100008f4 <HAL_GetTick>
100016de:	4602      	mov	r2, r0
100016e0:	68fb      	ldr	r3, [r7, #12]
100016e2:	1ad3      	subs	r3, r2, r3
100016e4:	f241 3288 	movw	r2, #5000	@ 0x1388
100016e8:	4293      	cmp	r3, r2
100016ea:	d901      	bls.n	100016f0 <HAL_RCC_LSEConfig+0x3a>
    {
      return HAL_TIMEOUT;
100016ec:	2303      	movs	r3, #3
100016ee:	e05b      	b.n	100017a8 <HAL_RCC_LSEConfig+0xf2>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
100016f0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100016f4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
100016f8:	f003 0304 	and.w	r3, r3, #4
100016fc:	2b04      	cmp	r3, #4
100016fe:	d0ec      	beq.n	100016da <HAL_RCC_LSEConfig+0x24>
    }
  }

  /* Clear remaining bits */
  CLEAR_BIT(RCC->BDCR, (RCC_BDCR_LSEBYP | RCC_BDCR_DIGBYP));
10001700:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001704:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10001708:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000170c:	f023 030a 	bic.w	r3, r3, #10
10001710:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140

  /* Enable LSE if needed */
  if (State != RCC_LSE_OFF)
10001714:	687b      	ldr	r3, [r7, #4]
10001716:	2b00      	cmp	r3, #0
10001718:	d045      	beq.n	100017a6 <HAL_RCC_LSEConfig+0xf0>
  {
    if (State == RCC_LSE_BYPASS)
1000171a:	687b      	ldr	r3, [r7, #4]
1000171c:	2b03      	cmp	r3, #3
1000171e:	d10a      	bne.n	10001736 <HAL_RCC_LSEConfig+0x80>
    {
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
10001720:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001724:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10001728:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000172c:	f043 0302 	orr.w	r3, r3, #2
10001730:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
10001734:	e016      	b.n	10001764 <HAL_RCC_LSEConfig+0xae>
    }
    else if (State == RCC_LSE_BYPASS_DIG)
10001736:	687b      	ldr	r3, [r7, #4]
10001738:	2b0b      	cmp	r3, #11
1000173a:	d113      	bne.n	10001764 <HAL_RCC_LSEConfig+0xae>
    {
      SET_BIT(RCC->BDCR, RCC_BDCR_DIGBYP);
1000173c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001740:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10001744:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001748:	f043 0308 	orr.w	r3, r3, #8
1000174c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
10001750:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001754:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10001758:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000175c:	f043 0302 	orr.w	r3, r3, #2
10001760:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
    }

    /* Enable oscillator */
    SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
10001764:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001768:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
1000176c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001770:	f043 0301 	orr.w	r3, r3, #1
10001774:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10001778:	f7ff f8bc 	bl	100008f4 <HAL_GetTick>
1000177c:	60f8      	str	r0, [r7, #12]

    /* Wait till LSE is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
1000177e:	e00a      	b.n	10001796 <HAL_RCC_LSEConfig+0xe0>
    {
      if ((HAL_GetTick() - tickstart) > LSE_TIMEOUT_VALUE)
10001780:	f7ff f8b8 	bl	100008f4 <HAL_GetTick>
10001784:	4602      	mov	r2, r0
10001786:	68fb      	ldr	r3, [r7, #12]
10001788:	1ad3      	subs	r3, r2, r3
1000178a:	f241 3288 	movw	r2, #5000	@ 0x1388
1000178e:	4293      	cmp	r3, r2
10001790:	d901      	bls.n	10001796 <HAL_RCC_LSEConfig+0xe0>
      {
        return HAL_TIMEOUT;
10001792:	2303      	movs	r3, #3
10001794:	e008      	b.n	100017a8 <HAL_RCC_LSEConfig+0xf2>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
10001796:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000179a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
1000179e:	f003 0304 	and.w	r3, r3, #4
100017a2:	2b04      	cmp	r3, #4
100017a4:	d1ec      	bne.n	10001780 <HAL_RCC_LSEConfig+0xca>
      }
    }
  } /* Enable LSE if needed */

  return HAL_OK;
100017a6:	2300      	movs	r3, #0
}
100017a8:	4618      	mov	r0, r3
100017aa:	3710      	adds	r7, #16
100017ac:	46bd      	mov	sp, r7
100017ae:	bd80      	pop	{r7, pc}

100017b0 <RCC_PLL1_Config>:

HAL_StatusTypeDef RCC_PLL1_Config(RCC_PLLInitTypeDef *pll1)
{
100017b0:	b580      	push	{r7, lr}
100017b2:	b084      	sub	sp, #16
100017b4:	af00      	add	r7, sp, #0
100017b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll1->PLLState));
  if ((pll1->PLLState) != RCC_PLL_NONE)
100017b8:	687b      	ldr	r3, [r7, #4]
100017ba:	681b      	ldr	r3, [r3, #0]
100017bc:	2b00      	cmp	r3, #0
100017be:	f000 8174 	beq.w	10001aaa <RCC_PLL1_Config+0x2fa>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL1_IN_USE()) /* If not used then */
100017c2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100017c6:	6a1b      	ldr	r3, [r3, #32]
100017c8:	f003 0303 	and.w	r3, r3, #3
100017cc:	2b02      	cmp	r3, #2
100017ce:	d108      	bne.n	100017e2 <RCC_PLL1_Config+0x32>
100017d0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100017d4:	6a1b      	ldr	r3, [r3, #32]
100017d6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
100017da:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
100017de:	f000 8162 	beq.w	10001aa6 <RCC_PLL1_Config+0x2f6>
100017e2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100017e6:	6a1b      	ldr	r3, [r3, #32]
100017e8:	f003 0303 	and.w	r3, r3, #3
100017ec:	2b03      	cmp	r3, #3
100017ee:	d108      	bne.n	10001802 <RCC_PLL1_Config+0x52>
100017f0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100017f4:	6a1b      	ldr	r3, [r3, #32]
100017f6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
100017fa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
100017fe:	f000 8152 	beq.w	10001aa6 <RCC_PLL1_Config+0x2f6>
    {
      if ((pll1->PLLState) == RCC_PLL_ON)
10001802:	687b      	ldr	r3, [r7, #4]
10001804:	681b      	ldr	r3, [r3, #0]
10001806:	2b02      	cmp	r3, #2
10001808:	f040 8123 	bne.w	10001a52 <RCC_PLL1_Config+0x2a2>
        assert_param(IS_RCC_PLLP1_VALUE(pll1->PLLP));
        assert_param(IS_RCC_PLLQ1_VALUE(pll1->PLLQ));
        assert_param(IS_RCC_PLLR1_VALUE(pll1->PLLR));

        /*Disable the post-dividers*/
        __HAL_RCC_PLL1CLKOUT_DISABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
1000180c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001810:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10001814:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001818:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
1000181c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
        /* Disable the main PLL. */
        __HAL_RCC_PLL1_DISABLE();
10001820:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001824:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10001828:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000182c:	f023 0301 	bic.w	r3, r3, #1
10001830:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10001834:	f7ff f85e 	bl	100008f4 <HAL_GetTick>
10001838:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
1000183a:	e008      	b.n	1000184e <RCC_PLL1_Config+0x9e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1000183c:	f7ff f85a 	bl	100008f4 <HAL_GetTick>
10001840:	4602      	mov	r2, r0
10001842:	68fb      	ldr	r3, [r7, #12]
10001844:	1ad3      	subs	r3, r2, r3
10001846:	2b64      	cmp	r3, #100	@ 0x64
10001848:	d901      	bls.n	1000184e <RCC_PLL1_Config+0x9e>
          {
            return HAL_TIMEOUT;
1000184a:	2303      	movs	r3, #3
1000184c:	e12e      	b.n	10001aac <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
1000184e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001852:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10001856:	f003 0302 	and.w	r3, r3, #2
1000185a:	2b02      	cmp	r3, #2
1000185c:	d0ee      	beq.n	1000183c <RCC_PLL1_Config+0x8c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Do not change pll src if already in use */
        if (__IS_PLL2_IN_USE())
1000185e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10001864:	f003 0307 	and.w	r3, r3, #7
10001868:	2b02      	cmp	r3, #2
1000186a:	d112      	bne.n	10001892 <RCC_PLL1_Config+0xe2>
1000186c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10001872:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10001876:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
1000187a:	d10a      	bne.n	10001892 <RCC_PLL1_Config+0xe2>
        {
          if (pll1->PLLSource != __HAL_RCC_GET_PLL12_SOURCE())
1000187c:	687b      	ldr	r3, [r7, #4]
1000187e:	685a      	ldr	r2, [r3, #4]
10001880:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10001886:	f003 0303 	and.w	r3, r3, #3
1000188a:	429a      	cmp	r2, r3
1000188c:	d00c      	beq.n	100018a8 <RCC_PLL1_Config+0xf8>
          {
            return HAL_ERROR;
1000188e:	2301      	movs	r3, #1
10001890:	e10c      	b.n	10001aac <RCC_PLL1_Config+0x2fc>
          }
        }
        else
        {
          /* Configure PLL1 and PLL2 clock source */
          __HAL_RCC_PLL12_SOURCE(pll1->PLLSource);
10001892:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10001898:	f023 0203 	bic.w	r2, r3, #3
1000189c:	687b      	ldr	r3, [r7, #4]
1000189e:	685b      	ldr	r3, [r3, #4]
100018a0:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100018a4:	4313      	orrs	r3, r2
100018a6:	628b      	str	r3, [r1, #40]	@ 0x28
        }

        /* Wait till PLL SOURCE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL12SRCRDY) == RESET)
100018a8:	e008      	b.n	100018bc <RCC_PLL1_Config+0x10c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100018aa:	f7ff f823 	bl	100008f4 <HAL_GetTick>
100018ae:	4602      	mov	r2, r0
100018b0:	68fb      	ldr	r3, [r7, #12]
100018b2:	1ad3      	subs	r3, r2, r3
100018b4:	2b64      	cmp	r3, #100	@ 0x64
100018b6:	d901      	bls.n	100018bc <RCC_PLL1_Config+0x10c>
          {
            return HAL_TIMEOUT;
100018b8:	2303      	movs	r3, #3
100018ba:	e0f7      	b.n	10001aac <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL12SRCRDY) == RESET)
100018bc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100018c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100018c2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
100018c6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
100018ca:	d1ee      	bne.n	100018aa <RCC_PLL1_Config+0xfa>
          }
        }

        /* Configure the PLL1 multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(
100018cc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100018d0:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
100018d4:	4b77      	ldr	r3, [pc, #476]	@ (10001ab4 <RCC_PLL1_Config+0x304>)
100018d6:	4013      	ands	r3, r2
100018d8:	687a      	ldr	r2, [r7, #4]
100018da:	68d2      	ldr	r2, [r2, #12]
100018dc:	1e51      	subs	r1, r2, #1
100018de:	687a      	ldr	r2, [r7, #4]
100018e0:	6892      	ldr	r2, [r2, #8]
100018e2:	3a01      	subs	r2, #1
100018e4:	0412      	lsls	r2, r2, #16
100018e6:	430a      	orrs	r2, r1
100018e8:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100018ec:	4313      	orrs	r3, r2
100018ee:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
100018f2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100018f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
100018fa:	f023 137f 	bic.w	r3, r3, #8323199	@ 0x7f007f
100018fe:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
10001902:	687a      	ldr	r2, [r7, #4]
10001904:	6912      	ldr	r2, [r2, #16]
10001906:	1e51      	subs	r1, r2, #1
10001908:	687a      	ldr	r2, [r7, #4]
1000190a:	6952      	ldr	r2, [r2, #20]
1000190c:	3a01      	subs	r2, #1
1000190e:	0212      	lsls	r2, r2, #8
10001910:	4311      	orrs	r1, r2
10001912:	687a      	ldr	r2, [r7, #4]
10001914:	6992      	ldr	r2, [r2, #24]
10001916:	3a01      	subs	r2, #1
10001918:	0412      	lsls	r2, r2, #16
1000191a:	430a      	orrs	r2, r1
1000191c:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10001920:	4313      	orrs	r3, r2
10001922:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
          pll1->PLLQ,
          pll1->PLLR);


        /* Configure the Fractional Divider */
        __HAL_RCC_PLL1FRACV_DISABLE(); /*Set FRACLE to '0' */
10001926:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000192a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
1000192e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001932:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
10001936:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll1->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll1->PLLMODE == RCC_PLL_INTEGER))
1000193a:	687b      	ldr	r3, [r7, #4]
1000193c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000193e:	2b02      	cmp	r3, #2
10001940:	d003      	beq.n	1000194a <RCC_PLL1_Config+0x19a>
10001942:	687b      	ldr	r3, [r7, #4]
10001944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10001946:	2b00      	cmp	r3, #0
10001948:	d10c      	bne.n	10001964 <RCC_PLL1_Config+0x1b4>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL1FRACV_CONFIG(0U); /* Set FRACV to '0' */
1000194a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000194e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
10001952:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001956:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
1000195a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
1000195e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
10001962:	e00f      	b.n	10001984 <RCC_PLL1_Config+0x1d4>
        }
        else
        {
          /* Configure PLL  PLL1FRACV  in fractional mode*/
          __HAL_RCC_PLL1FRACV_CONFIG(pll1->PLLFRACV);
10001964:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001968:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
1000196c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
10001970:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
10001974:	687a      	ldr	r2, [r7, #4]
10001976:	6a12      	ldr	r2, [r2, #32]
10001978:	00d2      	lsls	r2, r2, #3
1000197a:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
1000197e:	4313      	orrs	r3, r2
10001980:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
        }
        __HAL_RCC_PLL1FRACV_ENABLE(); /* Set FRACLE to 1 */
10001984:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001988:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
1000198c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001990:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
10001994:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c


        /* Configure the Spread Control */
        if (pll1->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
10001998:	687b      	ldr	r3, [r7, #4]
1000199a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000199c:	2b02      	cmp	r3, #2
1000199e:	d124      	bne.n	100019ea <RCC_PLL1_Config+0x23a>
          assert_param(IS_RCC_SSCG_MODE(pll1->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll1->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll1->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll1->MOD_PER));

          __HAL_RCC_PLL1CSGCONFIG(pll1->MOD_PER, pll1->TPDFN_DIS, pll1->RPDFN_DIS,
100019a0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100019a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
100019a8:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
100019ac:	687b      	ldr	r3, [r7, #4]
100019ae:	6a99      	ldr	r1, [r3, #40]	@ 0x28
100019b0:	687b      	ldr	r3, [r7, #4]
100019b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
100019b4:	4319      	orrs	r1, r3
100019b6:	687b      	ldr	r3, [r7, #4]
100019b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
100019ba:	4319      	orrs	r1, r3
100019bc:	687b      	ldr	r3, [r7, #4]
100019be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
100019c0:	4319      	orrs	r1, r3
100019c2:	687b      	ldr	r3, [r7, #4]
100019c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
100019c6:	041b      	lsls	r3, r3, #16
100019c8:	430b      	orrs	r3, r1
100019ca:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100019ce:	4313      	orrs	r3, r2
100019d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
                                  pll1->SSCG_MODE, pll1->INC_STEP);

          __HAL_RCC_PLL1_SSMODE_ENABLE();
100019d4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100019d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
100019dc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100019e0:	f043 0304 	orr.w	r3, r3, #4
100019e4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
100019e8:	e009      	b.n	100019fe <RCC_PLL1_Config+0x24e>
        }
        else
        {
          __HAL_RCC_PLL1_SSMODE_DISABLE();
100019ea:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100019ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
100019f2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100019f6:	f023 0304 	bic.w	r3, r3, #4
100019fa:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
        }

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
100019fe:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001a02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10001a06:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001a0a:	f043 0301 	orr.w	r3, r3, #1
10001a0e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10001a12:	f7fe ff6f 	bl	100008f4 <HAL_GetTick>
10001a16:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
10001a18:	e008      	b.n	10001a2c <RCC_PLL1_Config+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10001a1a:	f7fe ff6b 	bl	100008f4 <HAL_GetTick>
10001a1e:	4602      	mov	r2, r0
10001a20:	68fb      	ldr	r3, [r7, #12]
10001a22:	1ad3      	subs	r3, r2, r3
10001a24:	2b64      	cmp	r3, #100	@ 0x64
10001a26:	d901      	bls.n	10001a2c <RCC_PLL1_Config+0x27c>
          {
            return HAL_TIMEOUT;
10001a28:	2303      	movs	r3, #3
10001a2a:	e03f      	b.n	10001aac <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
10001a2c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001a30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10001a34:	f003 0302 	and.w	r3, r3, #2
10001a38:	2b02      	cmp	r3, #2
10001a3a:	d1ee      	bne.n	10001a1a <RCC_PLL1_Config+0x26a>
          }
        }
        /* Enable post-dividers */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
10001a3c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001a40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10001a44:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001a48:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
10001a4c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      if ((pll1->PLLState) == RCC_PLL_ON)
10001a50:	e02b      	b.n	10001aaa <RCC_PLL1_Config+0x2fa>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL1CLKOUT_DISABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
10001a52:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001a56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10001a5a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001a5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
10001a62:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
10001a66:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001a6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10001a6e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001a72:	f023 0301 	bic.w	r3, r3, #1
10001a76:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10001a7a:	f7fe ff3b 	bl	100008f4 <HAL_GetTick>
10001a7e:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
10001a80:	e008      	b.n	10001a94 <RCC_PLL1_Config+0x2e4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10001a82:	f7fe ff37 	bl	100008f4 <HAL_GetTick>
10001a86:	4602      	mov	r2, r0
10001a88:	68fb      	ldr	r3, [r7, #12]
10001a8a:	1ad3      	subs	r3, r2, r3
10001a8c:	2b64      	cmp	r3, #100	@ 0x64
10001a8e:	d901      	bls.n	10001a94 <RCC_PLL1_Config+0x2e4>
          {
            return HAL_TIMEOUT;
10001a90:	2303      	movs	r3, #3
10001a92:	e00b      	b.n	10001aac <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
10001a94:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001a98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10001a9c:	f003 0302 	and.w	r3, r3, #2
10001aa0:	2b02      	cmp	r3, #2
10001aa2:	d0ee      	beq.n	10001a82 <RCC_PLL1_Config+0x2d2>
      if ((pll1->PLLState) == RCC_PLL_ON)
10001aa4:	e001      	b.n	10001aaa <RCC_PLL1_Config+0x2fa>
        }
      }
    }
    else
    {
      return HAL_ERROR;
10001aa6:	2301      	movs	r3, #1
10001aa8:	e000      	b.n	10001aac <RCC_PLL1_Config+0x2fc>
    }
  }
  return HAL_OK;
10001aaa:	2300      	movs	r3, #0

}
10001aac:	4618      	mov	r0, r3
10001aae:	3710      	adds	r7, #16
10001ab0:	46bd      	mov	sp, r7
10001ab2:	bd80      	pop	{r7, pc}
10001ab4:	ffc0fe00 	.word	0xffc0fe00

10001ab8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct)
{
10001ab8:	b580      	push	{r7, lr}
10001aba:	b084      	sub	sp, #16
10001abc:	af00      	add	r7, sp, #0
10001abe:	6078      	str	r0, [r7, #4]

  HAL_StatusTypeDef status = HAL_OK;
10001ac0:	2300      	movs	r3, #0
10001ac2:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
10001ac4:	687b      	ldr	r3, [r7, #4]
10001ac6:	2b00      	cmp	r3, #0
10001ac8:	d101      	bne.n	10001ace <HAL_RCC_ClockConfig+0x16>
  {
    return HAL_ERROR;
10001aca:	2301      	movs	r3, #1
10001acc:	e102      	b.n	10001cd4 <HAL_RCC_ClockConfig+0x21c>
  }

  assert_param(IS_RCC_CLOCKTYPETYPE(RCC_ClkInitStruct->ClockType));

  /* Configure MPU block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_MPU) == RCC_CLOCKTYPE_MPU)
10001ace:	687b      	ldr	r3, [r7, #4]
10001ad0:	681b      	ldr	r3, [r3, #0]
10001ad2:	f003 0301 	and.w	r3, r3, #1
10001ad6:	2b00      	cmp	r3, #0
10001ad8:	d00b      	beq.n	10001af2 <HAL_RCC_ClockConfig+0x3a>
  {
    status = RCC_MPUConfig(&(RCC_ClkInitStruct->MPUInit));
10001ada:	687b      	ldr	r3, [r7, #4]
10001adc:	3304      	adds	r3, #4
10001ade:	4618      	mov	r0, r3
10001ae0:	f000 f8fc 	bl	10001cdc <RCC_MPUConfig>
10001ae4:	4603      	mov	r3, r0
10001ae6:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
10001ae8:	7bfb      	ldrb	r3, [r7, #15]
10001aea:	2b00      	cmp	r3, #0
10001aec:	d001      	beq.n	10001af2 <HAL_RCC_ClockConfig+0x3a>
    {
      return status;
10001aee:	7bfb      	ldrb	r3, [r7, #15]
10001af0:	e0f0      	b.n	10001cd4 <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure AXISS block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_ACLK) == RCC_CLOCKTYPE_ACLK)
10001af2:	687b      	ldr	r3, [r7, #4]
10001af4:	681b      	ldr	r3, [r3, #0]
10001af6:	f003 0302 	and.w	r3, r3, #2
10001afa:	2b00      	cmp	r3, #0
10001afc:	d00b      	beq.n	10001b16 <HAL_RCC_ClockConfig+0x5e>
  {
    status = RCC_AXISSConfig(&(RCC_ClkInitStruct->AXISSInit));
10001afe:	687b      	ldr	r3, [r7, #4]
10001b00:	330c      	adds	r3, #12
10001b02:	4618      	mov	r0, r3
10001b04:	f000 f960 	bl	10001dc8 <RCC_AXISSConfig>
10001b08:	4603      	mov	r3, r0
10001b0a:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
10001b0c:	7bfb      	ldrb	r3, [r7, #15]
10001b0e:	2b00      	cmp	r3, #0
10001b10:	d001      	beq.n	10001b16 <HAL_RCC_ClockConfig+0x5e>
    {
      return status;
10001b12:	7bfb      	ldrb	r3, [r7, #15]
10001b14:	e0de      	b.n	10001cd4 <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure MCU block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
10001b16:	687b      	ldr	r3, [r7, #4]
10001b18:	681b      	ldr	r3, [r3, #0]
10001b1a:	f003 0304 	and.w	r3, r3, #4
10001b1e:	2b00      	cmp	r3, #0
10001b20:	d00b      	beq.n	10001b3a <HAL_RCC_ClockConfig+0x82>
  {
    status = RCC_MCUConfig(&(RCC_ClkInitStruct->MCUInit));
10001b22:	687b      	ldr	r3, [r7, #4]
10001b24:	3314      	adds	r3, #20
10001b26:	4618      	mov	r0, r3
10001b28:	f000 f9e6 	bl	10001ef8 <RCC_MCUConfig>
10001b2c:	4603      	mov	r3, r0
10001b2e:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
10001b30:	7bfb      	ldrb	r3, [r7, #15]
10001b32:	2b00      	cmp	r3, #0
10001b34:	d001      	beq.n	10001b3a <HAL_RCC_ClockConfig+0x82>
    {
      return status;
10001b36:	7bfb      	ldrb	r3, [r7, #15]
10001b38:	e0cc      	b.n	10001cd4 <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure APB4 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
10001b3a:	687b      	ldr	r3, [r7, #4]
10001b3c:	681b      	ldr	r3, [r3, #0]
10001b3e:	f003 0308 	and.w	r3, r3, #8
10001b42:	2b00      	cmp	r3, #0
10001b44:	d020      	beq.n	10001b88 <HAL_RCC_ClockConfig+0xd0>
  {
    assert_param(IS_RCC_APB4DIV(RCC_ClkInitStruct->APB4_Div));
    /* Set APB4 division factor */
    __HAL_RCC_APB4_DIV(RCC_ClkInitStruct->APB4_Div);
10001b46:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001b4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10001b4c:	f023 0207 	bic.w	r2, r3, #7
10001b50:	687b      	ldr	r3, [r7, #4]
10001b52:	69db      	ldr	r3, [r3, #28]
10001b54:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10001b58:	4313      	orrs	r3, r2
10001b5a:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10001b5c:	f7fe feca 	bl	100008f4 <HAL_GetTick>
10001b60:	60b8      	str	r0, [r7, #8]

    /* Wait till APB4 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB4DIVRDY) == RESET)
10001b62:	e009      	b.n	10001b78 <HAL_RCC_ClockConfig+0xc0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001b64:	f7fe fec6 	bl	100008f4 <HAL_GetTick>
10001b68:	4602      	mov	r2, r0
10001b6a:	68bb      	ldr	r3, [r7, #8]
10001b6c:	1ad3      	subs	r3, r2, r3
10001b6e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10001b72:	d901      	bls.n	10001b78 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_TIMEOUT;
10001b74:	2303      	movs	r3, #3
10001b76:	e0ad      	b.n	10001cd4 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB4DIVRDY) == RESET)
10001b78:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001b7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10001b7e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10001b82:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10001b86:	d1ed      	bne.n	10001b64 <HAL_RCC_ClockConfig+0xac>
      }
    }
  }

  /* Configure APB5 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
10001b88:	687b      	ldr	r3, [r7, #4]
10001b8a:	681b      	ldr	r3, [r3, #0]
10001b8c:	f003 0310 	and.w	r3, r3, #16
10001b90:	2b00      	cmp	r3, #0
10001b92:	d020      	beq.n	10001bd6 <HAL_RCC_ClockConfig+0x11e>
  {
    assert_param(IS_RCC_APB5DIV(RCC_ClkInitStruct->APB5_Div));
    /* Set APB5 division factor */
    __HAL_RCC_APB5_DIV(RCC_ClkInitStruct->APB5_Div);
10001b94:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
10001b9a:	f023 0207 	bic.w	r2, r3, #7
10001b9e:	687b      	ldr	r3, [r7, #4]
10001ba0:	6a1b      	ldr	r3, [r3, #32]
10001ba2:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10001ba6:	4313      	orrs	r3, r2
10001ba8:	640b      	str	r3, [r1, #64]	@ 0x40

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10001baa:	f7fe fea3 	bl	100008f4 <HAL_GetTick>
10001bae:	60b8      	str	r0, [r7, #8]

    /* Wait till APB5 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB5DIVRDY) == RESET)
10001bb0:	e009      	b.n	10001bc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001bb2:	f7fe fe9f 	bl	100008f4 <HAL_GetTick>
10001bb6:	4602      	mov	r2, r0
10001bb8:	68bb      	ldr	r3, [r7, #8]
10001bba:	1ad3      	subs	r3, r2, r3
10001bbc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10001bc0:	d901      	bls.n	10001bc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
10001bc2:	2303      	movs	r3, #3
10001bc4:	e086      	b.n	10001cd4 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB5DIVRDY) == RESET)
10001bc6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
10001bcc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10001bd0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10001bd4:	d1ed      	bne.n	10001bb2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Configure APB1 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
10001bd6:	687b      	ldr	r3, [r7, #4]
10001bd8:	681b      	ldr	r3, [r3, #0]
10001bda:	f003 0320 	and.w	r3, r3, #32
10001bde:	2b00      	cmp	r3, #0
10001be0:	d023      	beq.n	10001c2a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_APB1DIV(RCC_ClkInitStruct->APB1_Div));
    /* Set APB1 division factor */
    __HAL_RCC_APB1_DIV(RCC_ClkInitStruct->APB1_Div);
10001be2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001be6:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
10001bea:	f023 0207 	bic.w	r2, r3, #7
10001bee:	687b      	ldr	r3, [r7, #4]
10001bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10001bf2:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10001bf6:	4313      	orrs	r3, r2
10001bf8:	f8c1 3834 	str.w	r3, [r1, #2100]	@ 0x834

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10001bfc:	f7fe fe7a 	bl	100008f4 <HAL_GetTick>
10001c00:	60b8      	str	r0, [r7, #8]

    /* Wait till APB1 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB1DIVRDY) == RESET)
10001c02:	e009      	b.n	10001c18 <HAL_RCC_ClockConfig+0x160>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001c04:	f7fe fe76 	bl	100008f4 <HAL_GetTick>
10001c08:	4602      	mov	r2, r0
10001c0a:	68bb      	ldr	r3, [r7, #8]
10001c0c:	1ad3      	subs	r3, r2, r3
10001c0e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10001c12:	d901      	bls.n	10001c18 <HAL_RCC_ClockConfig+0x160>
      {
        return HAL_TIMEOUT;
10001c14:	2303      	movs	r3, #3
10001c16:	e05d      	b.n	10001cd4 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB1DIVRDY) == RESET)
10001c18:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001c1c:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
10001c20:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10001c24:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10001c28:	d1ec      	bne.n	10001c04 <HAL_RCC_ClockConfig+0x14c>
      }
    }
  }

  /* Configure APB2 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
10001c2a:	687b      	ldr	r3, [r7, #4]
10001c2c:	681b      	ldr	r3, [r3, #0]
10001c2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
10001c32:	2b00      	cmp	r3, #0
10001c34:	d023      	beq.n	10001c7e <HAL_RCC_ClockConfig+0x1c6>
  {
    assert_param(IS_RCC_APB2DIV(RCC_ClkInitStruct->APB2_Div));
    /* Set APB2 division factor */
    __HAL_RCC_APB2_DIV(RCC_ClkInitStruct->APB2_Div);
10001c36:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001c3a:	f8d3 3838 	ldr.w	r3, [r3, #2104]	@ 0x838
10001c3e:	f023 0207 	bic.w	r2, r3, #7
10001c42:	687b      	ldr	r3, [r7, #4]
10001c44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10001c46:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10001c4a:	4313      	orrs	r3, r2
10001c4c:	f8c1 3838 	str.w	r3, [r1, #2104]	@ 0x838

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10001c50:	f7fe fe50 	bl	100008f4 <HAL_GetTick>
10001c54:	60b8      	str	r0, [r7, #8]

    /* Wait till APB2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB2DIVRDY) == RESET)
10001c56:	e009      	b.n	10001c6c <HAL_RCC_ClockConfig+0x1b4>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001c58:	f7fe fe4c 	bl	100008f4 <HAL_GetTick>
10001c5c:	4602      	mov	r2, r0
10001c5e:	68bb      	ldr	r3, [r7, #8]
10001c60:	1ad3      	subs	r3, r2, r3
10001c62:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10001c66:	d901      	bls.n	10001c6c <HAL_RCC_ClockConfig+0x1b4>
      {
        return HAL_TIMEOUT;
10001c68:	2303      	movs	r3, #3
10001c6a:	e033      	b.n	10001cd4 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB2DIVRDY) == RESET)
10001c6c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001c70:	f8d3 3838 	ldr.w	r3, [r3, #2104]	@ 0x838
10001c74:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10001c78:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10001c7c:	d1ec      	bne.n	10001c58 <HAL_RCC_ClockConfig+0x1a0>
      }
    }
  }

  /* Configure APB3 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
10001c7e:	687b      	ldr	r3, [r7, #4]
10001c80:	681b      	ldr	r3, [r3, #0]
10001c82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
10001c86:	2b00      	cmp	r3, #0
10001c88:	d023      	beq.n	10001cd2 <HAL_RCC_ClockConfig+0x21a>
  {
    assert_param(IS_RCC_APB3DIV(RCC_ClkInitStruct->APB3_Div));
    /* Set APB3 division factor */
    __HAL_RCC_APB3_DIV(RCC_ClkInitStruct->APB3_Div);
10001c8a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001c8e:	f8d3 383c 	ldr.w	r3, [r3, #2108]	@ 0x83c
10001c92:	f023 0207 	bic.w	r2, r3, #7
10001c96:	687b      	ldr	r3, [r7, #4]
10001c98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10001c9a:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10001c9e:	4313      	orrs	r3, r2
10001ca0:	f8c1 383c 	str.w	r3, [r1, #2108]	@ 0x83c

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10001ca4:	f7fe fe26 	bl	100008f4 <HAL_GetTick>
10001ca8:	60b8      	str	r0, [r7, #8]

    /* Wait till APB3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB3DIVRDY) == RESET)
10001caa:	e009      	b.n	10001cc0 <HAL_RCC_ClockConfig+0x208>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001cac:	f7fe fe22 	bl	100008f4 <HAL_GetTick>
10001cb0:	4602      	mov	r2, r0
10001cb2:	68bb      	ldr	r3, [r7, #8]
10001cb4:	1ad3      	subs	r3, r2, r3
10001cb6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10001cba:	d901      	bls.n	10001cc0 <HAL_RCC_ClockConfig+0x208>
      {
        return HAL_TIMEOUT;
10001cbc:	2303      	movs	r3, #3
10001cbe:	e009      	b.n	10001cd4 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB3DIVRDY) == RESET)
10001cc0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001cc4:	f8d3 383c 	ldr.w	r3, [r3, #2108]	@ 0x83c
10001cc8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10001ccc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10001cd0:	d1ec      	bne.n	10001cac <HAL_RCC_ClockConfig+0x1f4>
      }
    }
  }

  return HAL_OK;
10001cd2:	2300      	movs	r3, #0
}
10001cd4:	4618      	mov	r0, r3
10001cd6:	3710      	adds	r7, #16
10001cd8:	46bd      	mov	sp, r7
10001cda:	bd80      	pop	{r7, pc}

10001cdc <RCC_MPUConfig>:

HAL_StatusTypeDef RCC_MPUConfig(RCC_MPUInitTypeDef *RCC_MPUInitStruct)
{
10001cdc:	b580      	push	{r7, lr}
10001cde:	b084      	sub	sp, #16
10001ce0:	af00      	add	r7, sp, #0
10001ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  assert_param(IS_RCC_MPUSOURCE(RCC_MPUInitStruct->MPU_Clock));

  /* Ensure clock source is ready*/
  switch (RCC_MPUInitStruct->MPU_Clock)
10001ce4:	687b      	ldr	r3, [r7, #4]
10001ce6:	681b      	ldr	r3, [r3, #0]
10001ce8:	2b03      	cmp	r3, #3
10001cea:	d840      	bhi.n	10001d6e <RCC_MPUConfig+0x92>
10001cec:	a201      	add	r2, pc, #4	@ (adr r2, 10001cf4 <RCC_MPUConfig+0x18>)
10001cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10001cf2:	bf00      	nop
10001cf4:	10001d05 	.word	0x10001d05
10001cf8:	10001d19 	.word	0x10001d19
10001cfc:	10001d2f 	.word	0x10001d2f
10001d00:	10001d43 	.word	0x10001d43
  {
    case (RCC_MPUSOURCE_HSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10001d04:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001d08:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10001d0c:	f003 0301 	and.w	r3, r3, #1
10001d10:	2b01      	cmp	r3, #1
10001d12:	d02e      	beq.n	10001d72 <RCC_MPUConfig+0x96>
      {
        return HAL_ERROR;
10001d14:	2301      	movs	r3, #1
10001d16:	e053      	b.n	10001dc0 <RCC_MPUConfig+0xe4>
    }

    case (RCC_MPUSOURCE_HSE):
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
10001d18:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001d1c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10001d20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
10001d24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
10001d28:	d025      	beq.n	10001d76 <RCC_MPUConfig+0x9a>
      {
        return HAL_ERROR;
10001d2a:	2301      	movs	r3, #1
10001d2c:	e048      	b.n	10001dc0 <RCC_MPUConfig+0xe4>
    }

    case (RCC_MPUSOURCE_PLL1):
    {
      /* Check the PLL1 ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
10001d2e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001d32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10001d36:	f003 0302 	and.w	r3, r3, #2
10001d3a:	2b02      	cmp	r3, #2
10001d3c:	d01d      	beq.n	10001d7a <RCC_MPUConfig+0x9e>
      {
        return HAL_ERROR;
10001d3e:	2301      	movs	r3, #1
10001d40:	e03e      	b.n	10001dc0 <RCC_MPUConfig+0xe4>
    case (RCC_MPUSOURCE_MPUDIV):
    {
      assert_param(IS_RCC_MPUDIV(RCC_MPUInitStruct->MPU_Div));

      /* Check the PLL1 ready flag (as PLL1_P is the MPUDIV source */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
10001d42:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001d46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10001d4a:	f003 0302 	and.w	r3, r3, #2
10001d4e:	2b02      	cmp	r3, #2
10001d50:	d001      	beq.n	10001d56 <RCC_MPUConfig+0x7a>
      {
        return HAL_ERROR;
10001d52:	2301      	movs	r3, #1
10001d54:	e034      	b.n	10001dc0 <RCC_MPUConfig+0xe4>
      }

      /* Set MPU division factor */
      __HAL_RCC_MPU_DIV(RCC_MPUInitStruct->MPU_Div);
10001d56:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10001d5c:	f023 0207 	bic.w	r2, r3, #7
10001d60:	687b      	ldr	r3, [r7, #4]
10001d62:	685b      	ldr	r3, [r3, #4]
10001d64:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10001d68:	4313      	orrs	r3, r2
10001d6a:	62cb      	str	r3, [r1, #44]	@ 0x2c

      break;
10001d6c:	e006      	b.n	10001d7c <RCC_MPUConfig+0xa0>
    }

    default:
      /* This case is impossible */
      return HAL_ERROR;
10001d6e:	2301      	movs	r3, #1
10001d70:	e026      	b.n	10001dc0 <RCC_MPUConfig+0xe4>
      break;
10001d72:	bf00      	nop
10001d74:	e002      	b.n	10001d7c <RCC_MPUConfig+0xa0>
      break;
10001d76:	bf00      	nop
10001d78:	e000      	b.n	10001d7c <RCC_MPUConfig+0xa0>
      break;
10001d7a:	bf00      	nop
      break;
  }

  /* Set MPU clock source */
  __HAL_RCC_MPU_SOURCE(RCC_MPUInitStruct->MPU_Clock);
10001d7c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001d80:	6a1b      	ldr	r3, [r3, #32]
10001d82:	f023 0203 	bic.w	r2, r3, #3
10001d86:	687b      	ldr	r3, [r7, #4]
10001d88:	681b      	ldr	r3, [r3, #0]
10001d8a:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10001d8e:	4313      	orrs	r3, r2
10001d90:	620b      	str	r3, [r1, #32]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10001d92:	f7fe fdaf 	bl	100008f4 <HAL_GetTick>
10001d96:	60f8      	str	r0, [r7, #12]

  /* Wait till MPU is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MPUSRCRDY) == RESET)
10001d98:	e009      	b.n	10001dae <RCC_MPUConfig+0xd2>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001d9a:	f7fe fdab 	bl	100008f4 <HAL_GetTick>
10001d9e:	4602      	mov	r2, r0
10001da0:	68fb      	ldr	r3, [r7, #12]
10001da2:	1ad3      	subs	r3, r2, r3
10001da4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10001da8:	d901      	bls.n	10001dae <RCC_MPUConfig+0xd2>
    {
      return HAL_TIMEOUT;
10001daa:	2303      	movs	r3, #3
10001dac:	e008      	b.n	10001dc0 <RCC_MPUConfig+0xe4>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MPUSRCRDY) == RESET)
10001dae:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001db2:	6a1b      	ldr	r3, [r3, #32]
10001db4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10001db8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10001dbc:	d1ed      	bne.n	10001d9a <RCC_MPUConfig+0xbe>

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
#endif

  return HAL_OK;
10001dbe:	2300      	movs	r3, #0
}
10001dc0:	4618      	mov	r0, r3
10001dc2:	3710      	adds	r7, #16
10001dc4:	46bd      	mov	sp, r7
10001dc6:	bd80      	pop	{r7, pc}

10001dc8 <RCC_AXISSConfig>:


HAL_StatusTypeDef RCC_AXISSConfig(RCC_AXISSInitTypeDef *RCC_AXISSInitStruct)
{
10001dc8:	b580      	push	{r7, lr}
10001dca:	b084      	sub	sp, #16
10001dcc:	af00      	add	r7, sp, #0
10001dce:	6078      	str	r0, [r7, #4]

  assert_param(IS_RCC_AXISSOURCE(RCC_AXISSInitStruct->AXI_Clock));
  assert_param(IS_RCC_AXIDIV(RCC_AXISSInitStruct->AXI_Div));

  /* Ensure clock source is ready*/
  switch (RCC_AXISSInitStruct->AXI_Clock)
10001dd0:	687b      	ldr	r3, [r7, #4]
10001dd2:	681b      	ldr	r3, [r3, #0]
10001dd4:	2b02      	cmp	r3, #2
10001dd6:	d01b      	beq.n	10001e10 <RCC_AXISSConfig+0x48>
10001dd8:	2b02      	cmp	r3, #2
10001dda:	d823      	bhi.n	10001e24 <RCC_AXISSConfig+0x5c>
10001ddc:	2b00      	cmp	r3, #0
10001dde:	d002      	beq.n	10001de6 <RCC_AXISSConfig+0x1e>
10001de0:	2b01      	cmp	r3, #1
10001de2:	d00a      	beq.n	10001dfa <RCC_AXISSConfig+0x32>
      }
      break;
    }

    default:
      break;
10001de4:	e01e      	b.n	10001e24 <RCC_AXISSConfig+0x5c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10001de6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001dea:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10001dee:	f003 0301 	and.w	r3, r3, #1
10001df2:	2b01      	cmp	r3, #1
10001df4:	d018      	beq.n	10001e28 <RCC_AXISSConfig+0x60>
        return HAL_ERROR;
10001df6:	2301      	movs	r3, #1
10001df8:	e079      	b.n	10001eee <RCC_AXISSConfig+0x126>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
10001dfa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001dfe:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10001e02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
10001e06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
10001e0a:	d00f      	beq.n	10001e2c <RCC_AXISSConfig+0x64>
        return HAL_ERROR;
10001e0c:	2301      	movs	r3, #1
10001e0e:	e06e      	b.n	10001eee <RCC_AXISSConfig+0x126>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
10001e10:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001e14:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10001e18:	f003 0302 	and.w	r3, r3, #2
10001e1c:	2b02      	cmp	r3, #2
10001e1e:	d007      	beq.n	10001e30 <RCC_AXISSConfig+0x68>
        return HAL_ERROR;
10001e20:	2301      	movs	r3, #1
10001e22:	e064      	b.n	10001eee <RCC_AXISSConfig+0x126>
      break;
10001e24:	bf00      	nop
10001e26:	e004      	b.n	10001e32 <RCC_AXISSConfig+0x6a>
      break;
10001e28:	bf00      	nop
10001e2a:	e002      	b.n	10001e32 <RCC_AXISSConfig+0x6a>
      break;
10001e2c:	bf00      	nop
10001e2e:	e000      	b.n	10001e32 <RCC_AXISSConfig+0x6a>
      break;
10001e30:	bf00      	nop

  }

  /* Set AXISS clock source */
  __HAL_RCC_AXISS_SOURCE(RCC_AXISSInitStruct->AXI_Clock);
10001e32:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10001e38:	f023 0207 	bic.w	r2, r3, #7
10001e3c:	687b      	ldr	r3, [r7, #4]
10001e3e:	681b      	ldr	r3, [r3, #0]
10001e40:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10001e44:	4313      	orrs	r3, r2
10001e46:	624b      	str	r3, [r1, #36]	@ 0x24

  if (RCC_AXISSInitStruct->AXI_Clock != RCC_AXISSOURCE_OFF)
10001e48:	687b      	ldr	r3, [r7, #4]
10001e4a:	681b      	ldr	r3, [r3, #0]
10001e4c:	2b03      	cmp	r3, #3
10001e4e:	d016      	beq.n	10001e7e <RCC_AXISSConfig+0xb6>
  {
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10001e50:	f7fe fd50 	bl	100008f4 <HAL_GetTick>
10001e54:	60f8      	str	r0, [r7, #12]

    /* Wait till AXISS is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) == RESET)
10001e56:	e009      	b.n	10001e6c <RCC_AXISSConfig+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001e58:	f7fe fd4c 	bl	100008f4 <HAL_GetTick>
10001e5c:	4602      	mov	r2, r0
10001e5e:	68fb      	ldr	r3, [r7, #12]
10001e60:	1ad3      	subs	r3, r2, r3
10001e62:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10001e66:	d901      	bls.n	10001e6c <RCC_AXISSConfig+0xa4>
      {
        return HAL_TIMEOUT;
10001e68:	2303      	movs	r3, #3
10001e6a:	e040      	b.n	10001eee <RCC_AXISSConfig+0x126>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) == RESET)
10001e6c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10001e72:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10001e76:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10001e7a:	d1ed      	bne.n	10001e58 <RCC_AXISSConfig+0x90>
10001e7c:	e015      	b.n	10001eaa <RCC_AXISSConfig+0xe2>
  }
  else
  {
    // RCC_AXISSOURCE_OFF case
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10001e7e:	f7fe fd39 	bl	100008f4 <HAL_GetTick>
10001e82:	60f8      	str	r0, [r7, #12]

    /* Wait till AXISS is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) != RESET)
10001e84:	e009      	b.n	10001e9a <RCC_AXISSConfig+0xd2>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001e86:	f7fe fd35 	bl	100008f4 <HAL_GetTick>
10001e8a:	4602      	mov	r2, r0
10001e8c:	68fb      	ldr	r3, [r7, #12]
10001e8e:	1ad3      	subs	r3, r2, r3
10001e90:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10001e94:	d901      	bls.n	10001e9a <RCC_AXISSConfig+0xd2>
      {
        return HAL_TIMEOUT;
10001e96:	2303      	movs	r3, #3
10001e98:	e029      	b.n	10001eee <RCC_AXISSConfig+0x126>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) != RESET)
10001e9a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10001ea0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10001ea4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10001ea8:	d0ed      	beq.n	10001e86 <RCC_AXISSConfig+0xbe>
      }
    }
  }

  /* Set AXISS division factor */
  __HAL_RCC_AXI_DIV(RCC_AXISSInitStruct->AXI_Div);
10001eaa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001eae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10001eb0:	f023 0207 	bic.w	r2, r3, #7
10001eb4:	687b      	ldr	r3, [r7, #4]
10001eb6:	685b      	ldr	r3, [r3, #4]
10001eb8:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10001ebc:	4313      	orrs	r3, r2
10001ebe:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10001ec0:	f7fe fd18 	bl	100008f4 <HAL_GetTick>
10001ec4:	60f8      	str	r0, [r7, #12]

  /* Wait till AXISS is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXIDIVRDY) == RESET)
10001ec6:	e009      	b.n	10001edc <RCC_AXISSConfig+0x114>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001ec8:	f7fe fd14 	bl	100008f4 <HAL_GetTick>
10001ecc:	4602      	mov	r2, r0
10001ece:	68fb      	ldr	r3, [r7, #12]
10001ed0:	1ad3      	subs	r3, r2, r3
10001ed2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10001ed6:	d901      	bls.n	10001edc <RCC_AXISSConfig+0x114>
    {
      return HAL_TIMEOUT;
10001ed8:	2303      	movs	r3, #3
10001eda:	e008      	b.n	10001eee <RCC_AXISSConfig+0x126>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXIDIVRDY) == RESET)
10001edc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10001ee2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10001ee6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10001eea:	d1ed      	bne.n	10001ec8 <RCC_AXISSConfig+0x100>
    }
  }

  return HAL_OK;
10001eec:	2300      	movs	r3, #0
}
10001eee:	4618      	mov	r0, r3
10001ef0:	3710      	adds	r7, #16
10001ef2:	46bd      	mov	sp, r7
10001ef4:	bd80      	pop	{r7, pc}
	...

10001ef8 <RCC_MCUConfig>:


HAL_StatusTypeDef RCC_MCUConfig(RCC_MCUInitTypeDef *MCUInitStruct)
{
10001ef8:	b580      	push	{r7, lr}
10001efa:	b084      	sub	sp, #16
10001efc:	af00      	add	r7, sp, #0
10001efe:	6078      	str	r0, [r7, #4]

  assert_param(IS_RCC_MCUSSOURCE(MCUInitStruct->MCU_Clock));
  assert_param(IS_RCC_MCUDIV(MCUInitStruct->MCU_Div));

  /* Ensure clock source is ready*/
  switch (MCUInitStruct->MCU_Clock)
10001f00:	687b      	ldr	r3, [r7, #4]
10001f02:	681b      	ldr	r3, [r3, #0]
10001f04:	2b03      	cmp	r3, #3
10001f06:	d834      	bhi.n	10001f72 <RCC_MCUConfig+0x7a>
10001f08:	a201      	add	r2, pc, #4	@ (adr r2, 10001f10 <RCC_MCUConfig+0x18>)
10001f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10001f0e:	bf00      	nop
10001f10:	10001f21 	.word	0x10001f21
10001f14:	10001f35 	.word	0x10001f35
10001f18:	10001f4b 	.word	0x10001f4b
10001f1c:	10001f5f 	.word	0x10001f5f
  {
    case (RCC_MCUSSOURCE_HSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10001f20:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001f24:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10001f28:	f003 0301 	and.w	r3, r3, #1
10001f2c:	2b01      	cmp	r3, #1
10001f2e:	d022      	beq.n	10001f76 <RCC_MCUConfig+0x7e>
      {
        return HAL_ERROR;
10001f30:	2301      	movs	r3, #1
10001f32:	e081      	b.n	10002038 <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_HSE):
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
10001f34:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001f38:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10001f3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
10001f40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
10001f44:	d019      	beq.n	10001f7a <RCC_MCUConfig+0x82>
      {
        return HAL_ERROR;
10001f46:	2301      	movs	r3, #1
10001f48:	e076      	b.n	10002038 <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_CSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
10001f4a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001f4e:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10001f52:	f003 0310 	and.w	r3, r3, #16
10001f56:	2b10      	cmp	r3, #16
10001f58:	d011      	beq.n	10001f7e <RCC_MCUConfig+0x86>
      {
        return HAL_ERROR;
10001f5a:	2301      	movs	r3, #1
10001f5c:	e06c      	b.n	10002038 <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_PLL3):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
10001f5e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001f62:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10001f66:	f003 0302 	and.w	r3, r3, #2
10001f6a:	2b02      	cmp	r3, #2
10001f6c:	d009      	beq.n	10001f82 <RCC_MCUConfig+0x8a>
      {
        return HAL_ERROR;
10001f6e:	2301      	movs	r3, #1
10001f70:	e062      	b.n	10002038 <RCC_MCUConfig+0x140>
      }
      break;
    }

    default:
      break;
10001f72:	bf00      	nop
10001f74:	e006      	b.n	10001f84 <RCC_MCUConfig+0x8c>
      break;
10001f76:	bf00      	nop
10001f78:	e004      	b.n	10001f84 <RCC_MCUConfig+0x8c>
      break;
10001f7a:	bf00      	nop
10001f7c:	e002      	b.n	10001f84 <RCC_MCUConfig+0x8c>
      break;
10001f7e:	bf00      	nop
10001f80:	e000      	b.n	10001f84 <RCC_MCUConfig+0x8c>
      break;
10001f82:	bf00      	nop

  }

  /* Set MCU clock source */
  __HAL_RCC_MCU_SOURCE(MCUInitStruct->MCU_Clock);
10001f84:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001f88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10001f8a:	f023 0203 	bic.w	r2, r3, #3
10001f8e:	687b      	ldr	r3, [r7, #4]
10001f90:	681b      	ldr	r3, [r3, #0]
10001f92:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10001f96:	4313      	orrs	r3, r2
10001f98:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10001f9a:	f7fe fcab 	bl	100008f4 <HAL_GetTick>
10001f9e:	60f8      	str	r0, [r7, #12]

  /* Wait till MCU is ready */

  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUSSRCRDY) == RESET)
10001fa0:	e009      	b.n	10001fb6 <RCC_MCUConfig+0xbe>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001fa2:	f7fe fca7 	bl	100008f4 <HAL_GetTick>
10001fa6:	4602      	mov	r2, r0
10001fa8:	68fb      	ldr	r3, [r7, #12]
10001faa:	1ad3      	subs	r3, r2, r3
10001fac:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10001fb0:	d901      	bls.n	10001fb6 <RCC_MCUConfig+0xbe>
    {
      return HAL_TIMEOUT;
10001fb2:	2303      	movs	r3, #3
10001fb4:	e040      	b.n	10002038 <RCC_MCUConfig+0x140>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUSSRCRDY) == RESET)
10001fb6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001fba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10001fbc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10001fc0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10001fc4:	d1ed      	bne.n	10001fa2 <RCC_MCUConfig+0xaa>
    }
  }

#ifdef CORE_CM4
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
10001fc6:	f000 f954 	bl	10002272 <HAL_RCC_GetSystemCoreClockFreq>
10001fca:	4603      	mov	r3, r0
10001fcc:	4a1c      	ldr	r2, [pc, #112]	@ (10002040 <RCC_MCUConfig+0x148>)
10001fce:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
10001fd0:	4b1c      	ldr	r3, [pc, #112]	@ (10002044 <RCC_MCUConfig+0x14c>)
10001fd2:	681b      	ldr	r3, [r3, #0]
10001fd4:	4618      	mov	r0, r3
10001fd6:	f7fe fc43 	bl	10000860 <HAL_InitTick>
#endif

  /* Set MCU division factor */
  __HAL_RCC_MCU_DIV(MCUInitStruct->MCU_Div);
10001fda:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001fde:	f8d3 3830 	ldr.w	r3, [r3, #2096]	@ 0x830
10001fe2:	f023 020f 	bic.w	r2, r3, #15
10001fe6:	687b      	ldr	r3, [r7, #4]
10001fe8:	685b      	ldr	r3, [r3, #4]
10001fea:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10001fee:	4313      	orrs	r3, r2
10001ff0:	f8c1 3830 	str.w	r3, [r1, #2096]	@ 0x830

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10001ff4:	f7fe fc7e 	bl	100008f4 <HAL_GetTick>
10001ff8:	60f8      	str	r0, [r7, #12]

  /* Wait till MCU is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUDIVRDY) == RESET)
10001ffa:	e009      	b.n	10002010 <RCC_MCUConfig+0x118>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001ffc:	f7fe fc7a 	bl	100008f4 <HAL_GetTick>
10002000:	4602      	mov	r2, r0
10002002:	68fb      	ldr	r3, [r7, #12]
10002004:	1ad3      	subs	r3, r2, r3
10002006:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
1000200a:	d901      	bls.n	10002010 <RCC_MCUConfig+0x118>
    {
      return HAL_TIMEOUT;
1000200c:	2303      	movs	r3, #3
1000200e:	e013      	b.n	10002038 <RCC_MCUConfig+0x140>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUDIVRDY) == RESET)
10002010:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002014:	f8d3 3830 	ldr.w	r3, [r3, #2096]	@ 0x830
10002018:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
1000201c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10002020:	d1ec      	bne.n	10001ffc <RCC_MCUConfig+0x104>
    }
  }
#ifdef CORE_CM4
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
10002022:	f000 f926 	bl	10002272 <HAL_RCC_GetSystemCoreClockFreq>
10002026:	4603      	mov	r3, r0
10002028:	4a05      	ldr	r2, [pc, #20]	@ (10002040 <RCC_MCUConfig+0x148>)
1000202a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
1000202c:	4b05      	ldr	r3, [pc, #20]	@ (10002044 <RCC_MCUConfig+0x14c>)
1000202e:	681b      	ldr	r3, [r3, #0]
10002030:	4618      	mov	r0, r3
10002032:	f7fe fc15 	bl	10000860 <HAL_InitTick>
#endif

  return HAL_OK;
10002036:	2300      	movs	r3, #0
}
10002038:	4618      	mov	r0, r3
1000203a:	3710      	adds	r7, #16
1000203c:	46bd      	mov	sp, r7
1000203e:	bd80      	pop	{r7, pc}
10002040:	10020000 	.word	0x10020000
10002044:	10020004 	.word	0x10020004

10002048 <HAL_RCC_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
__weak void HAL_RCC_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
10002048:	b480      	push	{r7}
1000204a:	b089      	sub	sp, #36	@ 0x24
1000204c:	af00      	add	r7, sp, #0
1000204e:	6078      	str	r0, [r7, #4]
  uint32_t   pllsource = 0, pll3m = 1, pll3fracen = 0, hsivalue = 0;
10002050:	2300      	movs	r3, #0
10002052:	61bb      	str	r3, [r7, #24]
10002054:	2301      	movs	r3, #1
10002056:	617b      	str	r3, [r7, #20]
10002058:	2300      	movs	r3, #0
1000205a:	613b      	str	r3, [r7, #16]
1000205c:	2300      	movs	r3, #0
1000205e:	60fb      	str	r3, [r7, #12]
  float fracn1, pll3vco = 0;
10002060:	f04f 0300 	mov.w	r3, #0
10002064:	61fb      	str	r3, [r7, #28]

  pllsource = __HAL_RCC_GET_PLL3_SOURCE();
10002066:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000206a:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
1000206e:	f003 0303 	and.w	r3, r3, #3
10002072:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLL3CFGR1 & RCC_PLL3CFGR1_DIVM3) >> RCC_PLL3CFGR1_DIVM3_Pos) + 1U;
10002074:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002078:	f8d3 3884 	ldr.w	r3, [r3, #2180]	@ 0x884
1000207c:	0c1b      	lsrs	r3, r3, #16
1000207e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
10002082:	3301      	adds	r3, #1
10002084:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLL3FRACR & RCC_PLL3FRACR_FRACLE) >> RCC_PLL3FRACR_FRACLE_Pos;
10002086:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000208a:	f8d3 388c 	ldr.w	r3, [r3, #2188]	@ 0x88c
1000208e:	0c1b      	lsrs	r3, r3, #16
10002090:	f003 0301 	and.w	r3, r3, #1
10002094:	613b      	str	r3, [r7, #16]
  fracn1 = (float)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACV) >> RCC_PLL3FRACR_FRACV_Pos));
10002096:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000209a:	f8d3 388c 	ldr.w	r3, [r3, #2188]	@ 0x88c
1000209e:	08db      	lsrs	r3, r3, #3
100020a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
100020a4:	693a      	ldr	r2, [r7, #16]
100020a6:	fb02 f303 	mul.w	r3, r2, r3
100020aa:	ee07 3a90 	vmov	s15, r3
100020ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
100020b2:	edc7 7a02 	vstr	s15, [r7, #8]
  pll3vco = (float)((float)((RCC->PLL3CFGR1 & RCC_PLL3CFGR1_DIVN) + 1U) + (fracn1 / (float) 0x2000));  //Intermediary value
100020b6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100020ba:	f8d3 3884 	ldr.w	r3, [r3, #2180]	@ 0x884
100020be:	f3c3 0308 	ubfx	r3, r3, #0, #9
100020c2:	3301      	adds	r3, #1
100020c4:	ee07 3a90 	vmov	s15, r3
100020c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
100020cc:	edd7 6a02 	vldr	s13, [r7, #8]
100020d0:	ed9f 6a56 	vldr	s12, [pc, #344]	@ 1000222c <HAL_RCC_GetPLL3ClockFreq+0x1e4>
100020d4:	eec6 7a86 	vdiv.f32	s15, s13, s12
100020d8:	ee77 7a27 	vadd.f32	s15, s14, s15
100020dc:	edc7 7a07 	vstr	s15, [r7, #28]
  switch (pllsource)
100020e0:	69bb      	ldr	r3, [r7, #24]
100020e2:	2b03      	cmp	r3, #3
100020e4:	d85b      	bhi.n	1000219e <HAL_RCC_GetPLL3ClockFreq+0x156>
100020e6:	a201      	add	r2, pc, #4	@ (adr r2, 100020ec <HAL_RCC_GetPLL3ClockFreq+0xa4>)
100020e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100020ec:	100020fd 	.word	0x100020fd
100020f0:	1000215b 	.word	0x1000215b
100020f4:	10002179 	.word	0x10002179
100020f8:	10002197 	.word	0x10002197
  {
    case RCC_PLL3SOURCE_HSI:  /* HSI used as PLL clock source */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) != 0U)
100020fc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002100:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10002104:	f003 0304 	and.w	r3, r3, #4
10002108:	2b04      	cmp	r3, #4
1000210a:	d117      	bne.n	1000213c <HAL_RCC_GetPLL3ClockFreq+0xf4>
      {
        hsivalue = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
1000210c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002110:	699b      	ldr	r3, [r3, #24]
10002112:	f003 0303 	and.w	r3, r3, #3
10002116:	4a46      	ldr	r2, [pc, #280]	@ (10002230 <HAL_RCC_GetPLL3ClockFreq+0x1e8>)
10002118:	fa22 f303 	lsr.w	r3, r2, r3
1000211c:	60fb      	str	r3, [r7, #12]
        pll3vco *= (float)(hsivalue / pll3m);
1000211e:	68fa      	ldr	r2, [r7, #12]
10002120:	697b      	ldr	r3, [r7, #20]
10002122:	fbb2 f3f3 	udiv	r3, r2, r3
10002126:	ee07 3a90 	vmov	s15, r3
1000212a:	eef8 7a67 	vcvt.f32.u32	s15, s15
1000212e:	ed97 7a07 	vldr	s14, [r7, #28]
10002132:	ee67 7a27 	vmul.f32	s15, s14, s15
10002136:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco *= (float)(HSI_VALUE / pll3m);
      }
      break;
1000213a:	e030      	b.n	1000219e <HAL_RCC_GetPLL3ClockFreq+0x156>
        pll3vco *= (float)(HSI_VALUE / pll3m);
1000213c:	4a3c      	ldr	r2, [pc, #240]	@ (10002230 <HAL_RCC_GetPLL3ClockFreq+0x1e8>)
1000213e:	697b      	ldr	r3, [r7, #20]
10002140:	fbb2 f3f3 	udiv	r3, r2, r3
10002144:	ee07 3a90 	vmov	s15, r3
10002148:	eef8 7a67 	vcvt.f32.u32	s15, s15
1000214c:	ed97 7a07 	vldr	s14, [r7, #28]
10002150:	ee67 7a27 	vmul.f32	s15, s14, s15
10002154:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10002158:	e021      	b.n	1000219e <HAL_RCC_GetPLL3ClockFreq+0x156>

    case RCC_PLL3SOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco *= (float)(HSE_VALUE / pll3m);
1000215a:	4a36      	ldr	r2, [pc, #216]	@ (10002234 <HAL_RCC_GetPLL3ClockFreq+0x1ec>)
1000215c:	697b      	ldr	r3, [r7, #20]
1000215e:	fbb2 f3f3 	udiv	r3, r2, r3
10002162:	ee07 3a90 	vmov	s15, r3
10002166:	eef8 7a67 	vcvt.f32.u32	s15, s15
1000216a:	ed97 7a07 	vldr	s14, [r7, #28]
1000216e:	ee67 7a27 	vmul.f32	s15, s14, s15
10002172:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10002176:	e012      	b.n	1000219e <HAL_RCC_GetPLL3ClockFreq+0x156>



    case RCC_PLL3SOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco *= (float)(CSI_VALUE / pll3m);
10002178:	4a2f      	ldr	r2, [pc, #188]	@ (10002238 <HAL_RCC_GetPLL3ClockFreq+0x1f0>)
1000217a:	697b      	ldr	r3, [r7, #20]
1000217c:	fbb2 f3f3 	udiv	r3, r2, r3
10002180:	ee07 3a90 	vmov	s15, r3
10002184:	eef8 7a67 	vcvt.f32.u32	s15, s15
10002188:	ed97 7a07 	vldr	s14, [r7, #28]
1000218c:	ee67 7a27 	vmul.f32	s15, s14, s15
10002190:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10002194:	e003      	b.n	1000219e <HAL_RCC_GetPLL3ClockFreq+0x156>

    case RCC_PLL3SOURCE_OFF:  /* No clock source for PLL */
      pll3vco = 0;
10002196:	f04f 0300 	mov.w	r3, #0
1000219a:	61fb      	str	r3, [r7, #28]
      break;
1000219c:	bf00      	nop
  }

  PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVP) >> RCC_PLL3CFGR2_DIVP_Pos) + 1U)));
1000219e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100021a2:	f8d3 3888 	ldr.w	r3, [r3, #2184]	@ 0x888
100021a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
100021aa:	3301      	adds	r3, #1
100021ac:	ee07 3a90 	vmov	s15, r3
100021b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
100021b4:	edd7 6a07 	vldr	s13, [r7, #28]
100021b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
100021bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
100021c0:	ee17 2a90 	vmov	r2, s15
100021c4:	687b      	ldr	r3, [r7, #4]
100021c6:	601a      	str	r2, [r3, #0]
  PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVQ) >> RCC_PLL3CFGR2_DIVQ_Pos) + 1U)));
100021c8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100021cc:	f8d3 3888 	ldr.w	r3, [r3, #2184]	@ 0x888
100021d0:	0a1b      	lsrs	r3, r3, #8
100021d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
100021d6:	3301      	adds	r3, #1
100021d8:	ee07 3a90 	vmov	s15, r3
100021dc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
100021e0:	edd7 6a07 	vldr	s13, [r7, #28]
100021e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
100021e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
100021ec:	ee17 2a90 	vmov	r2, s15
100021f0:	687b      	ldr	r3, [r7, #4]
100021f2:	605a      	str	r2, [r3, #4]
  PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVR) >> RCC_PLL3CFGR2_DIVR_Pos) + 1U)));
100021f4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100021f8:	f8d3 3888 	ldr.w	r3, [r3, #2184]	@ 0x888
100021fc:	0c1b      	lsrs	r3, r3, #16
100021fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
10002202:	3301      	adds	r3, #1
10002204:	ee07 3a90 	vmov	s15, r3
10002208:	eeb8 7a67 	vcvt.f32.u32	s14, s15
1000220c:	edd7 6a07 	vldr	s13, [r7, #28]
10002210:	eec6 7a87 	vdiv.f32	s15, s13, s14
10002214:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10002218:	ee17 2a90 	vmov	r2, s15
1000221c:	687b      	ldr	r3, [r7, #4]
1000221e:	609a      	str	r2, [r3, #8]
}
10002220:	bf00      	nop
10002222:	3724      	adds	r7, #36	@ 0x24
10002224:	46bd      	mov	sp, r7
10002226:	f85d 7b04 	ldr.w	r7, [sp], #4
1000222a:	4770      	bx	lr
1000222c:	46000000 	.word	0x46000000
10002230:	03d09000 	.word	0x03d09000
10002234:	016e3600 	.word	0x016e3600
10002238:	003d0900 	.word	0x003d0900

1000223c <HAL_RCC_GetMCUFreq>:
  * @note   Each time MCU changes, this function must be called to update the
  *         right MCU value. Otherwise, any configuration based on this function will be incorrect.
  * @retval MCU frequency
  */
uint32_t HAL_RCC_GetMCUFreq(void)
{
1000223c:	b580      	push	{r7, lr}
1000223e:	b082      	sub	sp, #8
10002240:	af00      	add	r7, sp, #0
  uint32_t mcudiv = 0;
10002242:	2300      	movs	r3, #0
10002244:	607b      	str	r3, [r7, #4]

  /* Compute MCU frequency ---------------------------*/
  mcudiv = __HAL_RCC_GET_MCU_DIV();
10002246:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000224a:	f8d3 3830 	ldr.w	r3, [r3, #2096]	@ 0x830
1000224e:	f003 030f 	and.w	r3, r3, #15
10002252:	607b      	str	r3, [r7, #4]
  if (mcudiv > RCC_MCU_DIV512)
10002254:	687b      	ldr	r3, [r7, #4]
10002256:	2b09      	cmp	r3, #9
10002258:	d901      	bls.n	1000225e <HAL_RCC_GetMCUFreq+0x22>
  {
    mcudiv = RCC_MCU_DIV512;
1000225a:	2309      	movs	r3, #9
1000225c:	607b      	str	r3, [r7, #4]
  }

  return HAL_RCC_GetMCUSSFreq() >> mcudiv;
1000225e:	f000 f80f 	bl	10002280 <HAL_RCC_GetMCUSSFreq>
10002262:	4602      	mov	r2, r0
10002264:	687b      	ldr	r3, [r7, #4]
10002266:	fa22 f303 	lsr.w	r3, r2, r3
}
1000226a:	4618      	mov	r0, r3
1000226c:	3708      	adds	r7, #8
1000226e:	46bd      	mov	sp, r7
10002270:	bd80      	pop	{r7, pc}

10002272 <HAL_RCC_GetSystemCoreClockFreq>:
  *         frequency in the chip. It is calculated based on the predefined
  *         constants and the selected clock source
  * @retval System Core frequency
  */
uint32_t HAL_RCC_GetSystemCoreClockFreq(void)
{
10002272:	b580      	push	{r7, lr}
10002274:	af00      	add	r7, sp, #0
#ifdef CORE_CA7
  return HAL_RCC_GetMPUSSFreq();
#else /* CORE_CM4 */
  return HAL_RCC_GetMCUFreq();
10002276:	f7ff ffe1 	bl	1000223c <HAL_RCC_GetMCUFreq>
1000227a:	4603      	mov	r3, r0
#endif
}
1000227c:	4618      	mov	r0, r3
1000227e:	bd80      	pop	{r7, pc}

10002280 <HAL_RCC_GetMCUSSFreq>:

  return axissfreq;
}

uint32_t HAL_RCC_GetMCUSSFreq()
{
10002280:	b580      	push	{r7, lr}
10002282:	b084      	sub	sp, #16
10002284:	af00      	add	r7, sp, #0
  uint32_t mcussfreq = 0;
10002286:	2300      	movs	r3, #0
10002288:	60fb      	str	r3, [r7, #12]
  PLL3_ClocksTypeDef pll3_clocks;

  switch (__HAL_RCC_GET_MCU_SOURCE())
1000228a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000228e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10002290:	f003 0303 	and.w	r3, r3, #3
10002294:	2b03      	cmp	r3, #3
10002296:	d822      	bhi.n	100022de <HAL_RCC_GetMCUSSFreq+0x5e>
10002298:	a201      	add	r2, pc, #4	@ (adr r2, 100022a0 <HAL_RCC_GetMCUSSFreq+0x20>)
1000229a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1000229e:	bf00      	nop
100022a0:	100022bf 	.word	0x100022bf
100022a4:	100022d3 	.word	0x100022d3
100022a8:	100022d9 	.word	0x100022d9
100022ac:	100022b1 	.word	0x100022b1
  {
    case RCC_MCUSSOURCE_PLL3:
      HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
100022b0:	463b      	mov	r3, r7
100022b2:	4618      	mov	r0, r3
100022b4:	f7ff fec8 	bl	10002048 <HAL_RCC_GetPLL3ClockFreq>
      mcussfreq = pll3_clocks.PLL3_P_Frequency;
100022b8:	683b      	ldr	r3, [r7, #0]
100022ba:	60fb      	str	r3, [r7, #12]
      break;
100022bc:	e00f      	b.n	100022de <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_HSI:
      mcussfreq = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
100022be:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100022c2:	699b      	ldr	r3, [r3, #24]
100022c4:	f003 0303 	and.w	r3, r3, #3
100022c8:	4a07      	ldr	r2, [pc, #28]	@ (100022e8 <HAL_RCC_GetMCUSSFreq+0x68>)
100022ca:	fa22 f303 	lsr.w	r3, r2, r3
100022ce:	60fb      	str	r3, [r7, #12]

      break;
100022d0:	e005      	b.n	100022de <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_HSE:
      mcussfreq = HSE_VALUE;
100022d2:	4b06      	ldr	r3, [pc, #24]	@ (100022ec <HAL_RCC_GetMCUSSFreq+0x6c>)
100022d4:	60fb      	str	r3, [r7, #12]
      break;
100022d6:	e002      	b.n	100022de <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_CSI:
      mcussfreq = CSI_VALUE;
100022d8:	4b05      	ldr	r3, [pc, #20]	@ (100022f0 <HAL_RCC_GetMCUSSFreq+0x70>)
100022da:	60fb      	str	r3, [r7, #12]
      break;
100022dc:	bf00      	nop
  }

  return mcussfreq;
100022de:	68fb      	ldr	r3, [r7, #12]
}
100022e0:	4618      	mov	r0, r3
100022e2:	3710      	adds	r7, #16
100022e4:	46bd      	mov	sp, r7
100022e6:	bd80      	pop	{r7, pc}
100022e8:	03d09000 	.word	0x03d09000
100022ec:	016e3600 	.word	0x016e3600
100022f0:	003d0900 	.word	0x003d0900

100022f4 <HAL_RCC_WAKEUP_IRQHandler>:
  * @brief This function handles the RCC Wake up interrupt (rcc_mcu_wkup_irq/rcc_mpu_wkup_irq)
  * @note This API should be called under the RCC_WAKEUP_Handler().
  * @retval None
  */
void HAL_RCC_WAKEUP_IRQHandler(void)
{
100022f4:	b580      	push	{r7, lr}
100022f6:	af00      	add	r7, sp, #0
  /* Check RCC WKUP flag is set */
  if (__HAL_RCC_GET_IT(RCC_IT_WKUP) != RESET)
100022f8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100022fc:	f8d3 3c18 	ldr.w	r3, [r3, #3096]	@ 0xc18
10002300:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
10002304:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
10002308:	d107      	bne.n	1000231a <HAL_RCC_WAKEUP_IRQHandler+0x26>
  {
    /* Clear the RCC WKUP flag bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_WKUP);
1000230a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000230e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
10002312:	f8c3 2c18 	str.w	r2, [r3, #3096]	@ 0xc18

    /* RCC WKUP interrupt user callback */
    HAL_RCC_WAKEUP_Callback();
10002316:	f000 f802 	bl	1000231e <HAL_RCC_WAKEUP_Callback>
  }
}
1000231a:	bf00      	nop
1000231c:	bd80      	pop	{r7, pc}

1000231e <HAL_RCC_WAKEUP_Callback>:
/**
  * @brief  RCC WAKEUP interrupt callback
  * @retval None
  */
__weak void HAL_RCC_WAKEUP_Callback(void)
{
1000231e:	b480      	push	{r7}
10002320:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_WAKEUP_Callback could be implemented in the user file
  */
}
10002322:	bf00      	nop
10002324:	46bd      	mov	sp, r7
10002326:	f85d 7b04 	ldr.w	r7, [sp], #4
1000232a:	4770      	bx	lr

1000232c <RCCEx_PLL2_Config>:
  *
  * @retval HAL status
  */

HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLLInitTypeDef *pll2)
{
1000232c:	b580      	push	{r7, lr}
1000232e:	b084      	sub	sp, #16
10002330:	af00      	add	r7, sp, #0
10002332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll2->PLLState));
  if ((pll2->PLLState) != RCC_PLL_NONE)
10002334:	687b      	ldr	r3, [r7, #4]
10002336:	681b      	ldr	r3, [r3, #0]
10002338:	2b00      	cmp	r3, #0
1000233a:	f000 8171 	beq.w	10002620 <RCCEx_PLL2_Config+0x2f4>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL2_IN_USE()) /* If not used then */
1000233e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10002344:	f003 0307 	and.w	r3, r3, #7
10002348:	2b02      	cmp	r3, #2
1000234a:	d108      	bne.n	1000235e <RCCEx_PLL2_Config+0x32>
1000234c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10002352:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10002356:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
1000235a:	f000 815f 	beq.w	1000261c <RCCEx_PLL2_Config+0x2f0>
    {
      if ((pll2->PLLState) == RCC_PLL_ON)
1000235e:	687b      	ldr	r3, [r7, #4]
10002360:	681b      	ldr	r3, [r3, #0]
10002362:	2b02      	cmp	r3, #2
10002364:	f040 8130 	bne.w	100025c8 <RCCEx_PLL2_Config+0x29c>
        assert_param(IS_RCC_PLLP2_VALUE(pll2->PLLP));
        assert_param(IS_RCC_PLLQ2_VALUE(pll2->PLLQ));
        assert_param(IS_RCC_PLLR2_VALUE(pll2->PLLR));

        /* Check that PLL2 OSC clock source is already set */
        if ((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) &&
10002368:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000236c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1000236e:	f003 0303 	and.w	r3, r3, #3
10002372:	2b00      	cmp	r3, #0
10002374:	d008      	beq.n	10002388 <RCCEx_PLL2_Config+0x5c>
            (__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSE))
10002376:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000237a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1000237c:	f003 0303 	and.w	r3, r3, #3
        if ((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) &&
10002380:	2b01      	cmp	r3, #1
10002382:	d001      	beq.n	10002388 <RCCEx_PLL2_Config+0x5c>
        {
          return HAL_ERROR;
10002384:	2301      	movs	r3, #1
10002386:	e14c      	b.n	10002622 <RCCEx_PLL2_Config+0x2f6>
        }

        /*Disable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_DISABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
10002388:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000238c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10002390:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002394:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
10002398:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        /* Disable the main PLL. */
        __HAL_RCC_PLL2_DISABLE();
1000239c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100023a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
100023a4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100023a8:	f023 0301 	bic.w	r3, r3, #1
100023ac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100023b0:	f7fe faa0 	bl	100008f4 <HAL_GetTick>
100023b4:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
100023b6:	e008      	b.n	100023ca <RCCEx_PLL2_Config+0x9e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100023b8:	f7fe fa9c 	bl	100008f4 <HAL_GetTick>
100023bc:	4602      	mov	r2, r0
100023be:	68fb      	ldr	r3, [r7, #12]
100023c0:	1ad3      	subs	r3, r2, r3
100023c2:	2b64      	cmp	r3, #100	@ 0x64
100023c4:	d901      	bls.n	100023ca <RCCEx_PLL2_Config+0x9e>
          {
            return HAL_TIMEOUT;
100023c6:	2303      	movs	r3, #3
100023c8:	e12b      	b.n	10002622 <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
100023ca:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100023ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
100023d2:	f003 0302 	and.w	r3, r3, #2
100023d6:	2b02      	cmp	r3, #2
100023d8:	d0ee      	beq.n	100023b8 <RCCEx_PLL2_Config+0x8c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Do not change pll src if already in use */
        if (__IS_PLL1_IN_USE())
100023da:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100023de:	6a1b      	ldr	r3, [r3, #32]
100023e0:	f003 0303 	and.w	r3, r3, #3
100023e4:	2b02      	cmp	r3, #2
100023e6:	d107      	bne.n	100023f8 <RCCEx_PLL2_Config+0xcc>
100023e8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100023ec:	6a1b      	ldr	r3, [r3, #32]
100023ee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
100023f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
100023f6:	d00e      	beq.n	10002416 <RCCEx_PLL2_Config+0xea>
100023f8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100023fc:	6a1b      	ldr	r3, [r3, #32]
100023fe:	f003 0303 	and.w	r3, r3, #3
10002402:	2b03      	cmp	r3, #3
10002404:	d112      	bne.n	1000242c <RCCEx_PLL2_Config+0x100>
10002406:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000240a:	6a1b      	ldr	r3, [r3, #32]
1000240c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10002410:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10002414:	d10a      	bne.n	1000242c <RCCEx_PLL2_Config+0x100>
        {
          if (pll2->PLLSource != __HAL_RCC_GET_PLL12_SOURCE())
10002416:	687b      	ldr	r3, [r7, #4]
10002418:	685a      	ldr	r2, [r3, #4]
1000241a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000241e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10002420:	f003 0303 	and.w	r3, r3, #3
10002424:	429a      	cmp	r2, r3
10002426:	d00c      	beq.n	10002442 <RCCEx_PLL2_Config+0x116>
          {
            return HAL_ERROR;
10002428:	2301      	movs	r3, #1
1000242a:	e0fa      	b.n	10002622 <RCCEx_PLL2_Config+0x2f6>
          }
        }
        else
        {
          /* Configure PLL1 and PLL2 clock source */
          __HAL_RCC_PLL12_SOURCE(pll2->PLLSource);
1000242c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002430:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10002432:	f023 0203 	bic.w	r2, r3, #3
10002436:	687b      	ldr	r3, [r7, #4]
10002438:	685b      	ldr	r3, [r3, #4]
1000243a:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
1000243e:	4313      	orrs	r3, r2
10002440:	628b      	str	r3, [r1, #40]	@ 0x28
        }

        /* Configure the PLL2 multiplication and division factors. */
        __HAL_RCC_PLL2_CONFIG(
10002442:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002446:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
1000244a:	4b78      	ldr	r3, [pc, #480]	@ (1000262c <RCCEx_PLL2_Config+0x300>)
1000244c:	4013      	ands	r3, r2
1000244e:	687a      	ldr	r2, [r7, #4]
10002450:	68d2      	ldr	r2, [r2, #12]
10002452:	1e51      	subs	r1, r2, #1
10002454:	687a      	ldr	r2, [r7, #4]
10002456:	6892      	ldr	r2, [r2, #8]
10002458:	3a01      	subs	r2, #1
1000245a:	0412      	lsls	r2, r2, #16
1000245c:	430a      	orrs	r2, r1
1000245e:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10002462:	4313      	orrs	r3, r2
10002464:	f8c1 3098 	str.w	r3, [r1, #152]	@ 0x98
10002468:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000246c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
10002470:	f023 137f 	bic.w	r3, r3, #8323199	@ 0x7f007f
10002474:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
10002478:	687a      	ldr	r2, [r7, #4]
1000247a:	6912      	ldr	r2, [r2, #16]
1000247c:	1e51      	subs	r1, r2, #1
1000247e:	687a      	ldr	r2, [r7, #4]
10002480:	6952      	ldr	r2, [r2, #20]
10002482:	3a01      	subs	r2, #1
10002484:	0212      	lsls	r2, r2, #8
10002486:	4311      	orrs	r1, r2
10002488:	687a      	ldr	r2, [r7, #4]
1000248a:	6992      	ldr	r2, [r2, #24]
1000248c:	3a01      	subs	r2, #1
1000248e:	0412      	lsls	r2, r2, #16
10002490:	430a      	orrs	r2, r1
10002492:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10002496:	4313      	orrs	r3, r2
10002498:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
          pll2->PLLQ,
          pll2->PLLR);


        /* Configure the Fractional Divider */
        __HAL_RCC_PLL2FRACV_DISABLE(); //Set FRACLE to ‘0’
1000249c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100024a0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
100024a4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100024a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
100024ac:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll2->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll2->PLLMODE == RCC_PLL_INTEGER))
100024b0:	687b      	ldr	r3, [r7, #4]
100024b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100024b4:	2b02      	cmp	r3, #2
100024b6:	d003      	beq.n	100024c0 <RCCEx_PLL2_Config+0x194>
100024b8:	687b      	ldr	r3, [r7, #4]
100024ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100024bc:	2b00      	cmp	r3, #0
100024be:	d10c      	bne.n	100024da <RCCEx_PLL2_Config+0x1ae>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL2FRACV_CONFIG(0); //Set FRACV to '0'
100024c0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100024c4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
100024c8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100024cc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
100024d0:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
100024d4:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
100024d8:	e00f      	b.n	100024fa <RCCEx_PLL2_Config+0x1ce>
        }
        else
        {
          /* Configure PLL  PLL2FRACV  in fractional mode*/
          __HAL_RCC_PLL2FRACV_CONFIG(pll2->PLLFRACV);
100024da:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100024de:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
100024e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
100024e6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
100024ea:	687a      	ldr	r2, [r7, #4]
100024ec:	6a12      	ldr	r2, [r2, #32]
100024ee:	00d2      	lsls	r2, r2, #3
100024f0:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100024f4:	4313      	orrs	r3, r2
100024f6:	f8c1 30a0 	str.w	r3, [r1, #160]	@ 0xa0
        }
        __HAL_RCC_PLL2FRACV_ENABLE(); //Set FRACLE to ‘1’
100024fa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100024fe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
10002502:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002506:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
1000250a:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0


        /* Configure the Spread Control */
        if (pll2->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
1000250e:	687b      	ldr	r3, [r7, #4]
10002510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10002512:	2b02      	cmp	r3, #2
10002514:	d124      	bne.n	10002560 <RCCEx_PLL2_Config+0x234>
          assert_param(IS_RCC_SSCG_MODE(pll2->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll2->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll2->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll2->MOD_PER));

          __HAL_RCC_PLL2CSGCONFIG(pll2->MOD_PER, pll2->TPDFN_DIS, pll2->RPDFN_DIS,
10002516:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000251a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
1000251e:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
10002522:	687b      	ldr	r3, [r7, #4]
10002524:	6a99      	ldr	r1, [r3, #40]	@ 0x28
10002526:	687b      	ldr	r3, [r7, #4]
10002528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
1000252a:	4319      	orrs	r1, r3
1000252c:	687b      	ldr	r3, [r7, #4]
1000252e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10002530:	4319      	orrs	r1, r3
10002532:	687b      	ldr	r3, [r7, #4]
10002534:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
10002536:	4319      	orrs	r1, r3
10002538:	687b      	ldr	r3, [r7, #4]
1000253a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
1000253c:	041b      	lsls	r3, r3, #16
1000253e:	430b      	orrs	r3, r1
10002540:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10002544:	4313      	orrs	r3, r2
10002546:	f8c1 30a4 	str.w	r3, [r1, #164]	@ 0xa4
                                  pll2->SSCG_MODE, pll2->INC_STEP);
          __HAL_RCC_PLL2_SSMODE_ENABLE();
1000254a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000254e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10002552:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002556:	f043 0304 	orr.w	r3, r3, #4
1000255a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
1000255e:	e009      	b.n	10002574 <RCCEx_PLL2_Config+0x248>
        }
        else
        {
          __HAL_RCC_PLL2_SSMODE_DISABLE();
10002560:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002564:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10002568:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000256c:	f023 0304 	bic.w	r3, r3, #4
10002570:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }


        /* Enable the PLL2. */
        __HAL_RCC_PLL2_ENABLE();
10002574:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002578:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
1000257c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002580:	f043 0301 	orr.w	r3, r3, #1
10002584:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10002588:	f7fe f9b4 	bl	100008f4 <HAL_GetTick>
1000258c:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
1000258e:	e008      	b.n	100025a2 <RCCEx_PLL2_Config+0x276>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10002590:	f7fe f9b0 	bl	100008f4 <HAL_GetTick>
10002594:	4602      	mov	r2, r0
10002596:	68fb      	ldr	r3, [r7, #12]
10002598:	1ad3      	subs	r3, r2, r3
1000259a:	2b64      	cmp	r3, #100	@ 0x64
1000259c:	d901      	bls.n	100025a2 <RCCEx_PLL2_Config+0x276>
          {
            return HAL_TIMEOUT;
1000259e:	2303      	movs	r3, #3
100025a0:	e03f      	b.n	10002622 <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
100025a2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100025a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
100025aa:	f003 0302 	and.w	r3, r3, #2
100025ae:	2b02      	cmp	r3, #2
100025b0:	d1ee      	bne.n	10002590 <RCCEx_PLL2_Config+0x264>
          }
        }
        /*Enable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
100025b2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100025b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
100025ba:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100025be:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
100025c2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      if ((pll2->PLLState) == RCC_PLL_ON)
100025c6:	e02b      	b.n	10002620 <RCCEx_PLL2_Config+0x2f4>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_DISABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
100025c8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100025cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
100025d0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100025d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
100025d8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        /* Disable the PLL2. */
        __HAL_RCC_PLL2_DISABLE();
100025dc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100025e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
100025e4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100025e8:	f023 0301 	bic.w	r3, r3, #1
100025ec:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100025f0:	f7fe f980 	bl	100008f4 <HAL_GetTick>
100025f4:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
100025f6:	e008      	b.n	1000260a <RCCEx_PLL2_Config+0x2de>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100025f8:	f7fe f97c 	bl	100008f4 <HAL_GetTick>
100025fc:	4602      	mov	r2, r0
100025fe:	68fb      	ldr	r3, [r7, #12]
10002600:	1ad3      	subs	r3, r2, r3
10002602:	2b64      	cmp	r3, #100	@ 0x64
10002604:	d901      	bls.n	1000260a <RCCEx_PLL2_Config+0x2de>
          {
            return HAL_TIMEOUT;
10002606:	2303      	movs	r3, #3
10002608:	e00b      	b.n	10002622 <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
1000260a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000260e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10002612:	f003 0302 	and.w	r3, r3, #2
10002616:	2b02      	cmp	r3, #2
10002618:	d0ee      	beq.n	100025f8 <RCCEx_PLL2_Config+0x2cc>
      if ((pll2->PLLState) == RCC_PLL_ON)
1000261a:	e001      	b.n	10002620 <RCCEx_PLL2_Config+0x2f4>
        }
      }
    }
    else
    {
      return HAL_ERROR;
1000261c:	2301      	movs	r3, #1
1000261e:	e000      	b.n	10002622 <RCCEx_PLL2_Config+0x2f6>
    }
  }
  return HAL_OK;
10002620:	2300      	movs	r3, #0

}
10002622:	4618      	mov	r0, r3
10002624:	3710      	adds	r7, #16
10002626:	46bd      	mov	sp, r7
10002628:	bd80      	pop	{r7, pc}
1000262a:	bf00      	nop
1000262c:	ffc0fe00 	.word	0xffc0fe00

10002630 <RCCEx_PLL3_Config>:
  * @param  pll3: pointer to a RCC_PLLInitTypeDef structure
  *
  * @retval HAL status
  */
HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLLInitTypeDef *pll3)
{
10002630:	b580      	push	{r7, lr}
10002632:	b084      	sub	sp, #16
10002634:	af00      	add	r7, sp, #0
10002636:	6078      	str	r0, [r7, #4]

  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll3->PLLState));
  if ((pll3->PLLState) != RCC_PLL_NONE)
10002638:	687b      	ldr	r3, [r7, #4]
1000263a:	681b      	ldr	r3, [r3, #0]
1000263c:	2b00      	cmp	r3, #0
1000263e:	f000 815a 	beq.w	100028f6 <RCCEx_PLL3_Config+0x2c6>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL3_IN_USE()) /* If not used then*/
10002642:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002646:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10002648:	f003 0303 	and.w	r3, r3, #3
1000264c:	2b03      	cmp	r3, #3
1000264e:	d108      	bne.n	10002662 <RCCEx_PLL3_Config+0x32>
10002650:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002654:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10002656:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
1000265a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
1000265e:	f000 8148 	beq.w	100028f2 <RCCEx_PLL3_Config+0x2c2>
    {
      if ((pll3->PLLState) == RCC_PLL_ON)
10002662:	687b      	ldr	r3, [r7, #4]
10002664:	681b      	ldr	r3, [r3, #0]
10002666:	2b02      	cmp	r3, #2
10002668:	f040 8119 	bne.w	1000289e <RCCEx_PLL3_Config+0x26e>
        assert_param(IS_RCC_PLLP3_VALUE(pll3->PLLP));
        assert_param(IS_RCC_PLLQ3_VALUE(pll3->PLLQ));
        assert_param(IS_RCC_PLLR3_VALUE(pll3->PLLR));

        /*Disable the post-dividers*/
        __HAL_RCC_PLL3CLKOUT_DISABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
1000266c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002670:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10002674:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002678:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
1000267c:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880
        /* Disable the main PLL. */
        __HAL_RCC_PLL3_DISABLE();
10002680:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002684:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10002688:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000268c:	f023 0301 	bic.w	r3, r3, #1
10002690:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10002694:	f7fe f92e 	bl	100008f4 <HAL_GetTick>
10002698:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
1000269a:	e008      	b.n	100026ae <RCCEx_PLL3_Config+0x7e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1000269c:	f7fe f92a 	bl	100008f4 <HAL_GetTick>
100026a0:	4602      	mov	r2, r0
100026a2:	68fb      	ldr	r3, [r7, #12]
100026a4:	1ad3      	subs	r3, r2, r3
100026a6:	2b64      	cmp	r3, #100	@ 0x64
100026a8:	d901      	bls.n	100026ae <RCCEx_PLL3_Config+0x7e>
          {
            return HAL_TIMEOUT;
100026aa:	2303      	movs	r3, #3
100026ac:	e124      	b.n	100028f8 <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
100026ae:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100026b2:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100026b6:	f003 0302 	and.w	r3, r3, #2
100026ba:	2b02      	cmp	r3, #2
100026bc:	d0ee      	beq.n	1000269c <RCCEx_PLL3_Config+0x6c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Configure PLL3 clock source */
        __HAL_RCC_PLL3_SOURCE(pll3->PLLSource);
100026be:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100026c2:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
100026c6:	f023 0203 	bic.w	r2, r3, #3
100026ca:	687b      	ldr	r3, [r7, #4]
100026cc:	685b      	ldr	r3, [r3, #4]
100026ce:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100026d2:	4313      	orrs	r3, r2
100026d4:	f8c1 3820 	str.w	r3, [r1, #2080]	@ 0x820

        /* Wait till PLL SOURCE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3SRCRDY) == RESET)
100026d8:	e008      	b.n	100026ec <RCCEx_PLL3_Config+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100026da:	f7fe f90b 	bl	100008f4 <HAL_GetTick>
100026de:	4602      	mov	r2, r0
100026e0:	68fb      	ldr	r3, [r7, #12]
100026e2:	1ad3      	subs	r3, r2, r3
100026e4:	2b64      	cmp	r3, #100	@ 0x64
100026e6:	d901      	bls.n	100026ec <RCCEx_PLL3_Config+0xbc>
          {
            return HAL_TIMEOUT;
100026e8:	2303      	movs	r3, #3
100026ea:	e105      	b.n	100028f8 <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3SRCRDY) == RESET)
100026ec:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100026f0:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
100026f4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
100026f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
100026fc:	d1ed      	bne.n	100026da <RCCEx_PLL3_Config+0xaa>
          }
        }

        /* Select PLL3 input reference frequency range */
        __HAL_RCC_PLL3_IFRANGE(pll3->PLLRGE) ;
100026fe:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002702:	f8d3 3884 	ldr.w	r3, [r3, #2180]	@ 0x884
10002706:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
1000270a:	687b      	ldr	r3, [r7, #4]
1000270c:	69db      	ldr	r3, [r3, #28]
1000270e:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10002712:	4313      	orrs	r3, r2
10002714:	f8c1 3884 	str.w	r3, [r1, #2180]	@ 0x884

        /* Configure the PLL3 multiplication and division factors. */
        __HAL_RCC_PLL3_CONFIG(
10002718:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000271c:	f8d3 2884 	ldr.w	r2, [r3, #2180]	@ 0x884
10002720:	4b77      	ldr	r3, [pc, #476]	@ (10002900 <RCCEx_PLL3_Config+0x2d0>)
10002722:	4013      	ands	r3, r2
10002724:	687a      	ldr	r2, [r7, #4]
10002726:	68d2      	ldr	r2, [r2, #12]
10002728:	1e51      	subs	r1, r2, #1
1000272a:	687a      	ldr	r2, [r7, #4]
1000272c:	6892      	ldr	r2, [r2, #8]
1000272e:	3a01      	subs	r2, #1
10002730:	0412      	lsls	r2, r2, #16
10002732:	430a      	orrs	r2, r1
10002734:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10002738:	4313      	orrs	r3, r2
1000273a:	f8c1 3884 	str.w	r3, [r1, #2180]	@ 0x884
1000273e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002742:	f8d3 3888 	ldr.w	r3, [r3, #2184]	@ 0x888
10002746:	f023 137f 	bic.w	r3, r3, #8323199	@ 0x7f007f
1000274a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
1000274e:	687a      	ldr	r2, [r7, #4]
10002750:	6912      	ldr	r2, [r2, #16]
10002752:	1e51      	subs	r1, r2, #1
10002754:	687a      	ldr	r2, [r7, #4]
10002756:	6952      	ldr	r2, [r2, #20]
10002758:	3a01      	subs	r2, #1
1000275a:	0212      	lsls	r2, r2, #8
1000275c:	4311      	orrs	r1, r2
1000275e:	687a      	ldr	r2, [r7, #4]
10002760:	6992      	ldr	r2, [r2, #24]
10002762:	3a01      	subs	r2, #1
10002764:	0412      	lsls	r2, r2, #16
10002766:	430a      	orrs	r2, r1
10002768:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
1000276c:	4313      	orrs	r3, r2
1000276e:	f8c1 3888 	str.w	r3, [r1, #2184]	@ 0x888
          pll3->PLLP,
          pll3->PLLQ,
          pll3->PLLR);

        /* Configure the Fractional Divider */
        __HAL_RCC_PLL3FRACV_DISABLE(); //Set FRACLE to ‘0’
10002772:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002776:	f8d3 388c 	ldr.w	r3, [r3, #2188]	@ 0x88c
1000277a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000277e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
10002782:	f8c2 388c 	str.w	r3, [r2, #2188]	@ 0x88c
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll3->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll3->PLLMODE == RCC_PLL_INTEGER))
10002786:	687b      	ldr	r3, [r7, #4]
10002788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000278a:	2b02      	cmp	r3, #2
1000278c:	d003      	beq.n	10002796 <RCCEx_PLL3_Config+0x166>
1000278e:	687b      	ldr	r3, [r7, #4]
10002790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10002792:	2b00      	cmp	r3, #0
10002794:	d10c      	bne.n	100027b0 <RCCEx_PLL3_Config+0x180>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL3FRACV_CONFIG(0); //Set FRACV to '0'
10002796:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000279a:	f8d3 388c 	ldr.w	r3, [r3, #2188]	@ 0x88c
1000279e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100027a2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
100027a6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
100027aa:	f8c2 388c 	str.w	r3, [r2, #2188]	@ 0x88c
100027ae:	e00f      	b.n	100027d0 <RCCEx_PLL3_Config+0x1a0>
        }
        else
        {
          /* Configure PLL  PLL3FRACV  in fractional mode*/
          __HAL_RCC_PLL3FRACV_CONFIG(pll3->PLLFRACV);
100027b0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100027b4:	f8d3 388c 	ldr.w	r3, [r3, #2188]	@ 0x88c
100027b8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
100027bc:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
100027c0:	687a      	ldr	r2, [r7, #4]
100027c2:	6a12      	ldr	r2, [r2, #32]
100027c4:	00d2      	lsls	r2, r2, #3
100027c6:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100027ca:	4313      	orrs	r3, r2
100027cc:	f8c1 388c 	str.w	r3, [r1, #2188]	@ 0x88c
        }
        __HAL_RCC_PLL3FRACV_ENABLE(); //Set FRACLE to ‘1’
100027d0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100027d4:	f8d3 388c 	ldr.w	r3, [r3, #2188]	@ 0x88c
100027d8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100027dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
100027e0:	f8c2 388c 	str.w	r3, [r2, #2188]	@ 0x88c


        /* Configure the Spread Control */
        if (pll3->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
100027e4:	687b      	ldr	r3, [r7, #4]
100027e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100027e8:	2b02      	cmp	r3, #2
100027ea:	d124      	bne.n	10002836 <RCCEx_PLL3_Config+0x206>
          assert_param(IS_RCC_SSCG_MODE(pll3->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll3->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll3->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll3->MOD_PER));

          __HAL_RCC_PLL3CSGCONFIG(pll3->MOD_PER, pll3->TPDFN_DIS, pll3->RPDFN_DIS,
100027ec:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100027f0:	f8d3 3890 	ldr.w	r3, [r3, #2192]	@ 0x890
100027f4:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
100027f8:	687b      	ldr	r3, [r7, #4]
100027fa:	6a99      	ldr	r1, [r3, #40]	@ 0x28
100027fc:	687b      	ldr	r3, [r7, #4]
100027fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10002800:	4319      	orrs	r1, r3
10002802:	687b      	ldr	r3, [r7, #4]
10002804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10002806:	4319      	orrs	r1, r3
10002808:	687b      	ldr	r3, [r7, #4]
1000280a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
1000280c:	4319      	orrs	r1, r3
1000280e:	687b      	ldr	r3, [r7, #4]
10002810:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10002812:	041b      	lsls	r3, r3, #16
10002814:	430b      	orrs	r3, r1
10002816:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
1000281a:	4313      	orrs	r3, r2
1000281c:	f8c1 3890 	str.w	r3, [r1, #2192]	@ 0x890
                                  pll3->SSCG_MODE, pll3->INC_STEP);
          __HAL_RCC_PLL3_SSMODE_ENABLE();
10002820:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002824:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10002828:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000282c:	f043 0304 	orr.w	r3, r3, #4
10002830:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880
10002834:	e009      	b.n	1000284a <RCCEx_PLL3_Config+0x21a>
        }
        else
        {
          __HAL_RCC_PLL3_SSMODE_DISABLE();
10002836:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000283a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
1000283e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002842:	f023 0304 	bic.w	r3, r3, #4
10002846:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880
        }


        /* Enable the PLL3. */
        __HAL_RCC_PLL3_ENABLE();
1000284a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000284e:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10002852:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002856:	f043 0301 	orr.w	r3, r3, #1
1000285a:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
1000285e:	f7fe f849 	bl	100008f4 <HAL_GetTick>
10002862:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
10002864:	e008      	b.n	10002878 <RCCEx_PLL3_Config+0x248>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10002866:	f7fe f845 	bl	100008f4 <HAL_GetTick>
1000286a:	4602      	mov	r2, r0
1000286c:	68fb      	ldr	r3, [r7, #12]
1000286e:	1ad3      	subs	r3, r2, r3
10002870:	2b64      	cmp	r3, #100	@ 0x64
10002872:	d901      	bls.n	10002878 <RCCEx_PLL3_Config+0x248>
          {
            return HAL_TIMEOUT;
10002874:	2303      	movs	r3, #3
10002876:	e03f      	b.n	100028f8 <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
10002878:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000287c:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10002880:	f003 0302 	and.w	r3, r3, #2
10002884:	2b02      	cmp	r3, #2
10002886:	d1ee      	bne.n	10002866 <RCCEx_PLL3_Config+0x236>
          }
        }
        /* Enable the post-dividers */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
10002888:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000288c:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10002890:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002894:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
10002898:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880
      if ((pll3->PLLState) == RCC_PLL_ON)
1000289c:	e02b      	b.n	100028f6 <RCCEx_PLL3_Config+0x2c6>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL3CLKOUT_DISABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
1000289e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100028a2:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100028a6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100028aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
100028ae:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880
        /* Disable the PLL3. */
        __HAL_RCC_PLL3_DISABLE();
100028b2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100028b6:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100028ba:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100028be:	f023 0301 	bic.w	r3, r3, #1
100028c2:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100028c6:	f7fe f815 	bl	100008f4 <HAL_GetTick>
100028ca:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
100028cc:	e008      	b.n	100028e0 <RCCEx_PLL3_Config+0x2b0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100028ce:	f7fe f811 	bl	100008f4 <HAL_GetTick>
100028d2:	4602      	mov	r2, r0
100028d4:	68fb      	ldr	r3, [r7, #12]
100028d6:	1ad3      	subs	r3, r2, r3
100028d8:	2b64      	cmp	r3, #100	@ 0x64
100028da:	d901      	bls.n	100028e0 <RCCEx_PLL3_Config+0x2b0>
          {
            return HAL_TIMEOUT;
100028dc:	2303      	movs	r3, #3
100028de:	e00b      	b.n	100028f8 <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
100028e0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100028e4:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100028e8:	f003 0302 	and.w	r3, r3, #2
100028ec:	2b02      	cmp	r3, #2
100028ee:	d0ee      	beq.n	100028ce <RCCEx_PLL3_Config+0x29e>
      if ((pll3->PLLState) == RCC_PLL_ON)
100028f0:	e001      	b.n	100028f6 <RCCEx_PLL3_Config+0x2c6>
        }
      }
    }
    else
    {
      return HAL_ERROR;
100028f2:	2301      	movs	r3, #1
100028f4:	e000      	b.n	100028f8 <RCCEx_PLL3_Config+0x2c8>
    }
  }
  return HAL_OK;
100028f6:	2300      	movs	r3, #0
}
100028f8:	4618      	mov	r0, r3
100028fa:	3710      	adds	r7, #16
100028fc:	46bd      	mov	sp, r7
100028fe:	bd80      	pop	{r7, pc}
10002900:	ffc0fe00 	.word	0xffc0fe00

10002904 <RCCEx_PLL4_Config>:
  * @param  pll4: pointer to a RCC_PLLInitTypeDef structure
  *
  * @retval HAL status
  */
HAL_StatusTypeDef RCCEx_PLL4_Config(RCC_PLLInitTypeDef *pll4)
{
10002904:	b580      	push	{r7, lr}
10002906:	b084      	sub	sp, #16
10002908:	af00      	add	r7, sp, #0
1000290a:	6078      	str	r0, [r7, #4]

  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll4->PLLState));
  if ((pll4->PLLState) != RCC_PLL_NONE)
1000290c:	687b      	ldr	r3, [r7, #4]
1000290e:	681b      	ldr	r3, [r3, #0]
10002910:	2b00      	cmp	r3, #0
10002912:	f000 8147 	beq.w	10002ba4 <RCCEx_PLL4_Config+0x2a0>
  {

    if ((pll4->PLLState) == RCC_PLL_ON)
10002916:	687b      	ldr	r3, [r7, #4]
10002918:	681b      	ldr	r3, [r3, #0]
1000291a:	2b02      	cmp	r3, #2
1000291c:	f040 8119 	bne.w	10002b52 <RCCEx_PLL4_Config+0x24e>
      assert_param(IS_RCC_PLLP4_VALUE(pll4->PLLP));
      assert_param(IS_RCC_PLLQ4_VALUE(pll4->PLLQ));
      assert_param(IS_RCC_PLLR4_VALUE(pll4->PLLR));

      /*Disable the post-dividers*/
      __HAL_RCC_PLL4CLKOUT_DISABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
10002920:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002924:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10002928:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000292c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
10002930:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
      /* Disable the main PLL. */
      __HAL_RCC_PLL4_DISABLE();
10002934:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002938:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
1000293c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002940:	f023 0301 	bic.w	r3, r3, #1
10002944:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10002948:	f7fd ffd4 	bl	100008f4 <HAL_GetTick>
1000294c:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
1000294e:	e008      	b.n	10002962 <RCCEx_PLL4_Config+0x5e>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10002950:	f7fd ffd0 	bl	100008f4 <HAL_GetTick>
10002954:	4602      	mov	r2, r0
10002956:	68fb      	ldr	r3, [r7, #12]
10002958:	1ad3      	subs	r3, r2, r3
1000295a:	2b64      	cmp	r3, #100	@ 0x64
1000295c:	d901      	bls.n	10002962 <RCCEx_PLL4_Config+0x5e>
        {
          return HAL_TIMEOUT;
1000295e:	2303      	movs	r3, #3
10002960:	e121      	b.n	10002ba6 <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
10002962:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002966:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
1000296a:	f003 0302 	and.w	r3, r3, #2
1000296e:	2b02      	cmp	r3, #2
10002970:	d0ee      	beq.n	10002950 <RCCEx_PLL4_Config+0x4c>
      -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
      -Fractional Division Enable (PLLxFRACNEN)
      -Fractional Division factor (FRACNx)*/

      /* Configure PLL4 and PLL4 clock source */
      __HAL_RCC_PLL4_SOURCE(pll4->PLLSource);
10002972:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002976:	f8d3 3824 	ldr.w	r3, [r3, #2084]	@ 0x824
1000297a:	f023 0203 	bic.w	r2, r3, #3
1000297e:	687b      	ldr	r3, [r7, #4]
10002980:	685b      	ldr	r3, [r3, #4]
10002982:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10002986:	4313      	orrs	r3, r2
10002988:	f8c1 3824 	str.w	r3, [r1, #2084]	@ 0x824

      /* Wait till PLL SOURCE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4SRCRDY) == RESET)
1000298c:	e008      	b.n	100029a0 <RCCEx_PLL4_Config+0x9c>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1000298e:	f7fd ffb1 	bl	100008f4 <HAL_GetTick>
10002992:	4602      	mov	r2, r0
10002994:	68fb      	ldr	r3, [r7, #12]
10002996:	1ad3      	subs	r3, r2, r3
10002998:	2b64      	cmp	r3, #100	@ 0x64
1000299a:	d901      	bls.n	100029a0 <RCCEx_PLL4_Config+0x9c>
        {
          return HAL_TIMEOUT;
1000299c:	2303      	movs	r3, #3
1000299e:	e102      	b.n	10002ba6 <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4SRCRDY) == RESET)
100029a0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100029a4:	f8d3 3824 	ldr.w	r3, [r3, #2084]	@ 0x824
100029a8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
100029ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
100029b0:	d1ed      	bne.n	1000298e <RCCEx_PLL4_Config+0x8a>
        }
      }

      /* Select PLL4 input reference frequency range */
      __HAL_RCC_PLL4_IFRANGE(pll4->PLLRGE) ;
100029b2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100029b6:	f8d3 3898 	ldr.w	r3, [r3, #2200]	@ 0x898
100029ba:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
100029be:	687b      	ldr	r3, [r7, #4]
100029c0:	69db      	ldr	r3, [r3, #28]
100029c2:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100029c6:	4313      	orrs	r3, r2
100029c8:	f8c1 3898 	str.w	r3, [r1, #2200]	@ 0x898

      /* Configure the PLL4 multiplication and division factors. */
      __HAL_RCC_PLL4_CONFIG(
100029cc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100029d0:	f8d3 2898 	ldr.w	r2, [r3, #2200]	@ 0x898
100029d4:	4b76      	ldr	r3, [pc, #472]	@ (10002bb0 <RCCEx_PLL4_Config+0x2ac>)
100029d6:	4013      	ands	r3, r2
100029d8:	687a      	ldr	r2, [r7, #4]
100029da:	68d2      	ldr	r2, [r2, #12]
100029dc:	1e51      	subs	r1, r2, #1
100029de:	687a      	ldr	r2, [r7, #4]
100029e0:	6892      	ldr	r2, [r2, #8]
100029e2:	3a01      	subs	r2, #1
100029e4:	0412      	lsls	r2, r2, #16
100029e6:	430a      	orrs	r2, r1
100029e8:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100029ec:	4313      	orrs	r3, r2
100029ee:	f8c1 3898 	str.w	r3, [r1, #2200]	@ 0x898
100029f2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100029f6:	f8d3 389c 	ldr.w	r3, [r3, #2204]	@ 0x89c
100029fa:	f023 137f 	bic.w	r3, r3, #8323199	@ 0x7f007f
100029fe:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
10002a02:	687a      	ldr	r2, [r7, #4]
10002a04:	6912      	ldr	r2, [r2, #16]
10002a06:	1e51      	subs	r1, r2, #1
10002a08:	687a      	ldr	r2, [r7, #4]
10002a0a:	6952      	ldr	r2, [r2, #20]
10002a0c:	3a01      	subs	r2, #1
10002a0e:	0212      	lsls	r2, r2, #8
10002a10:	4311      	orrs	r1, r2
10002a12:	687a      	ldr	r2, [r7, #4]
10002a14:	6992      	ldr	r2, [r2, #24]
10002a16:	3a01      	subs	r2, #1
10002a18:	0412      	lsls	r2, r2, #16
10002a1a:	430a      	orrs	r2, r1
10002a1c:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10002a20:	4313      	orrs	r3, r2
10002a22:	f8c1 389c 	str.w	r3, [r1, #2204]	@ 0x89c
        pll4->PLLP,
        pll4->PLLQ,
        pll4->PLLR);

      /* Configure the Fractional Divider */
      __HAL_RCC_PLL4FRACV_DISABLE(); //Set FRACLE to ‘0’
10002a26:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002a2a:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	@ 0x8a0
10002a2e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002a32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
10002a36:	f8c2 38a0 	str.w	r3, [r2, #2208]	@ 0x8a0
      /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
      if ((pll4->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll4->PLLMODE == RCC_PLL_INTEGER))
10002a3a:	687b      	ldr	r3, [r7, #4]
10002a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10002a3e:	2b02      	cmp	r3, #2
10002a40:	d003      	beq.n	10002a4a <RCCEx_PLL4_Config+0x146>
10002a42:	687b      	ldr	r3, [r7, #4]
10002a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10002a46:	2b00      	cmp	r3, #0
10002a48:	d10c      	bne.n	10002a64 <RCCEx_PLL4_Config+0x160>
      {
        /* Do not use the fractional divider */
        __HAL_RCC_PLL4FRACV_CONFIG(0); //Set FRACV to '0'
10002a4a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002a4e:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	@ 0x8a0
10002a52:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002a56:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
10002a5a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
10002a5e:	f8c2 38a0 	str.w	r3, [r2, #2208]	@ 0x8a0
10002a62:	e00f      	b.n	10002a84 <RCCEx_PLL4_Config+0x180>
      }
      else
      {
        /* Configure PLL  PLL4FRACV  in fractional mode*/
        __HAL_RCC_PLL4FRACV_CONFIG(pll4->PLLFRACV);
10002a64:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002a68:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	@ 0x8a0
10002a6c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
10002a70:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
10002a74:	687a      	ldr	r2, [r7, #4]
10002a76:	6a12      	ldr	r2, [r2, #32]
10002a78:	00d2      	lsls	r2, r2, #3
10002a7a:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10002a7e:	4313      	orrs	r3, r2
10002a80:	f8c1 38a0 	str.w	r3, [r1, #2208]	@ 0x8a0
      }
      __HAL_RCC_PLL4FRACV_ENABLE(); //Set FRACLE to ‘1’
10002a84:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002a88:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	@ 0x8a0
10002a8c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002a90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
10002a94:	f8c2 38a0 	str.w	r3, [r2, #2208]	@ 0x8a0

      /* Configure the Spread Control */
      if (pll4->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
10002a98:	687b      	ldr	r3, [r7, #4]
10002a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10002a9c:	2b02      	cmp	r3, #2
10002a9e:	d124      	bne.n	10002aea <RCCEx_PLL4_Config+0x1e6>
        assert_param(IS_RCC_SSCG_MODE(pll4->SSCG_MODE));
        assert_param(IS_RCC_RPDFN_DIS(pll4->RPDFN_DIS));
        assert_param(IS_RCC_TPDFN_DIS(pll4->TPDFN_DIS));
        assert_param(IS_RCC_MOD_PER(pll4->MOD_PER));

        __HAL_RCC_PLL4CSGCONFIG(pll4->MOD_PER, pll4->TPDFN_DIS, pll4->RPDFN_DIS,
10002aa0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002aa4:	f8d3 38a4 	ldr.w	r3, [r3, #2212]	@ 0x8a4
10002aa8:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
10002aac:	687b      	ldr	r3, [r7, #4]
10002aae:	6a99      	ldr	r1, [r3, #40]	@ 0x28
10002ab0:	687b      	ldr	r3, [r7, #4]
10002ab2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10002ab4:	4319      	orrs	r1, r3
10002ab6:	687b      	ldr	r3, [r7, #4]
10002ab8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10002aba:	4319      	orrs	r1, r3
10002abc:	687b      	ldr	r3, [r7, #4]
10002abe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
10002ac0:	4319      	orrs	r1, r3
10002ac2:	687b      	ldr	r3, [r7, #4]
10002ac4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10002ac6:	041b      	lsls	r3, r3, #16
10002ac8:	430b      	orrs	r3, r1
10002aca:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10002ace:	4313      	orrs	r3, r2
10002ad0:	f8c1 38a4 	str.w	r3, [r1, #2212]	@ 0x8a4
                                pll4->SSCG_MODE, pll4->INC_STEP);
        __HAL_RCC_PLL4_SSMODE_ENABLE();
10002ad4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002ad8:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10002adc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002ae0:	f043 0304 	orr.w	r3, r3, #4
10002ae4:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
10002ae8:	e009      	b.n	10002afe <RCCEx_PLL4_Config+0x1fa>
      }
      else
      {
        __HAL_RCC_PLL4_SSMODE_DISABLE();
10002aea:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002aee:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10002af2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002af6:	f023 0304 	bic.w	r3, r3, #4
10002afa:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
      }

      /* Enable the PLL4. */
      __HAL_RCC_PLL4_ENABLE();
10002afe:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002b02:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10002b06:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002b0a:	f043 0301 	orr.w	r3, r3, #1
10002b0e:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10002b12:	f7fd feef 	bl	100008f4 <HAL_GetTick>
10002b16:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) == RESET)
10002b18:	e008      	b.n	10002b2c <RCCEx_PLL4_Config+0x228>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10002b1a:	f7fd feeb 	bl	100008f4 <HAL_GetTick>
10002b1e:	4602      	mov	r2, r0
10002b20:	68fb      	ldr	r3, [r7, #12]
10002b22:	1ad3      	subs	r3, r2, r3
10002b24:	2b64      	cmp	r3, #100	@ 0x64
10002b26:	d901      	bls.n	10002b2c <RCCEx_PLL4_Config+0x228>
        {
          return HAL_TIMEOUT;
10002b28:	2303      	movs	r3, #3
10002b2a:	e03c      	b.n	10002ba6 <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) == RESET)
10002b2c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002b30:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10002b34:	f003 0302 	and.w	r3, r3, #2
10002b38:	2b02      	cmp	r3, #2
10002b3a:	d1ee      	bne.n	10002b1a <RCCEx_PLL4_Config+0x216>
        }
      }
      /* Enable PLL4P Clock output. */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
10002b3c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002b40:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10002b44:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002b48:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
10002b4c:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
10002b50:	e028      	b.n	10002ba4 <RCCEx_PLL4_Config+0x2a0>
    }
    else
    {
      /*Disable the post-dividers*/
      __HAL_RCC_PLL4CLKOUT_DISABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
10002b52:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002b56:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10002b5a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002b5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
10002b62:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
      /* Disable the PLL4. */
      __HAL_RCC_PLL4_DISABLE();
10002b66:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002b6a:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10002b6e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002b72:	f023 0301 	bic.w	r3, r3, #1
10002b76:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10002b7a:	f7fd febb 	bl	100008f4 <HAL_GetTick>
10002b7e:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
10002b80:	e008      	b.n	10002b94 <RCCEx_PLL4_Config+0x290>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10002b82:	f7fd feb7 	bl	100008f4 <HAL_GetTick>
10002b86:	4602      	mov	r2, r0
10002b88:	68fb      	ldr	r3, [r7, #12]
10002b8a:	1ad3      	subs	r3, r2, r3
10002b8c:	2b64      	cmp	r3, #100	@ 0x64
10002b8e:	d901      	bls.n	10002b94 <RCCEx_PLL4_Config+0x290>
        {
          return HAL_TIMEOUT;
10002b90:	2303      	movs	r3, #3
10002b92:	e008      	b.n	10002ba6 <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
10002b94:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002b98:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10002b9c:	f003 0302 	and.w	r3, r3, #2
10002ba0:	2b02      	cmp	r3, #2
10002ba2:	d0ee      	beq.n	10002b82 <RCCEx_PLL4_Config+0x27e>
        }
      }
    }
  }
  return HAL_OK;
10002ba4:	2300      	movs	r3, #0
}
10002ba6:	4618      	mov	r0, r3
10002ba8:	3710      	adds	r7, #16
10002baa:	46bd      	mov	sp, r7
10002bac:	bd80      	pop	{r7, pc}
10002bae:	bf00      	nop
10002bb0:	ffc0fe00 	.word	0xffc0fe00

10002bb4 <HAL_RCCEx_PeriphCLKConfig>:
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef
                                            *PeriphClkInit)
{
10002bb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
10002bb8:	f5ad 7d12 	sub.w	sp, sp, #584	@ 0x248
10002bbc:	af00      	add	r7, sp, #0
10002bbe:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10002bc2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10002bc6:	6018      	str	r0, [r3, #0]
  uint32_t tmpreg = 0, RESERVED_BDCR_MASK = 0;
10002bc8:	2300      	movs	r3, #0
10002bca:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
10002bce:	2300      	movs	r3, #0
10002bd0:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
10002bd4:	2300      	movs	r3, #0
10002bd6:	f887 3247 	strb.w	r3, [r7, #583]	@ 0x247
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
10002bda:	2300      	movs	r3, #0
10002bdc:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- CKPER configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) ==
10002be0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10002be4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10002be8:	681b      	ldr	r3, [r3, #0]
10002bea:	e9d3 2300 	ldrd	r2, r3, [r3]
10002bee:	f402 0400 	and.w	r4, r2, #8388608	@ 0x800000
10002bf2:	2500      	movs	r5, #0
10002bf4:	ea54 0305 	orrs.w	r3, r4, r5
10002bf8:	d011      	beq.n	10002c1e <HAL_RCCEx_PeriphCLKConfig+0x6a>
      RCC_PERIPHCLK_CKPER)
  {
    /* Check the parameters */
    assert_param(IS_RCC_CKPERCLKSOURCE(PeriphClkInit->CkperClockSelection));

    __HAL_RCC_CKPER_CONFIG(PeriphClkInit->CkperClockSelection);
10002bfa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002bfe:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
10002c02:	f023 0103 	bic.w	r1, r3, #3
10002c06:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10002c0a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10002c0e:	681b      	ldr	r3, [r3, #0]
10002c10:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
10002c14:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002c18:	430b      	orrs	r3, r1
10002c1a:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
  }

  /*------------------------------ I2C12 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) &  RCC_PERIPHCLK_I2C12) ==
10002c1e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10002c22:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10002c26:	681b      	ldr	r3, [r3, #0]
10002c28:	e9d3 2300 	ldrd	r2, r3, [r3]
10002c2c:	f002 0810 	and.w	r8, r2, #16
10002c30:	f04f 0900 	mov.w	r9, #0
10002c34:	ea58 0309 	orrs.w	r3, r8, r9
10002c38:	d038      	beq.n	10002cac <HAL_RCCEx_PeriphCLKConfig+0xf8>
      RCC_PERIPHCLK_I2C12)
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C12CLKSOURCE(PeriphClkInit->I2c12ClockSelection));

    if ((PeriphClkInit->I2c12ClockSelection) == RCC_I2C12CLKSOURCE_PLL4)
10002c3a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10002c3e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10002c42:	681b      	ldr	r3, [r3, #0]
10002c44:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
10002c48:	2b01      	cmp	r3, #1
10002c4a:	d11d      	bne.n	10002c88 <HAL_RCCEx_PeriphCLKConfig+0xd4>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10002c4c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10002c50:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10002c54:	681b      	ldr	r3, [r3, #0]
10002c56:	3380      	adds	r3, #128	@ 0x80
10002c58:	4618      	mov	r0, r3
10002c5a:	f7ff fe53 	bl	10002904 <RCCEx_PLL4_Config>
10002c5e:	4603      	mov	r3, r0
10002c60:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
10002c64:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10002c68:	2b00      	cmp	r3, #0
10002c6a:	d003      	beq.n	10002c74 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
        return status;
10002c6c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10002c70:	f001 be2a 	b.w	100048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10002c74:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002c78:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10002c7c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002c80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10002c84:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    __HAL_RCC_I2C12_CONFIG(PeriphClkInit->I2c12ClockSelection);
10002c88:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002c8c:	f8d3 38c0 	ldr.w	r3, [r3, #2240]	@ 0x8c0
10002c90:	f023 0107 	bic.w	r1, r3, #7
10002c94:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10002c98:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10002c9c:	681b      	ldr	r3, [r3, #0]
10002c9e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
10002ca2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002ca6:	430b      	orrs	r3, r1
10002ca8:	f8c2 38c0 	str.w	r3, [r2, #2240]	@ 0x8c0
  }

  /*------------------------------ I2C35 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) &  RCC_PERIPHCLK_I2C35) ==
10002cac:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10002cb0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10002cb4:	681b      	ldr	r3, [r3, #0]
10002cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
10002cba:	f002 0a20 	and.w	sl, r2, #32
10002cbe:	f04f 0b00 	mov.w	fp, #0
10002cc2:	ea5a 030b 	orrs.w	r3, sl, fp
10002cc6:	d038      	beq.n	10002d3a <HAL_RCCEx_PeriphCLKConfig+0x186>
      RCC_PERIPHCLK_I2C35)
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C35CLKSOURCE(PeriphClkInit->I2c35ClockSelection));

    if ((PeriphClkInit->I2c35ClockSelection) == RCC_I2C35CLKSOURCE_PLL4)
10002cc8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10002ccc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10002cd0:	681b      	ldr	r3, [r3, #0]
10002cd2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
10002cd6:	2b01      	cmp	r3, #1
10002cd8:	d11d      	bne.n	10002d16 <HAL_RCCEx_PeriphCLKConfig+0x162>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10002cda:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10002cde:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10002ce2:	681b      	ldr	r3, [r3, #0]
10002ce4:	3380      	adds	r3, #128	@ 0x80
10002ce6:	4618      	mov	r0, r3
10002ce8:	f7ff fe0c 	bl	10002904 <RCCEx_PLL4_Config>
10002cec:	4603      	mov	r3, r0
10002cee:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
10002cf2:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10002cf6:	2b00      	cmp	r3, #0
10002cf8:	d003      	beq.n	10002d02 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        return status;
10002cfa:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10002cfe:	f001 bde3 	b.w	100048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10002d02:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002d06:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10002d0a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002d0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10002d12:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    __HAL_RCC_I2C35_CONFIG(PeriphClkInit->I2c35ClockSelection);
10002d16:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002d1a:	f8d3 38c4 	ldr.w	r3, [r3, #2244]	@ 0x8c4
10002d1e:	f023 0107 	bic.w	r1, r3, #7
10002d22:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10002d26:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10002d2a:	681b      	ldr	r3, [r3, #0]
10002d2c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
10002d30:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002d34:	430b      	orrs	r3, r1
10002d36:	f8c2 38c4 	str.w	r3, [r2, #2244]	@ 0x8c4
  }

  /*------------------------------ I2C46 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C46) ==
10002d3a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10002d3e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10002d42:	681b      	ldr	r3, [r3, #0]
10002d44:	e9d3 2300 	ldrd	r2, r3, [r3]
10002d48:	2100      	movs	r1, #0
10002d4a:	f8c7 1110 	str.w	r1, [r7, #272]	@ 0x110
10002d4e:	f003 0320 	and.w	r3, r3, #32
10002d52:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
10002d56:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
10002d5a:	460b      	mov	r3, r1
10002d5c:	4313      	orrs	r3, r2
10002d5e:	d038      	beq.n	10002dd2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      RCC_PERIPHCLK_I2C46)
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C46CLKSOURCE(PeriphClkInit->I2c46ClockSelection));

    if ((PeriphClkInit->I2c46ClockSelection) == RCC_I2C46CLKSOURCE_PLL3)
10002d60:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10002d64:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10002d68:	681b      	ldr	r3, [r3, #0]
10002d6a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
10002d6e:	2b01      	cmp	r3, #1
10002d70:	d11d      	bne.n	10002dae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10002d72:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10002d76:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10002d7a:	681b      	ldr	r3, [r3, #0]
10002d7c:	3344      	adds	r3, #68	@ 0x44
10002d7e:	4618      	mov	r0, r3
10002d80:	f7ff fc56 	bl	10002630 <RCCEx_PLL3_Config>
10002d84:	4603      	mov	r3, r0
10002d86:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
10002d8a:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10002d8e:	2b00      	cmp	r3, #0
10002d90:	d003      	beq.n	10002d9a <HAL_RCCEx_PeriphCLKConfig+0x1e6>
      {
        return status;
10002d92:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10002d96:	f001 bd97 	b.w	100048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10002d9a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002d9e:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10002da2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002da6:	f043 0320 	orr.w	r3, r3, #32
10002daa:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880
    }

    __HAL_RCC_I2C46_CONFIG(PeriphClkInit->I2c46ClockSelection);
10002dae:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002db2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
10002db6:	f023 0107 	bic.w	r1, r3, #7
10002dba:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10002dbe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10002dc2:	681b      	ldr	r3, [r3, #0]
10002dc4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
10002dc8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002dcc:	430b      	orrs	r3, r1
10002dce:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
  }

  /*---------------------------- SAI1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) ==
10002dd2:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10002dd6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10002dda:	681b      	ldr	r3, [r3, #0]
10002ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
10002de0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
10002de4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
10002de8:	2300      	movs	r3, #0
10002dea:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
10002dee:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
10002df2:	460b      	mov	r3, r1
10002df4:	4313      	orrs	r3, r2
10002df6:	d07e      	beq.n	10002ef6 <HAL_RCCEx_PeriphCLKConfig+0x342>
      RCC_PERIPHCLK_SAI1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
10002df8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10002dfc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10002e00:	681b      	ldr	r3, [r3, #0]
10002e02:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
10002e06:	2b04      	cmp	r3, #4
10002e08:	d044      	beq.n	10002e94 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
10002e0a:	2b04      	cmp	r3, #4
10002e0c:	d861      	bhi.n	10002ed2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
10002e0e:	2b00      	cmp	r3, #0
10002e10:	d002      	beq.n	10002e18 <HAL_RCCEx_PeriphCLKConfig+0x264>
10002e12:	2b01      	cmp	r3, #1
10002e14:	d01f      	beq.n	10002e56 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
10002e16:	e05c      	b.n	10002ed2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    {
      case RCC_SAI1CLKSOURCE_PLL4:  /* PLL4 is used as clock source for SAI1*/

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10002e18:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10002e1c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10002e20:	681b      	ldr	r3, [r3, #0]
10002e22:	3380      	adds	r3, #128	@ 0x80
10002e24:	4618      	mov	r0, r3
10002e26:	f7ff fd6d 	bl	10002904 <RCCEx_PLL4_Config>
10002e2a:	4603      	mov	r3, r0
10002e2c:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10002e30:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10002e34:	2b00      	cmp	r3, #0
10002e36:	d003      	beq.n	10002e40 <HAL_RCCEx_PeriphCLKConfig+0x28c>
        {
          return status;
10002e38:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10002e3c:	f001 bd44 	b.w	100048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10002e40:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002e44:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10002e48:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002e4c:	f043 0320 	orr.w	r3, r3, #32
10002e50:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10002e54:	e03d      	b.n	10002ed2 <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL3_Q:  /* PLL3_Q is used as clock source for SAI1*/

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10002e56:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10002e5a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10002e5e:	681b      	ldr	r3, [r3, #0]
10002e60:	3344      	adds	r3, #68	@ 0x44
10002e62:	4618      	mov	r0, r3
10002e64:	f7ff fbe4 	bl	10002630 <RCCEx_PLL3_Config>
10002e68:	4603      	mov	r3, r0
10002e6a:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10002e6e:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10002e72:	2b00      	cmp	r3, #0
10002e74:	d003      	beq.n	10002e7e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
        {
          return status;
10002e76:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10002e7a:	f001 bd25 	b.w	100048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */

        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10002e7e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002e82:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10002e86:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002e8a:	f043 0320 	orr.w	r3, r3, #32
10002e8e:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10002e92:	e01e      	b.n	10002ed2 <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL3_R:  /* PLL3_R is used as clock source for SAI1*/

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10002e94:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10002e98:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10002e9c:	681b      	ldr	r3, [r3, #0]
10002e9e:	3344      	adds	r3, #68	@ 0x44
10002ea0:	4618      	mov	r0, r3
10002ea2:	f7ff fbc5 	bl	10002630 <RCCEx_PLL3_Config>
10002ea6:	4603      	mov	r3, r0
10002ea8:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10002eac:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10002eb0:	2b00      	cmp	r3, #0
10002eb2:	d003      	beq.n	10002ebc <HAL_RCCEx_PeriphCLKConfig+0x308>
        {
          return status;
10002eb4:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10002eb8:	f001 bd06 	b.w	100048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */

        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10002ebc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002ec0:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10002ec4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002ec8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10002ecc:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10002ed0:	bf00      	nop
    }

    /* Set the source of SAI1 clock*/
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
10002ed2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002ed6:	f8d3 38c8 	ldr.w	r3, [r3, #2248]	@ 0x8c8
10002eda:	f023 0107 	bic.w	r1, r3, #7
10002ede:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10002ee2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10002ee6:	681b      	ldr	r3, [r3, #0]
10002ee8:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
10002eec:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002ef0:	430b      	orrs	r3, r1
10002ef2:	f8c2 38c8 	str.w	r3, [r2, #2248]	@ 0x8c8
  }

  /*---------------------------- SAI2 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) ==
10002ef6:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10002efa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10002efe:	681b      	ldr	r3, [r3, #0]
10002f00:	e9d3 2300 	ldrd	r2, r3, [r3]
10002f04:	f402 7380 	and.w	r3, r2, #256	@ 0x100
10002f08:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
10002f0c:	2300      	movs	r3, #0
10002f0e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
10002f12:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
10002f16:	460b      	mov	r3, r1
10002f18:	4313      	orrs	r3, r2
10002f1a:	d07e      	beq.n	1000301a <HAL_RCCEx_PeriphCLKConfig+0x466>
      RCC_PERIPHCLK_SAI2)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
10002f1c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10002f20:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10002f24:	681b      	ldr	r3, [r3, #0]
10002f26:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
10002f2a:	2b05      	cmp	r3, #5
10002f2c:	d044      	beq.n	10002fb8 <HAL_RCCEx_PeriphCLKConfig+0x404>
10002f2e:	2b05      	cmp	r3, #5
10002f30:	d861      	bhi.n	10002ff6 <HAL_RCCEx_PeriphCLKConfig+0x442>
10002f32:	2b00      	cmp	r3, #0
10002f34:	d002      	beq.n	10002f3c <HAL_RCCEx_PeriphCLKConfig+0x388>
10002f36:	2b01      	cmp	r3, #1
10002f38:	d01f      	beq.n	10002f7a <HAL_RCCEx_PeriphCLKConfig+0x3c6>
10002f3a:	e05c      	b.n	10002ff6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      case RCC_SAI2CLKSOURCE_PLL4:  /* PLL4 is used as clock source for SAI2*/

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10002f3c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10002f40:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10002f44:	681b      	ldr	r3, [r3, #0]
10002f46:	3380      	adds	r3, #128	@ 0x80
10002f48:	4618      	mov	r0, r3
10002f4a:	f7ff fcdb 	bl	10002904 <RCCEx_PLL4_Config>
10002f4e:	4603      	mov	r3, r0
10002f50:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10002f54:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10002f58:	2b00      	cmp	r3, #0
10002f5a:	d003      	beq.n	10002f64 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        {
          return status;
10002f5c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10002f60:	f001 bcb2 	b.w	100048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10002f64:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002f68:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10002f6c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002f70:	f043 0320 	orr.w	r3, r3, #32
10002f74:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10002f78:	e03d      	b.n	10002ff6 <HAL_RCCEx_PeriphCLKConfig+0x442>

      case RCC_SAI2CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SAI2 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10002f7a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10002f7e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10002f82:	681b      	ldr	r3, [r3, #0]
10002f84:	3344      	adds	r3, #68	@ 0x44
10002f86:	4618      	mov	r0, r3
10002f88:	f7ff fb52 	bl	10002630 <RCCEx_PLL3_Config>
10002f8c:	4603      	mov	r3, r0
10002f8e:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10002f92:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10002f96:	2b00      	cmp	r3, #0
10002f98:	d003      	beq.n	10002fa2 <HAL_RCCEx_PeriphCLKConfig+0x3ee>
        {
          return status;
10002f9a:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10002f9e:	f001 bc93 	b.w	100048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10002fa2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002fa6:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10002faa:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002fae:	f043 0320 	orr.w	r3, r3, #32
10002fb2:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10002fb6:	e01e      	b.n	10002ff6 <HAL_RCCEx_PeriphCLKConfig+0x442>

      case RCC_SAI2CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SAI2 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10002fb8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10002fbc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10002fc0:	681b      	ldr	r3, [r3, #0]
10002fc2:	3344      	adds	r3, #68	@ 0x44
10002fc4:	4618      	mov	r0, r3
10002fc6:	f7ff fb33 	bl	10002630 <RCCEx_PLL3_Config>
10002fca:	4603      	mov	r3, r0
10002fcc:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10002fd0:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10002fd4:	2b00      	cmp	r3, #0
10002fd6:	d003      	beq.n	10002fe0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
        {
          return status;
10002fd8:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10002fdc:	f001 bc74 	b.w	100048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10002fe0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002fe4:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10002fe8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002fec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10002ff0:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10002ff4:	bf00      	nop
    }

    /* Set the source of SAI2 clock*/
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
10002ff6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002ffa:	f8d3 38cc 	ldr.w	r3, [r3, #2252]	@ 0x8cc
10002ffe:	f023 0107 	bic.w	r1, r3, #7
10003002:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003006:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000300a:	681b      	ldr	r3, [r3, #0]
1000300c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
10003010:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003014:	430b      	orrs	r3, r1
10003016:	f8c2 38cc 	str.w	r3, [r2, #2252]	@ 0x8cc
  }

  /*---------------------------- SAI3 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI3) ==
1000301a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000301e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003022:	681b      	ldr	r3, [r3, #0]
10003024:	e9d3 2300 	ldrd	r2, r3, [r3]
10003028:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
1000302c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
10003030:	2300      	movs	r3, #0
10003032:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
10003036:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
1000303a:	460b      	mov	r3, r1
1000303c:	4313      	orrs	r3, r2
1000303e:	d07e      	beq.n	1000313e <HAL_RCCEx_PeriphCLKConfig+0x58a>
      RCC_PERIPHCLK_SAI3)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI3CLKSOURCE(PeriphClkInit->Sai3ClockSelection));

    switch (PeriphClkInit->Sai3ClockSelection)
10003040:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003044:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003048:	681b      	ldr	r3, [r3, #0]
1000304a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
1000304e:	2b04      	cmp	r3, #4
10003050:	d044      	beq.n	100030dc <HAL_RCCEx_PeriphCLKConfig+0x528>
10003052:	2b04      	cmp	r3, #4
10003054:	d861      	bhi.n	1000311a <HAL_RCCEx_PeriphCLKConfig+0x566>
10003056:	2b00      	cmp	r3, #0
10003058:	d002      	beq.n	10003060 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
1000305a:	2b01      	cmp	r3, #1
1000305c:	d01f      	beq.n	1000309e <HAL_RCCEx_PeriphCLKConfig+0x4ea>
1000305e:	e05c      	b.n	1000311a <HAL_RCCEx_PeriphCLKConfig+0x566>
    {
      case RCC_SAI3CLKSOURCE_PLL4: /* PLL4 is used as clock source for SAI3*/

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003060:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003064:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003068:	681b      	ldr	r3, [r3, #0]
1000306a:	3380      	adds	r3, #128	@ 0x80
1000306c:	4618      	mov	r0, r3
1000306e:	f7ff fc49 	bl	10002904 <RCCEx_PLL4_Config>
10003072:	4603      	mov	r3, r0
10003074:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10003078:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000307c:	2b00      	cmp	r3, #0
1000307e:	d003      	beq.n	10003088 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
        {
          return status;
10003080:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003084:	f001 bc20 	b.w	100048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10003088:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000308c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10003090:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003094:	f043 0320 	orr.w	r3, r3, #32
10003098:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
1000309c:	e03d      	b.n	1000311a <HAL_RCCEx_PeriphCLKConfig+0x566>

      case RCC_SAI3CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SAI3 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000309e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100030a2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100030a6:	681b      	ldr	r3, [r3, #0]
100030a8:	3344      	adds	r3, #68	@ 0x44
100030aa:	4618      	mov	r0, r3
100030ac:	f7ff fac0 	bl	10002630 <RCCEx_PLL3_Config>
100030b0:	4603      	mov	r3, r0
100030b2:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
100030b6:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100030ba:	2b00      	cmp	r3, #0
100030bc:	d003      	beq.n	100030c6 <HAL_RCCEx_PeriphCLKConfig+0x512>
        {
          return status;
100030be:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100030c2:	f001 bc01 	b.w	100048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
100030c6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100030ca:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100030ce:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100030d2:	f043 0320 	orr.w	r3, r3, #32
100030d6:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
100030da:	e01e      	b.n	1000311a <HAL_RCCEx_PeriphCLKConfig+0x566>

      case RCC_SAI3CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SAI3 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100030dc:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100030e0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100030e4:	681b      	ldr	r3, [r3, #0]
100030e6:	3344      	adds	r3, #68	@ 0x44
100030e8:	4618      	mov	r0, r3
100030ea:	f7ff faa1 	bl	10002630 <RCCEx_PLL3_Config>
100030ee:	4603      	mov	r3, r0
100030f0:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
100030f4:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100030f8:	2b00      	cmp	r3, #0
100030fa:	d003      	beq.n	10003104 <HAL_RCCEx_PeriphCLKConfig+0x550>
        {
          return status;
100030fc:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003100:	f001 bbe2 	b.w	100048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10003104:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003108:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
1000310c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003110:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10003114:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10003118:	bf00      	nop
    }

    /* Set the source of SAI3 clock*/
    __HAL_RCC_SAI3_CONFIG(PeriphClkInit->Sai3ClockSelection);
1000311a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000311e:	f8d3 38d0 	ldr.w	r3, [r3, #2256]	@ 0x8d0
10003122:	f023 0107 	bic.w	r1, r3, #7
10003126:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000312a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000312e:	681b      	ldr	r3, [r3, #0]
10003130:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
10003134:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003138:	430b      	orrs	r3, r1
1000313a:	f8c2 38d0 	str.w	r3, [r2, #2256]	@ 0x8d0
  }

  /*---------------------------- SAI4 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4) ==
1000313e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003142:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003146:	681b      	ldr	r3, [r3, #0]
10003148:	e9d3 2300 	ldrd	r2, r3, [r3]
1000314c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
10003150:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
10003154:	2300      	movs	r3, #0
10003156:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
1000315a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
1000315e:	460b      	mov	r3, r1
10003160:	4313      	orrs	r3, r2
10003162:	d07e      	beq.n	10003262 <HAL_RCCEx_PeriphCLKConfig+0x6ae>
      RCC_PERIPHCLK_SAI4)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI4CLKSOURCE(PeriphClkInit->Sai4ClockSelection));

    switch (PeriphClkInit->Sai4ClockSelection)
10003164:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003168:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000316c:	681b      	ldr	r3, [r3, #0]
1000316e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
10003172:	2b04      	cmp	r3, #4
10003174:	d044      	beq.n	10003200 <HAL_RCCEx_PeriphCLKConfig+0x64c>
10003176:	2b04      	cmp	r3, #4
10003178:	d861      	bhi.n	1000323e <HAL_RCCEx_PeriphCLKConfig+0x68a>
1000317a:	2b00      	cmp	r3, #0
1000317c:	d002      	beq.n	10003184 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
1000317e:	2b01      	cmp	r3, #1
10003180:	d01f      	beq.n	100031c2 <HAL_RCCEx_PeriphCLKConfig+0x60e>
10003182:	e05c      	b.n	1000323e <HAL_RCCEx_PeriphCLKConfig+0x68a>
    {
      case RCC_SAI4CLKSOURCE_PLL4: /* PLL4 is used as clock source for SAI4 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003184:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003188:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000318c:	681b      	ldr	r3, [r3, #0]
1000318e:	3380      	adds	r3, #128	@ 0x80
10003190:	4618      	mov	r0, r3
10003192:	f7ff fbb7 	bl	10002904 <RCCEx_PLL4_Config>
10003196:	4603      	mov	r3, r0
10003198:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
1000319c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100031a0:	2b00      	cmp	r3, #0
100031a2:	d003      	beq.n	100031ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>
        {
          return status;
100031a4:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100031a8:	f001 bb8e 	b.w	100048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
100031ac:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100031b0:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100031b4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100031b8:	f043 0320 	orr.w	r3, r3, #32
100031bc:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
100031c0:	e03d      	b.n	1000323e <HAL_RCCEx_PeriphCLKConfig+0x68a>


      case RCC_SAI4CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SAI4 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100031c2:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100031c6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100031ca:	681b      	ldr	r3, [r3, #0]
100031cc:	3344      	adds	r3, #68	@ 0x44
100031ce:	4618      	mov	r0, r3
100031d0:	f7ff fa2e 	bl	10002630 <RCCEx_PLL3_Config>
100031d4:	4603      	mov	r3, r0
100031d6:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
100031da:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100031de:	2b00      	cmp	r3, #0
100031e0:	d003      	beq.n	100031ea <HAL_RCCEx_PeriphCLKConfig+0x636>
        {
          return status;
100031e2:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100031e6:	f001 bb6f 	b.w	100048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3_Q */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
100031ea:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100031ee:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100031f2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100031f6:	f043 0320 	orr.w	r3, r3, #32
100031fa:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
100031fe:	e01e      	b.n	1000323e <HAL_RCCEx_PeriphCLKConfig+0x68a>

      case RCC_SAI4CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SAI4 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003200:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003204:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003208:	681b      	ldr	r3, [r3, #0]
1000320a:	3344      	adds	r3, #68	@ 0x44
1000320c:	4618      	mov	r0, r3
1000320e:	f7ff fa0f 	bl	10002630 <RCCEx_PLL3_Config>
10003212:	4603      	mov	r3, r0
10003214:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10003218:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000321c:	2b00      	cmp	r3, #0
1000321e:	d003      	beq.n	10003228 <HAL_RCCEx_PeriphCLKConfig+0x674>
        {
          return status;
10003220:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003224:	f001 bb50 	b.w	100048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3_R */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10003228:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000322c:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10003230:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003234:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10003238:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
1000323c:	bf00      	nop
    }

    /* Set the source of SAI4 clock*/
    __HAL_RCC_SAI4_CONFIG(PeriphClkInit->Sai4ClockSelection);
1000323e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003242:	f8d3 38d4 	ldr.w	r3, [r3, #2260]	@ 0x8d4
10003246:	f023 0107 	bic.w	r1, r3, #7
1000324a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000324e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003252:	681b      	ldr	r3, [r3, #0]
10003254:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
10003258:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000325c:	430b      	orrs	r3, r1
1000325e:	f8c2 38d4 	str.w	r3, [r2, #2260]	@ 0x8d4
  }

  /*---------------------------- SPI1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) ==
10003262:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003266:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000326a:	681b      	ldr	r3, [r3, #0]
1000326c:	e9d3 2300 	ldrd	r2, r3, [r3]
10003270:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
10003274:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
10003278:	2300      	movs	r3, #0
1000327a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
1000327e:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
10003282:	460b      	mov	r3, r1
10003284:	4313      	orrs	r3, r2
10003286:	d07e      	beq.n	10003386 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
      RCC_PERIPHCLK_SPI1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(PeriphClkInit->Spi1ClockSelection));

    switch (PeriphClkInit->Spi1ClockSelection)
10003288:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000328c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003290:	681b      	ldr	r3, [r3, #0]
10003292:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
10003296:	2b04      	cmp	r3, #4
10003298:	d044      	beq.n	10003324 <HAL_RCCEx_PeriphCLKConfig+0x770>
1000329a:	2b04      	cmp	r3, #4
1000329c:	d861      	bhi.n	10003362 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
1000329e:	2b00      	cmp	r3, #0
100032a0:	d002      	beq.n	100032a8 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
100032a2:	2b01      	cmp	r3, #1
100032a4:	d01f      	beq.n	100032e6 <HAL_RCCEx_PeriphCLKConfig+0x732>
100032a6:	e05c      	b.n	10003362 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      case RCC_SPI1CLKSOURCE_PLL4: /* PLL4 is used as clock source for SPI1 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100032a8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100032ac:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100032b0:	681b      	ldr	r3, [r3, #0]
100032b2:	3380      	adds	r3, #128	@ 0x80
100032b4:	4618      	mov	r0, r3
100032b6:	f7ff fb25 	bl	10002904 <RCCEx_PLL4_Config>
100032ba:	4603      	mov	r3, r0
100032bc:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
100032c0:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100032c4:	2b00      	cmp	r3, #0
100032c6:	d003      	beq.n	100032d0 <HAL_RCCEx_PeriphCLKConfig+0x71c>
        {
          return status;
100032c8:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100032cc:	f001 bafc 	b.w	100048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
100032d0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100032d4:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100032d8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100032dc:	f043 0310 	orr.w	r3, r3, #16
100032e0:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
100032e4:	e03d      	b.n	10003362 <HAL_RCCEx_PeriphCLKConfig+0x7ae>

      case RCC_SPI1CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SPI1*/

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100032e6:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100032ea:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100032ee:	681b      	ldr	r3, [r3, #0]
100032f0:	3344      	adds	r3, #68	@ 0x44
100032f2:	4618      	mov	r0, r3
100032f4:	f7ff f99c 	bl	10002630 <RCCEx_PLL3_Config>
100032f8:	4603      	mov	r3, r0
100032fa:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
100032fe:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003302:	2b00      	cmp	r3, #0
10003304:	d003      	beq.n	1000330e <HAL_RCCEx_PeriphCLKConfig+0x75a>
        {
          return status;
10003306:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000330a:	f001 badd 	b.w	100048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
1000330e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003312:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10003316:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000331a:	f043 0320 	orr.w	r3, r3, #32
1000331e:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10003322:	e01e      	b.n	10003362 <HAL_RCCEx_PeriphCLKConfig+0x7ae>

      case RCC_SPI1CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SPI1 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003324:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003328:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000332c:	681b      	ldr	r3, [r3, #0]
1000332e:	3344      	adds	r3, #68	@ 0x44
10003330:	4618      	mov	r0, r3
10003332:	f7ff f97d 	bl	10002630 <RCCEx_PLL3_Config>
10003336:	4603      	mov	r3, r0
10003338:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
1000333c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003340:	2b00      	cmp	r3, #0
10003342:	d003      	beq.n	1000334c <HAL_RCCEx_PeriphCLKConfig+0x798>
        {
          return status;
10003344:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003348:	f001 babe 	b.w	100048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
1000334c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003350:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10003354:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003358:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
1000335c:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10003360:	bf00      	nop

    }

    /* Set the source of SPI1 clock*/
    __HAL_RCC_SPI1_CONFIG(PeriphClkInit->Spi1ClockSelection);
10003362:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003366:	f8d3 38d8 	ldr.w	r3, [r3, #2264]	@ 0x8d8
1000336a:	f023 0107 	bic.w	r1, r3, #7
1000336e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003372:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003376:	681b      	ldr	r3, [r3, #0]
10003378:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
1000337c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003380:	430b      	orrs	r3, r1
10003382:	f8c2 38d8 	str.w	r3, [r2, #2264]	@ 0x8d8
  }

  /*---------------------------- SPI23 configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI23) ==
10003386:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000338a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000338e:	681b      	ldr	r3, [r3, #0]
10003390:	e9d3 2300 	ldrd	r2, r3, [r3]
10003394:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
10003398:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
1000339c:	2300      	movs	r3, #0
1000339e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
100033a2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
100033a6:	460b      	mov	r3, r1
100033a8:	4313      	orrs	r3, r2
100033aa:	d07e      	beq.n	100034aa <HAL_RCCEx_PeriphCLKConfig+0x8f6>
      RCC_PERIPHCLK_SPI23)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI23CLKSOURCE(PeriphClkInit->Spi23ClockSelection));

    switch (PeriphClkInit->Spi23ClockSelection)
100033ac:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100033b0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100033b4:	681b      	ldr	r3, [r3, #0]
100033b6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
100033ba:	2b04      	cmp	r3, #4
100033bc:	d044      	beq.n	10003448 <HAL_RCCEx_PeriphCLKConfig+0x894>
100033be:	2b04      	cmp	r3, #4
100033c0:	d861      	bhi.n	10003486 <HAL_RCCEx_PeriphCLKConfig+0x8d2>
100033c2:	2b00      	cmp	r3, #0
100033c4:	d002      	beq.n	100033cc <HAL_RCCEx_PeriphCLKConfig+0x818>
100033c6:	2b01      	cmp	r3, #1
100033c8:	d01f      	beq.n	1000340a <HAL_RCCEx_PeriphCLKConfig+0x856>
100033ca:	e05c      	b.n	10003486 <HAL_RCCEx_PeriphCLKConfig+0x8d2>
    {
      case RCC_SPI23CLKSOURCE_PLL4: /* PLL4 is used as clock source for SPI23 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100033cc:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100033d0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100033d4:	681b      	ldr	r3, [r3, #0]
100033d6:	3380      	adds	r3, #128	@ 0x80
100033d8:	4618      	mov	r0, r3
100033da:	f7ff fa93 	bl	10002904 <RCCEx_PLL4_Config>
100033de:	4603      	mov	r3, r0
100033e0:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
100033e4:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100033e8:	2b00      	cmp	r3, #0
100033ea:	d003      	beq.n	100033f4 <HAL_RCCEx_PeriphCLKConfig+0x840>
        {
          return status;
100033ec:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100033f0:	f001 ba6a 	b.w	100048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
100033f4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100033f8:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100033fc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003400:	f043 0310 	orr.w	r3, r3, #16
10003404:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10003408:	e03d      	b.n	10003486 <HAL_RCCEx_PeriphCLKConfig+0x8d2>

      case RCC_SPI23CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SPI23 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000340a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000340e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003412:	681b      	ldr	r3, [r3, #0]
10003414:	3344      	adds	r3, #68	@ 0x44
10003416:	4618      	mov	r0, r3
10003418:	f7ff f90a 	bl	10002630 <RCCEx_PLL3_Config>
1000341c:	4603      	mov	r3, r0
1000341e:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10003422:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003426:	2b00      	cmp	r3, #0
10003428:	d003      	beq.n	10003432 <HAL_RCCEx_PeriphCLKConfig+0x87e>
        {
          return status;
1000342a:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000342e:	f001 ba4b 	b.w	100048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10003432:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003436:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
1000343a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000343e:	f043 0320 	orr.w	r3, r3, #32
10003442:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10003446:	e01e      	b.n	10003486 <HAL_RCCEx_PeriphCLKConfig+0x8d2>

      case RCC_SPI23CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SPI23 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003448:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000344c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003450:	681b      	ldr	r3, [r3, #0]
10003452:	3344      	adds	r3, #68	@ 0x44
10003454:	4618      	mov	r0, r3
10003456:	f7ff f8eb 	bl	10002630 <RCCEx_PLL3_Config>
1000345a:	4603      	mov	r3, r0
1000345c:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10003460:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003464:	2b00      	cmp	r3, #0
10003466:	d003      	beq.n	10003470 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
        {
          return status;
10003468:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000346c:	f001 ba2c 	b.w	100048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10003470:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003474:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10003478:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000347c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10003480:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10003484:	bf00      	nop
    }

    /* Set the source of SPI2 clock*/
    __HAL_RCC_SPI23_CONFIG(PeriphClkInit->Spi23ClockSelection);
10003486:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000348a:	f8d3 38dc 	ldr.w	r3, [r3, #2268]	@ 0x8dc
1000348e:	f023 0107 	bic.w	r1, r3, #7
10003492:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003496:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000349a:	681b      	ldr	r3, [r3, #0]
1000349c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
100034a0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100034a4:	430b      	orrs	r3, r1
100034a6:	f8c2 38dc 	str.w	r3, [r2, #2268]	@ 0x8dc
  }

  /*---------------------------- SPI45 configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) ==
100034aa:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100034ae:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100034b2:	681b      	ldr	r3, [r3, #0]
100034b4:	e9d3 2300 	ldrd	r2, r3, [r3]
100034b8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
100034bc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
100034c0:	2300      	movs	r3, #0
100034c2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
100034c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
100034ca:	460b      	mov	r3, r1
100034cc:	4313      	orrs	r3, r2
100034ce:	d038      	beq.n	10003542 <HAL_RCCEx_PeriphCLKConfig+0x98e>
      RCC_PERIPHCLK_SPI45)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI45CLKSOURCE(PeriphClkInit->Spi45ClockSelection));

    if (PeriphClkInit->Spi45ClockSelection == RCC_SPI45CLKSOURCE_PLL4)
100034d0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100034d4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100034d8:	681b      	ldr	r3, [r3, #0]
100034da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
100034de:	2b01      	cmp	r3, #1
100034e0:	d11d      	bne.n	1000351e <HAL_RCCEx_PeriphCLKConfig+0x96a>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100034e2:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100034e6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100034ea:	681b      	ldr	r3, [r3, #0]
100034ec:	3380      	adds	r3, #128	@ 0x80
100034ee:	4618      	mov	r0, r3
100034f0:	f7ff fa08 	bl	10002904 <RCCEx_PLL4_Config>
100034f4:	4603      	mov	r3, r0
100034f6:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
100034fa:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100034fe:	2b00      	cmp	r3, #0
10003500:	d003      	beq.n	1000350a <HAL_RCCEx_PeriphCLKConfig+0x956>
      {
        return status;
10003502:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003506:	f001 b9df 	b.w	100048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable SPI Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
1000350a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000350e:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10003512:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003516:	f043 0320 	orr.w	r3, r3, #32
1000351a:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    /* Set the source of SPI45 clock*/
    __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
1000351e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003522:	f8d3 38e0 	ldr.w	r3, [r3, #2272]	@ 0x8e0
10003526:	f023 0107 	bic.w	r1, r3, #7
1000352a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000352e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003532:	681b      	ldr	r3, [r3, #0]
10003534:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
10003538:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000353c:	430b      	orrs	r3, r1
1000353e:	f8c2 38e0 	str.w	r3, [r2, #2272]	@ 0x8e0
  }

  /*---------------------------- SPI6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) ==
10003542:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003546:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000354a:	681b      	ldr	r3, [r3, #0]
1000354c:	e9d3 2300 	ldrd	r2, r3, [r3]
10003550:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
10003554:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
10003558:	2300      	movs	r3, #0
1000355a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
1000355e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
10003562:	460b      	mov	r3, r1
10003564:	4313      	orrs	r3, r2
10003566:	d05b      	beq.n	10003620 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
      RCC_PERIPHCLK_SPI6)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(PeriphClkInit->Spi6ClockSelection));

    switch (PeriphClkInit->Spi6ClockSelection)
10003568:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000356c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003570:	681b      	ldr	r3, [r3, #0]
10003572:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
10003576:	2b01      	cmp	r3, #1
10003578:	d002      	beq.n	10003580 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
1000357a:	2b05      	cmp	r3, #5
1000357c:	d01f      	beq.n	100035be <HAL_RCCEx_PeriphCLKConfig+0xa0a>
1000357e:	e03d      	b.n	100035fc <HAL_RCCEx_PeriphCLKConfig+0xa48>
    {
      case RCC_SPI6CLKSOURCE_PLL4: /* PLL4 is used as clock source for SPI6 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003580:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003584:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003588:	681b      	ldr	r3, [r3, #0]
1000358a:	3380      	adds	r3, #128	@ 0x80
1000358c:	4618      	mov	r0, r3
1000358e:	f7ff f9b9 	bl	10002904 <RCCEx_PLL4_Config>
10003592:	4603      	mov	r3, r0
10003594:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10003598:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000359c:	2b00      	cmp	r3, #0
1000359e:	d003      	beq.n	100035a8 <HAL_RCCEx_PeriphCLKConfig+0x9f4>
        {
          return status;
100035a0:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100035a4:	f001 b990 	b.w	100048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
100035a8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100035ac:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100035b0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100035b4:	f043 0320 	orr.w	r3, r3, #32
100035b8:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
100035bc:	e01e      	b.n	100035fc <HAL_RCCEx_PeriphCLKConfig+0xa48>

      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is used as clock source for SPI6 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100035be:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100035c2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100035c6:	681b      	ldr	r3, [r3, #0]
100035c8:	3344      	adds	r3, #68	@ 0x44
100035ca:	4618      	mov	r0, r3
100035cc:	f7ff f830 	bl	10002630 <RCCEx_PLL3_Config>
100035d0:	4603      	mov	r3, r0
100035d2:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
100035d6:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100035da:	2b00      	cmp	r3, #0
100035dc:	d003      	beq.n	100035e6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        {
          return status;
100035de:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100035e2:	f001 b971 	b.w	100048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
100035e6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100035ea:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100035ee:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100035f2:	f043 0320 	orr.w	r3, r3, #32
100035f6:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
100035fa:	bf00      	nop
    }

    /* Set the source of SPI6 clock*/
    __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
100035fc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003600:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
10003604:	f023 0107 	bic.w	r1, r3, #7
10003608:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000360c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003610:	681b      	ldr	r3, [r3, #0]
10003612:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
10003616:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000361a:	430b      	orrs	r3, r1
1000361c:	f8c2 30c4 	str.w	r3, [r2, #196]	@ 0xc4
  }

  /*---------------------------- USART6 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) ==
10003620:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003624:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003628:	681b      	ldr	r3, [r3, #0]
1000362a:	e9d3 2300 	ldrd	r2, r3, [r3]
1000362e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
10003632:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
10003636:	2300      	movs	r3, #0
10003638:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
1000363c:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
10003640:	460b      	mov	r3, r1
10003642:	4313      	orrs	r3, r2
10003644:	d038      	beq.n	100036b8 <HAL_RCCEx_PeriphCLKConfig+0xb04>
      RCC_PERIPHCLK_USART6)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_PLL4)
10003646:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000364a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000364e:	681b      	ldr	r3, [r3, #0]
10003650:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
10003654:	2b01      	cmp	r3, #1
10003656:	d11d      	bne.n	10003694 <HAL_RCCEx_PeriphCLKConfig+0xae0>
    {
      /* PLL4 is used as clock source for USART6 */
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003658:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000365c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003660:	681b      	ldr	r3, [r3, #0]
10003662:	3380      	adds	r3, #128	@ 0x80
10003664:	4618      	mov	r0, r3
10003666:	f7ff f94d 	bl	10002904 <RCCEx_PLL4_Config>
1000366a:	4603      	mov	r3, r0
1000366c:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
10003670:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003674:	2b00      	cmp	r3, #0
10003676:	d003      	beq.n	10003680 <HAL_RCCEx_PeriphCLKConfig+0xacc>
      {
        return status;
10003678:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000367c:	f001 b924 	b.w	100048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable USART Clock output generated on PLL4 */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10003680:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003684:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10003688:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000368c:	f043 0320 	orr.w	r3, r3, #32
10003690:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    /* Set the source of USART6 clock*/
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
10003694:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003698:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	@ 0x8e4
1000369c:	f023 0107 	bic.w	r1, r3, #7
100036a0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100036a4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100036a8:	681b      	ldr	r3, [r3, #0]
100036aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
100036ae:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100036b2:	430b      	orrs	r3, r1
100036b4:	f8c2 38e4 	str.w	r3, [r2, #2276]	@ 0x8e4
  }

  /*---------------------------- UART24 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART24) ==
100036b8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100036bc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100036c0:	681b      	ldr	r3, [r3, #0]
100036c2:	e9d3 2300 	ldrd	r2, r3, [r3]
100036c6:	f002 0302 	and.w	r3, r2, #2
100036ca:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
100036ce:	2300      	movs	r3, #0
100036d0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
100036d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
100036d8:	460b      	mov	r3, r1
100036da:	4313      	orrs	r3, r2
100036dc:	d038      	beq.n	10003750 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
      RCC_PERIPHCLK_UART24)
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART24CLKSOURCE(PeriphClkInit->Uart24ClockSelection));

    if (PeriphClkInit->Uart24ClockSelection == RCC_UART24CLKSOURCE_PLL4)
100036de:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100036e2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100036e6:	681b      	ldr	r3, [r3, #0]
100036e8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
100036ec:	2b01      	cmp	r3, #1
100036ee:	d11d      	bne.n	1000372c <HAL_RCCEx_PeriphCLKConfig+0xb78>
    {
      /* PLL4 is used as clock source for UART24 */
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100036f0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100036f4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100036f8:	681b      	ldr	r3, [r3, #0]
100036fa:	3380      	adds	r3, #128	@ 0x80
100036fc:	4618      	mov	r0, r3
100036fe:	f7ff f901 	bl	10002904 <RCCEx_PLL4_Config>
10003702:	4603      	mov	r3, r0
10003704:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
10003708:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000370c:	2b00      	cmp	r3, #0
1000370e:	d003      	beq.n	10003718 <HAL_RCCEx_PeriphCLKConfig+0xb64>
      {
        return status;
10003710:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003714:	f001 b8d8 	b.w	100048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable UART Clock output generated on PLL4 */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10003718:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000371c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10003720:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003724:	f043 0320 	orr.w	r3, r3, #32
10003728:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    /* Set the source of UART24 clock*/
    __HAL_RCC_UART24_CONFIG(PeriphClkInit->Uart24ClockSelection);
1000372c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003730:	f8d3 38e8 	ldr.w	r3, [r3, #2280]	@ 0x8e8
10003734:	f023 0107 	bic.w	r1, r3, #7
10003738:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000373c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003740:	681b      	ldr	r3, [r3, #0]
10003742:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
10003746:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000374a:	430b      	orrs	r3, r1
1000374c:	f8c2 38e8 	str.w	r3, [r2, #2280]	@ 0x8e8
  }

  /*---------------------------- UART35 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART35) ==
10003750:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003754:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003758:	681b      	ldr	r3, [r3, #0]
1000375a:	e9d3 2300 	ldrd	r2, r3, [r3]
1000375e:	f002 0304 	and.w	r3, r2, #4
10003762:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
10003766:	2300      	movs	r3, #0
10003768:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
1000376c:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
10003770:	460b      	mov	r3, r1
10003772:	4313      	orrs	r3, r2
10003774:	d038      	beq.n	100037e8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
      RCC_PERIPHCLK_UART35)
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART35CLKSOURCE(PeriphClkInit->Uart35ClockSelection));

    if (PeriphClkInit->Uart35ClockSelection == RCC_UART35CLKSOURCE_PLL4)
10003776:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000377a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000377e:	681b      	ldr	r3, [r3, #0]
10003780:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
10003784:	2b01      	cmp	r3, #1
10003786:	d11d      	bne.n	100037c4 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
      /* PLL4 is used as clock source for UART35 */
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003788:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000378c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003790:	681b      	ldr	r3, [r3, #0]
10003792:	3380      	adds	r3, #128	@ 0x80
10003794:	4618      	mov	r0, r3
10003796:	f7ff f8b5 	bl	10002904 <RCCEx_PLL4_Config>
1000379a:	4603      	mov	r3, r0
1000379c:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
100037a0:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100037a4:	2b00      	cmp	r3, #0
100037a6:	d003      	beq.n	100037b0 <HAL_RCCEx_PeriphCLKConfig+0xbfc>
      {
        return status;
100037a8:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100037ac:	f001 b88c 	b.w	100048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable UART Clock output generated on PLL4 */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
100037b0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100037b4:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100037b8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100037bc:	f043 0320 	orr.w	r3, r3, #32
100037c0:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    /* Set the source of UART35 clock*/
    __HAL_RCC_UART35_CONFIG(PeriphClkInit->Uart35ClockSelection);
100037c4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100037c8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
100037cc:	f023 0107 	bic.w	r1, r3, #7
100037d0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100037d4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100037d8:	681b      	ldr	r3, [r3, #0]
100037da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
100037de:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100037e2:	430b      	orrs	r3, r1
100037e4:	f8c2 38ec 	str.w	r3, [r2, #2284]	@ 0x8ec
  }

  /*---------------------------- UAUART78 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART78) ==
100037e8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100037ec:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100037f0:	681b      	ldr	r3, [r3, #0]
100037f2:	e9d3 2300 	ldrd	r2, r3, [r3]
100037f6:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
100037fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
100037fe:	2300      	movs	r3, #0
10003800:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
10003804:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
10003808:	460b      	mov	r3, r1
1000380a:	4313      	orrs	r3, r2
1000380c:	d038      	beq.n	10003880 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      RCC_PERIPHCLK_UART78)
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART78CLKSOURCE(PeriphClkInit->Uart78ClockSelection));

    if (PeriphClkInit->Uart78ClockSelection == RCC_UART78CLKSOURCE_PLL4)
1000380e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003812:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003816:	681b      	ldr	r3, [r3, #0]
10003818:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
1000381c:	2b01      	cmp	r3, #1
1000381e:	d11d      	bne.n	1000385c <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* PLL4 is used as clock source for UART78 */
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003820:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003824:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003828:	681b      	ldr	r3, [r3, #0]
1000382a:	3380      	adds	r3, #128	@ 0x80
1000382c:	4618      	mov	r0, r3
1000382e:	f7ff f869 	bl	10002904 <RCCEx_PLL4_Config>
10003832:	4603      	mov	r3, r0
10003834:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
10003838:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000383c:	2b00      	cmp	r3, #0
1000383e:	d003      	beq.n	10003848 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      {
        return status;
10003840:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003844:	f001 b840 	b.w	100048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable UART Clock output generated on PLL4 */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10003848:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000384c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10003850:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003854:	f043 0320 	orr.w	r3, r3, #32
10003858:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    /* Set the source of UART78 clock*/
    __HAL_RCC_UART78_CONFIG(PeriphClkInit->Uart78ClockSelection);
1000385c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003860:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	@ 0x8f0
10003864:	f023 0107 	bic.w	r1, r3, #7
10003868:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000386c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003870:	681b      	ldr	r3, [r3, #0]
10003872:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
10003876:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000387a:	430b      	orrs	r3, r1
1000387c:	f8c2 38f0 	str.w	r3, [r2, #2288]	@ 0x8f0
  }

  /*---------------------------- USART1 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) ==
10003880:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003884:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003888:	681b      	ldr	r3, [r3, #0]
1000388a:	e9d3 2300 	ldrd	r2, r3, [r3]
1000388e:	f002 0301 	and.w	r3, r2, #1
10003892:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
10003896:	2300      	movs	r3, #0
10003898:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
1000389c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
100038a0:	460b      	mov	r3, r1
100038a2:	4313      	orrs	r3, r2
100038a4:	d05b      	beq.n	1000395e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
      RCC_PERIPHCLK_USART1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    switch (PeriphClkInit->Usart1ClockSelection)
100038a6:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100038aa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100038ae:	681b      	ldr	r3, [r3, #0]
100038b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
100038b4:	2b01      	cmp	r3, #1
100038b6:	d002      	beq.n	100038be <HAL_RCCEx_PeriphCLKConfig+0xd0a>
100038b8:	2b04      	cmp	r3, #4
100038ba:	d01f      	beq.n	100038fc <HAL_RCCEx_PeriphCLKConfig+0xd48>
100038bc:	e03d      	b.n	1000393a <HAL_RCCEx_PeriphCLKConfig+0xd86>
    {
      case RCC_USART1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for USART1 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100038be:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100038c2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100038c6:	681b      	ldr	r3, [r3, #0]
100038c8:	3344      	adds	r3, #68	@ 0x44
100038ca:	4618      	mov	r0, r3
100038cc:	f7fe feb0 	bl	10002630 <RCCEx_PLL3_Config>
100038d0:	4603      	mov	r3, r0
100038d2:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
100038d6:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100038da:	2b00      	cmp	r3, #0
100038dc:	d003      	beq.n	100038e6 <HAL_RCCEx_PeriphCLKConfig+0xd32>
        {
          return status;
100038de:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100038e2:	f000 bff1 	b.w	100048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable UART Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
100038e6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100038ea:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100038ee:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100038f2:	f043 0320 	orr.w	r3, r3, #32
100038f6:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
100038fa:	e01e      	b.n	1000393a <HAL_RCCEx_PeriphCLKConfig+0xd86>

      case RCC_USART1CLKSOURCE_PLL4: /* PLL4 is used as clock source for USART1 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100038fc:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003900:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003904:	681b      	ldr	r3, [r3, #0]
10003906:	3380      	adds	r3, #128	@ 0x80
10003908:	4618      	mov	r0, r3
1000390a:	f7fe fffb 	bl	10002904 <RCCEx_PLL4_Config>
1000390e:	4603      	mov	r3, r0
10003910:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10003914:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003918:	2b00      	cmp	r3, #0
1000391a:	d003      	beq.n	10003924 <HAL_RCCEx_PeriphCLKConfig+0xd70>
        {
          return status;
1000391c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003920:	f000 bfd2 	b.w	100048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable USART Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10003924:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003928:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
1000392c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003930:	f043 0320 	orr.w	r3, r3, #32
10003934:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10003938:	bf00      	nop
    }

    /* Set the source of USART1 clock*/
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
1000393a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000393e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
10003942:	f023 0107 	bic.w	r1, r3, #7
10003946:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000394a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000394e:	681b      	ldr	r3, [r3, #0]
10003950:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
10003954:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003958:	430b      	orrs	r3, r1
1000395a:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
  }

  /*---------------------------- SDMMC12 configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC12) ==
1000395e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003962:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003966:	681b      	ldr	r3, [r3, #0]
10003968:	e9d3 2300 	ldrd	r2, r3, [r3]
1000396c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
10003970:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
10003974:	2300      	movs	r3, #0
10003976:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
1000397a:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
1000397e:	460b      	mov	r3, r1
10003980:	4313      	orrs	r3, r2
10003982:	d05b      	beq.n	10003a3c <HAL_RCCEx_PeriphCLKConfig+0xe88>
      RCC_PERIPHCLK_SDMMC12)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC12CLKSOURCE(PeriphClkInit->Sdmmc12ClockSelection));

    switch (PeriphClkInit->Sdmmc12ClockSelection)
10003984:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003988:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000398c:	681b      	ldr	r3, [r3, #0]
1000398e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
10003992:	2b01      	cmp	r3, #1
10003994:	d002      	beq.n	1000399c <HAL_RCCEx_PeriphCLKConfig+0xde8>
10003996:	2b02      	cmp	r3, #2
10003998:	d01f      	beq.n	100039da <HAL_RCCEx_PeriphCLKConfig+0xe26>
1000399a:	e03d      	b.n	10003a18 <HAL_RCCEx_PeriphCLKConfig+0xe64>
    {
      case RCC_SDMMC12CLKSOURCE_PLL3: /* PLL3 is used as clock source for SDMMC12 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000399c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100039a0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100039a4:	681b      	ldr	r3, [r3, #0]
100039a6:	3344      	adds	r3, #68	@ 0x44
100039a8:	4618      	mov	r0, r3
100039aa:	f7fe fe41 	bl	10002630 <RCCEx_PLL3_Config>
100039ae:	4603      	mov	r3, r0
100039b0:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
100039b4:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100039b8:	2b00      	cmp	r3, #0
100039ba:	d003      	beq.n	100039c4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
        {
          return status;
100039bc:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100039c0:	f000 bf82 	b.w	100048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SDMMC12 Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
100039c4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100039c8:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100039cc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100039d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
100039d4:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
100039d8:	e01e      	b.n	10003a18 <HAL_RCCEx_PeriphCLKConfig+0xe64>

      case RCC_SDMMC12CLKSOURCE_PLL4: /* PLL4 is used as clock source for SDMMC12 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100039da:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100039de:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100039e2:	681b      	ldr	r3, [r3, #0]
100039e4:	3380      	adds	r3, #128	@ 0x80
100039e6:	4618      	mov	r0, r3
100039e8:	f7fe ff8c 	bl	10002904 <RCCEx_PLL4_Config>
100039ec:	4603      	mov	r3, r0
100039ee:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
100039f2:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100039f6:	2b00      	cmp	r3, #0
100039f8:	d003      	beq.n	10003a02 <HAL_RCCEx_PeriphCLKConfig+0xe4e>
        {
          return status;
100039fa:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100039fe:	f000 bf63 	b.w	100048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SDMMC12 Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10003a02:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003a06:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10003a0a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003a0e:	f043 0310 	orr.w	r3, r3, #16
10003a12:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10003a16:	bf00      	nop
    }

    /* Set the source of SDMMC12 clock*/
    __HAL_RCC_SDMMC12_CONFIG(PeriphClkInit->Sdmmc12ClockSelection);
10003a18:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003a1c:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
10003a20:	f023 0107 	bic.w	r1, r3, #7
10003a24:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003a28:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003a2c:	681b      	ldr	r3, [r3, #0]
10003a2e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
10003a32:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003a36:	430b      	orrs	r3, r1
10003a38:	f8c2 38f4 	str.w	r3, [r2, #2292]	@ 0x8f4
  }

  /*---------------------------- SDMMC3 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC3) ==
10003a3c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003a40:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003a44:	681b      	ldr	r3, [r3, #0]
10003a46:	e9d3 2300 	ldrd	r2, r3, [r3]
10003a4a:	2100      	movs	r1, #0
10003a4c:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
10003a50:	f003 0301 	and.w	r3, r3, #1
10003a54:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
10003a58:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
10003a5c:	460b      	mov	r3, r1
10003a5e:	4313      	orrs	r3, r2
10003a60:	d05b      	beq.n	10003b1a <HAL_RCCEx_PeriphCLKConfig+0xf66>
      RCC_PERIPHCLK_SDMMC3)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC3CLKSOURCE(PeriphClkInit->Sdmmc3ClockSelection));

    switch (PeriphClkInit->Sdmmc3ClockSelection)
10003a62:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003a66:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003a6a:	681b      	ldr	r3, [r3, #0]
10003a6c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
10003a70:	2b01      	cmp	r3, #1
10003a72:	d002      	beq.n	10003a7a <HAL_RCCEx_PeriphCLKConfig+0xec6>
10003a74:	2b02      	cmp	r3, #2
10003a76:	d01f      	beq.n	10003ab8 <HAL_RCCEx_PeriphCLKConfig+0xf04>
10003a78:	e03d      	b.n	10003af6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
    {
      case RCC_SDMMC3CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SDMMC3 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003a7a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003a7e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003a82:	681b      	ldr	r3, [r3, #0]
10003a84:	3344      	adds	r3, #68	@ 0x44
10003a86:	4618      	mov	r0, r3
10003a88:	f7fe fdd2 	bl	10002630 <RCCEx_PLL3_Config>
10003a8c:	4603      	mov	r3, r0
10003a8e:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10003a92:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003a96:	2b00      	cmp	r3, #0
10003a98:	d003      	beq.n	10003aa2 <HAL_RCCEx_PeriphCLKConfig+0xeee>
        {
          return status;
10003a9a:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003a9e:	f000 bf13 	b.w	100048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SDMMC3 Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10003aa2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003aa6:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10003aaa:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003aae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10003ab2:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10003ab6:	e01e      	b.n	10003af6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_SDMMC3CLKSOURCE_PLL4:  /* PLL4 is used as clock source for SDMMC3 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003ab8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003abc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003ac0:	681b      	ldr	r3, [r3, #0]
10003ac2:	3380      	adds	r3, #128	@ 0x80
10003ac4:	4618      	mov	r0, r3
10003ac6:	f7fe ff1d 	bl	10002904 <RCCEx_PLL4_Config>
10003aca:	4603      	mov	r3, r0
10003acc:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10003ad0:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003ad4:	2b00      	cmp	r3, #0
10003ad6:	d003      	beq.n	10003ae0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
        {
          return status;
10003ad8:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003adc:	f000 bef4 	b.w	100048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SDMMC3 Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10003ae0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003ae4:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10003ae8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003aec:	f043 0310 	orr.w	r3, r3, #16
10003af0:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10003af4:	bf00      	nop
    }

    /* Set the source of SDMMC3 clock*/
    __HAL_RCC_SDMMC3_CONFIG(PeriphClkInit->Sdmmc3ClockSelection);
10003af6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003afa:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	@ 0x8f8
10003afe:	f023 0107 	bic.w	r1, r3, #7
10003b02:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003b06:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003b0a:	681b      	ldr	r3, [r3, #0]
10003b0c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
10003b10:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003b14:	430b      	orrs	r3, r1
10003b16:	f8c2 38f8 	str.w	r3, [r2, #2296]	@ 0x8f8
  }

  /*---------------------------- ETH configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ETH) ==
10003b1a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003b1e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003b22:	681b      	ldr	r3, [r3, #0]
10003b24:	e9d3 2300 	ldrd	r2, r3, [r3]
10003b28:	2100      	movs	r1, #0
10003b2a:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
10003b2e:	f003 0302 	and.w	r3, r3, #2
10003b32:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
10003b36:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
10003b3a:	460b      	mov	r3, r1
10003b3c:	4313      	orrs	r3, r2
10003b3e:	d05b      	beq.n	10003bf8 <HAL_RCCEx_PeriphCLKConfig+0x1044>
      RCC_PERIPHCLK_ETH)
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETHCLKSOURCE(PeriphClkInit->EthClockSelection));

    switch (PeriphClkInit->EthClockSelection)
10003b40:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003b44:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003b48:	681b      	ldr	r3, [r3, #0]
10003b4a:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
10003b4e:	2b00      	cmp	r3, #0
10003b50:	d002      	beq.n	10003b58 <HAL_RCCEx_PeriphCLKConfig+0xfa4>
10003b52:	2b01      	cmp	r3, #1
10003b54:	d01f      	beq.n	10003b96 <HAL_RCCEx_PeriphCLKConfig+0xfe2>
10003b56:	e03d      	b.n	10003bd4 <HAL_RCCEx_PeriphCLKConfig+0x1020>
    {
      case RCC_ETHCLKSOURCE_PLL4:     /* PLL4 is used as clock source for ETH */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003b58:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003b5c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003b60:	681b      	ldr	r3, [r3, #0]
10003b62:	3380      	adds	r3, #128	@ 0x80
10003b64:	4618      	mov	r0, r3
10003b66:	f7fe fecd 	bl	10002904 <RCCEx_PLL4_Config>
10003b6a:	4603      	mov	r3, r0
10003b6c:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10003b70:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003b74:	2b00      	cmp	r3, #0
10003b76:	d003      	beq.n	10003b80 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
        {
          return status;
10003b78:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003b7c:	f000 bea4 	b.w	100048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable ETH Clock output generated on PLL2 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10003b80:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003b84:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10003b88:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003b8c:	f043 0310 	orr.w	r3, r3, #16
10003b90:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10003b94:	e01e      	b.n	10003bd4 <HAL_RCCEx_PeriphCLKConfig+0x1020>

      case RCC_ETHCLKSOURCE_PLL3:     /* PLL3 is used as clock source for ETH */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003b96:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003b9a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003b9e:	681b      	ldr	r3, [r3, #0]
10003ba0:	3344      	adds	r3, #68	@ 0x44
10003ba2:	4618      	mov	r0, r3
10003ba4:	f7fe fd44 	bl	10002630 <RCCEx_PLL3_Config>
10003ba8:	4603      	mov	r3, r0
10003baa:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10003bae:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003bb2:	2b00      	cmp	r3, #0
10003bb4:	d003      	beq.n	10003bbe <HAL_RCCEx_PeriphCLKConfig+0x100a>
        {
          return status;
10003bb6:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003bba:	f000 be85 	b.w	100048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable ETH Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10003bbe:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003bc2:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10003bc6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003bca:	f043 0320 	orr.w	r3, r3, #32
10003bce:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10003bd2:	bf00      	nop
    }

    /* Set the source of ETH clock*/
    __HAL_RCC_ETH_CONFIG(PeriphClkInit->EthClockSelection);
10003bd4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003bd8:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	@ 0x8fc
10003bdc:	f023 0103 	bic.w	r1, r3, #3
10003be0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003be4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003be8:	681b      	ldr	r3, [r3, #0]
10003bea:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
10003bee:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003bf2:	430b      	orrs	r3, r1
10003bf4:	f8c2 38fc 	str.w	r3, [r2, #2300]	@ 0x8fc
  }

  /*---------------------------- QSPI configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) ==
10003bf8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003bfc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003c00:	681b      	ldr	r3, [r3, #0]
10003c02:	e9d3 2300 	ldrd	r2, r3, [r3]
10003c06:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
10003c0a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
10003c0e:	2300      	movs	r3, #0
10003c10:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
10003c14:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
10003c18:	460b      	mov	r3, r1
10003c1a:	4313      	orrs	r3, r2
10003c1c:	d05b      	beq.n	10003cd6 <HAL_RCCEx_PeriphCLKConfig+0x1122>
      RCC_PERIPHCLK_QSPI)
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    switch (PeriphClkInit->QspiClockSelection)
10003c1e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003c22:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003c26:	681b      	ldr	r3, [r3, #0]
10003c28:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
10003c2c:	2b01      	cmp	r3, #1
10003c2e:	d002      	beq.n	10003c36 <HAL_RCCEx_PeriphCLKConfig+0x1082>
10003c30:	2b02      	cmp	r3, #2
10003c32:	d01f      	beq.n	10003c74 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
10003c34:	e03d      	b.n	10003cb2 <HAL_RCCEx_PeriphCLKConfig+0x10fe>
    {
      case RCC_QSPICLKSOURCE_PLL3:   /* PLL3 is used as clock source for QSPI */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003c36:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003c3a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003c3e:	681b      	ldr	r3, [r3, #0]
10003c40:	3344      	adds	r3, #68	@ 0x44
10003c42:	4618      	mov	r0, r3
10003c44:	f7fe fcf4 	bl	10002630 <RCCEx_PLL3_Config>
10003c48:	4603      	mov	r3, r0
10003c4a:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10003c4e:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003c52:	2b00      	cmp	r3, #0
10003c54:	d003      	beq.n	10003c5e <HAL_RCCEx_PeriphCLKConfig+0x10aa>
        {
          return status;
10003c56:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003c5a:	f000 be35 	b.w	100048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable QSPI Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10003c5e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003c62:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10003c66:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003c6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10003c6e:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10003c72:	e01e      	b.n	10003cb2 <HAL_RCCEx_PeriphCLKConfig+0x10fe>

      case RCC_QSPICLKSOURCE_PLL4:   /* PLL4 is used as clock source for QSPI */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003c74:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003c78:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003c7c:	681b      	ldr	r3, [r3, #0]
10003c7e:	3380      	adds	r3, #128	@ 0x80
10003c80:	4618      	mov	r0, r3
10003c82:	f7fe fe3f 	bl	10002904 <RCCEx_PLL4_Config>
10003c86:	4603      	mov	r3, r0
10003c88:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10003c8c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003c90:	2b00      	cmp	r3, #0
10003c92:	d003      	beq.n	10003c9c <HAL_RCCEx_PeriphCLKConfig+0x10e8>
        {
          return status;
10003c94:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003c98:	f000 be16 	b.w	100048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable QSPI Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10003c9c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003ca0:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10003ca4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003ca8:	f043 0310 	orr.w	r3, r3, #16
10003cac:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10003cb0:	bf00      	nop
    }

    /* Set the source of QSPI clock*/
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
10003cb2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003cb6:	f8d3 3900 	ldr.w	r3, [r3, #2304]	@ 0x900
10003cba:	f023 0103 	bic.w	r1, r3, #3
10003cbe:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003cc2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003cc6:	681b      	ldr	r3, [r3, #0]
10003cc8:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
10003ccc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003cd0:	430b      	orrs	r3, r1
10003cd2:	f8c2 3900 	str.w	r3, [r2, #2304]	@ 0x900
  }

  /*---------------------------- FMC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) ==
10003cd6:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003cda:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003cde:	681b      	ldr	r3, [r3, #0]
10003ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
10003ce4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
10003ce8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
10003cec:	2300      	movs	r3, #0
10003cee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
10003cf2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
10003cf6:	460b      	mov	r3, r1
10003cf8:	4313      	orrs	r3, r2
10003cfa:	d05b      	beq.n	10003db4 <HAL_RCCEx_PeriphCLKConfig+0x1200>
      RCC_PERIPHCLK_FMC)
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMCCLKSOURCE(PeriphClkInit->FmcClockSelection));

    switch (PeriphClkInit->FmcClockSelection)
10003cfc:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003d00:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003d04:	681b      	ldr	r3, [r3, #0]
10003d06:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
10003d0a:	2b01      	cmp	r3, #1
10003d0c:	d002      	beq.n	10003d14 <HAL_RCCEx_PeriphCLKConfig+0x1160>
10003d0e:	2b02      	cmp	r3, #2
10003d10:	d01f      	beq.n	10003d52 <HAL_RCCEx_PeriphCLKConfig+0x119e>
10003d12:	e03d      	b.n	10003d90 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
    {
      case RCC_FMCCLKSOURCE_PLL3: /* PLL3 is used as clock source for FMC */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003d14:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003d18:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003d1c:	681b      	ldr	r3, [r3, #0]
10003d1e:	3344      	adds	r3, #68	@ 0x44
10003d20:	4618      	mov	r0, r3
10003d22:	f7fe fc85 	bl	10002630 <RCCEx_PLL3_Config>
10003d26:	4603      	mov	r3, r0
10003d28:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10003d2c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003d30:	2b00      	cmp	r3, #0
10003d32:	d003      	beq.n	10003d3c <HAL_RCCEx_PeriphCLKConfig+0x1188>
        {
          return status;
10003d34:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003d38:	f000 bdc6 	b.w	100048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable FMC Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10003d3c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003d40:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10003d44:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003d48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10003d4c:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10003d50:	e01e      	b.n	10003d90 <HAL_RCCEx_PeriphCLKConfig+0x11dc>

      case RCC_FMCCLKSOURCE_PLL4: /* PLL4 is used as clock source for FMC */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003d52:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003d56:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003d5a:	681b      	ldr	r3, [r3, #0]
10003d5c:	3380      	adds	r3, #128	@ 0x80
10003d5e:	4618      	mov	r0, r3
10003d60:	f7fe fdd0 	bl	10002904 <RCCEx_PLL4_Config>
10003d64:	4603      	mov	r3, r0
10003d66:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10003d6a:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003d6e:	2b00      	cmp	r3, #0
10003d70:	d003      	beq.n	10003d7a <HAL_RCCEx_PeriphCLKConfig+0x11c6>
        {
          return status;
10003d72:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003d76:	f000 bda7 	b.w	100048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable FMC Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10003d7a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003d7e:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10003d82:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003d86:	f043 0310 	orr.w	r3, r3, #16
10003d8a:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10003d8e:	bf00      	nop
    }

    /* Set the source of FMC clock*/
    __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
10003d90:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003d94:	f8d3 3904 	ldr.w	r3, [r3, #2308]	@ 0x904
10003d98:	f023 0103 	bic.w	r1, r3, #3
10003d9c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003da0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003da4:	681b      	ldr	r3, [r3, #0]
10003da6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
10003daa:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003dae:	430b      	orrs	r3, r1
10003db0:	f8c2 3904 	str.w	r3, [r2, #2308]	@ 0x904
  }

#if defined(FDCAN1)
  /*---------------------------- FDCAN configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) ==
10003db4:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003db8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003dbc:	681b      	ldr	r3, [r3, #0]
10003dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
10003dc2:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
10003dc6:	67bb      	str	r3, [r7, #120]	@ 0x78
10003dc8:	2300      	movs	r3, #0
10003dca:	67fb      	str	r3, [r7, #124]	@ 0x7c
10003dcc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
10003dd0:	460b      	mov	r3, r1
10003dd2:	4313      	orrs	r3, r2
10003dd4:	d07e      	beq.n	10003ed4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      RCC_PERIPHCLK_FDCAN)
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    switch (PeriphClkInit->FdcanClockSelection)
10003dd6:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003dda:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003dde:	681b      	ldr	r3, [r3, #0]
10003de0:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
10003de4:	2b03      	cmp	r3, #3
10003de6:	d044      	beq.n	10003e72 <HAL_RCCEx_PeriphCLKConfig+0x12be>
10003de8:	2b03      	cmp	r3, #3
10003dea:	d861      	bhi.n	10003eb0 <HAL_RCCEx_PeriphCLKConfig+0x12fc>
10003dec:	2b01      	cmp	r3, #1
10003dee:	d002      	beq.n	10003df6 <HAL_RCCEx_PeriphCLKConfig+0x1242>
10003df0:	2b02      	cmp	r3, #2
10003df2:	d01f      	beq.n	10003e34 <HAL_RCCEx_PeriphCLKConfig+0x1280>
10003df4:	e05c      	b.n	10003eb0 <HAL_RCCEx_PeriphCLKConfig+0x12fc>
    {
      case RCC_FDCANCLKSOURCE_PLL3: /* PLL3 is used as clock source for FDCAN */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003df6:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003dfa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003dfe:	681b      	ldr	r3, [r3, #0]
10003e00:	3344      	adds	r3, #68	@ 0x44
10003e02:	4618      	mov	r0, r3
10003e04:	f7fe fc14 	bl	10002630 <RCCEx_PLL3_Config>
10003e08:	4603      	mov	r3, r0
10003e0a:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10003e0e:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003e12:	2b00      	cmp	r3, #0
10003e14:	d003      	beq.n	10003e1e <HAL_RCCEx_PeriphCLKConfig+0x126a>
        {
          return status;
10003e16:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003e1a:	f000 bd55 	b.w	100048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable FDCAN Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10003e1e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003e22:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10003e26:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003e2a:	f043 0320 	orr.w	r3, r3, #32
10003e2e:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10003e32:	e03d      	b.n	10003eb0 <HAL_RCCEx_PeriphCLKConfig+0x12fc>

      case RCC_FDCANCLKSOURCE_PLL4_Q: /* PLL4_Q is used as clock source for FDCAN */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003e34:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003e38:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003e3c:	681b      	ldr	r3, [r3, #0]
10003e3e:	3380      	adds	r3, #128	@ 0x80
10003e40:	4618      	mov	r0, r3
10003e42:	f7fe fd5f 	bl	10002904 <RCCEx_PLL4_Config>
10003e46:	4603      	mov	r3, r0
10003e48:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10003e4c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003e50:	2b00      	cmp	r3, #0
10003e52:	d003      	beq.n	10003e5c <HAL_RCCEx_PeriphCLKConfig+0x12a8>
        {
          return status;
10003e54:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003e58:	f000 bd36 	b.w	100048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable FDCAN Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10003e5c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003e60:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10003e64:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003e68:	f043 0320 	orr.w	r3, r3, #32
10003e6c:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10003e70:	e01e      	b.n	10003eb0 <HAL_RCCEx_PeriphCLKConfig+0x12fc>

      case RCC_FDCANCLKSOURCE_PLL4_R: /* PLL4_R is used as clock source for FDCAN */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003e72:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003e76:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003e7a:	681b      	ldr	r3, [r3, #0]
10003e7c:	3380      	adds	r3, #128	@ 0x80
10003e7e:	4618      	mov	r0, r3
10003e80:	f7fe fd40 	bl	10002904 <RCCEx_PLL4_Config>
10003e84:	4603      	mov	r3, r0
10003e86:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10003e8a:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003e8e:	2b00      	cmp	r3, #0
10003e90:	d003      	beq.n	10003e9a <HAL_RCCEx_PeriphCLKConfig+0x12e6>
        {
          return status;
10003e92:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003e96:	f000 bd17 	b.w	100048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable FDCAN Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10003e9a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003e9e:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10003ea2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003ea6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10003eaa:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10003eae:	bf00      	nop
    }

    /* Set the source of FDCAN clock*/
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
10003eb0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003eb4:	f8d3 390c 	ldr.w	r3, [r3, #2316]	@ 0x90c
10003eb8:	f023 0103 	bic.w	r1, r3, #3
10003ebc:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003ec0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003ec4:	681b      	ldr	r3, [r3, #0]
10003ec6:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
10003eca:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003ece:	430b      	orrs	r3, r1
10003ed0:	f8c2 390c 	str.w	r3, [r2, #2316]	@ 0x90c
  }
#endif /*FDCAN1*/

  /*---------------------------- SPDIFRX configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) ==
10003ed4:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003ed8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003edc:	681b      	ldr	r3, [r3, #0]
10003ede:	e9d3 2300 	ldrd	r2, r3, [r3]
10003ee2:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
10003ee6:	673b      	str	r3, [r7, #112]	@ 0x70
10003ee8:	2300      	movs	r3, #0
10003eea:	677b      	str	r3, [r7, #116]	@ 0x74
10003eec:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
10003ef0:	460b      	mov	r3, r1
10003ef2:	4313      	orrs	r3, r2
10003ef4:	d05b      	beq.n	10003fae <HAL_RCCEx_PeriphCLKConfig+0x13fa>
      RCC_PERIPHCLK_SPDIFRX)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifrxClockSelection));

    switch (PeriphClkInit->SpdifrxClockSelection)
10003ef6:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003efa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003efe:	681b      	ldr	r3, [r3, #0]
10003f00:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
10003f04:	2b00      	cmp	r3, #0
10003f06:	d002      	beq.n	10003f0e <HAL_RCCEx_PeriphCLKConfig+0x135a>
10003f08:	2b01      	cmp	r3, #1
10003f0a:	d01f      	beq.n	10003f4c <HAL_RCCEx_PeriphCLKConfig+0x1398>
10003f0c:	e03d      	b.n	10003f8a <HAL_RCCEx_PeriphCLKConfig+0x13d6>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL4: /* PLL4 is used as clock source for SPDIF */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003f0e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003f12:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003f16:	681b      	ldr	r3, [r3, #0]
10003f18:	3380      	adds	r3, #128	@ 0x80
10003f1a:	4618      	mov	r0, r3
10003f1c:	f7fe fcf2 	bl	10002904 <RCCEx_PLL4_Config>
10003f20:	4603      	mov	r3, r0
10003f22:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10003f26:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003f2a:	2b00      	cmp	r3, #0
10003f2c:	d003      	beq.n	10003f36 <HAL_RCCEx_PeriphCLKConfig+0x1382>
        {
          return status;
10003f2e:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003f32:	f000 bcc9 	b.w	100048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPDIF Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10003f36:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003f3a:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10003f3e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003f42:	f043 0310 	orr.w	r3, r3, #16
10003f46:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10003f4a:	e01e      	b.n	10003f8a <HAL_RCCEx_PeriphCLKConfig+0x13d6>

      case RCC_SPDIFRXCLKSOURCE_PLL3: /* PLL3 is used as clock source for SPDIF */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003f4c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003f50:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003f54:	681b      	ldr	r3, [r3, #0]
10003f56:	3344      	adds	r3, #68	@ 0x44
10003f58:	4618      	mov	r0, r3
10003f5a:	f7fe fb69 	bl	10002630 <RCCEx_PLL3_Config>
10003f5e:	4603      	mov	r3, r0
10003f60:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10003f64:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003f68:	2b00      	cmp	r3, #0
10003f6a:	d003      	beq.n	10003f74 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
        {
          return status;
10003f6c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003f70:	f000 bcaa 	b.w	100048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPDIF Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10003f74:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003f78:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10003f7c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003f80:	f043 0320 	orr.w	r3, r3, #32
10003f84:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10003f88:	bf00      	nop
    }

    /* Set the source of SPDIF clock*/
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
10003f8a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003f8e:	f8d3 3914 	ldr.w	r3, [r3, #2324]	@ 0x914
10003f92:	f023 0103 	bic.w	r1, r3, #3
10003f96:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003f9a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003f9e:	681b      	ldr	r3, [r3, #0]
10003fa0:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
10003fa4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003fa8:	430b      	orrs	r3, r1
10003faa:	f8c2 3914 	str.w	r3, [r2, #2324]	@ 0x914
  }

  /*---------------------------- CEC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) ==
10003fae:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003fb2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003fb6:	681b      	ldr	r3, [r3, #0]
10003fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
10003fbc:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
10003fc0:	66bb      	str	r3, [r7, #104]	@ 0x68
10003fc2:	2300      	movs	r3, #0
10003fc4:	66fb      	str	r3, [r7, #108]	@ 0x6c
10003fc6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
10003fca:	460b      	mov	r3, r1
10003fcc:	4313      	orrs	r3, r2
10003fce:	d011      	beq.n	10003ff4 <HAL_RCCEx_PeriphCLKConfig+0x1440>
      RCC_PERIPHCLK_CEC)
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
10003fd0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003fd4:	f8d3 3918 	ldr.w	r3, [r3, #2328]	@ 0x918
10003fd8:	f023 0103 	bic.w	r1, r3, #3
10003fdc:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003fe0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003fe4:	681b      	ldr	r3, [r3, #0]
10003fe6:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
10003fea:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003fee:	430b      	orrs	r3, r1
10003ff0:	f8c2 3918 	str.w	r3, [r2, #2328]	@ 0x918
  }

  /*---------------------------- USBPHY configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) ==
10003ff4:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003ff8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003ffc:	681b      	ldr	r3, [r3, #0]
10003ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
10004002:	f402 7300 	and.w	r3, r2, #512	@ 0x200
10004006:	663b      	str	r3, [r7, #96]	@ 0x60
10004008:	2300      	movs	r3, #0
1000400a:	667b      	str	r3, [r7, #100]	@ 0x64
1000400c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
10004010:	460b      	mov	r3, r1
10004012:	4313      	orrs	r3, r2
10004014:	d038      	beq.n	10004088 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
      RCC_PERIPHCLK_USBPHY)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(PeriphClkInit->UsbphyClockSelection));

    if (PeriphClkInit->UsbphyClockSelection == RCC_USBPHYCLKSOURCE_PLL4)
10004016:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000401a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000401e:	681b      	ldr	r3, [r3, #0]
10004020:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
10004024:	2b01      	cmp	r3, #1
10004026:	d11d      	bne.n	10004064 <HAL_RCCEx_PeriphCLKConfig+0x14b0>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004028:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000402c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004030:	681b      	ldr	r3, [r3, #0]
10004032:	3380      	adds	r3, #128	@ 0x80
10004034:	4618      	mov	r0, r3
10004036:	f7fe fc65 	bl	10002904 <RCCEx_PLL4_Config>
1000403a:	4603      	mov	r3, r0
1000403c:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
10004040:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004044:	2b00      	cmp	r3, #0
10004046:	d003      	beq.n	10004050 <HAL_RCCEx_PeriphCLKConfig+0x149c>
      {
        return status;
10004048:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000404c:	f000 bc3c 	b.w	100048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable USB PHY Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10004050:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004054:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10004058:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000405c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10004060:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    __HAL_RCC_USBPHY_CONFIG(PeriphClkInit->UsbphyClockSelection);
10004064:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004068:	f8d3 391c 	ldr.w	r3, [r3, #2332]	@ 0x91c
1000406c:	f023 0103 	bic.w	r1, r3, #3
10004070:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004074:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004078:	681b      	ldr	r3, [r3, #0]
1000407a:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
1000407e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004082:	430b      	orrs	r3, r1
10004084:	f8c2 391c 	str.w	r3, [r2, #2332]	@ 0x91c
  }

  /*---------------------------- USBO configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBO) ==
10004088:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000408c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004090:	681b      	ldr	r3, [r3, #0]
10004092:	e9d3 2300 	ldrd	r2, r3, [r3]
10004096:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
1000409a:	65bb      	str	r3, [r7, #88]	@ 0x58
1000409c:	2300      	movs	r3, #0
1000409e:	65fb      	str	r3, [r7, #92]	@ 0x5c
100040a0:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
100040a4:	460b      	mov	r3, r1
100040a6:	4313      	orrs	r3, r2
100040a8:	d037      	beq.n	1000411a <HAL_RCCEx_PeriphCLKConfig+0x1566>
      RCC_PERIPHCLK_USBO)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBOCLKSOURCE(PeriphClkInit->UsboClockSelection));

    if (PeriphClkInit->UsboClockSelection == RCC_USBOCLKSOURCE_PLL4)
100040aa:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100040ae:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100040b2:	681b      	ldr	r3, [r3, #0]
100040b4:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
100040b8:	2b00      	cmp	r3, #0
100040ba:	d11c      	bne.n	100040f6 <HAL_RCCEx_PeriphCLKConfig+0x1542>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100040bc:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100040c0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100040c4:	681b      	ldr	r3, [r3, #0]
100040c6:	3380      	adds	r3, #128	@ 0x80
100040c8:	4618      	mov	r0, r3
100040ca:	f7fe fc1b 	bl	10002904 <RCCEx_PLL4_Config>
100040ce:	4603      	mov	r3, r0
100040d0:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
100040d4:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100040d8:	2b00      	cmp	r3, #0
100040da:	d002      	beq.n	100040e2 <HAL_RCCEx_PeriphCLKConfig+0x152e>
      {
        return status;
100040dc:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100040e0:	e3f2      	b.n	100048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable USB OTG Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
100040e2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100040e6:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100040ea:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100040ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
100040f2:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    __HAL_RCC_USBO_CONFIG(PeriphClkInit->UsboClockSelection);
100040f6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100040fa:	f8d3 391c 	ldr.w	r3, [r3, #2332]	@ 0x91c
100040fe:	f023 0110 	bic.w	r1, r3, #16
10004102:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004106:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000410a:	681b      	ldr	r3, [r3, #0]
1000410c:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
10004110:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004114:	430b      	orrs	r3, r1
10004116:	f8c2 391c 	str.w	r3, [r2, #2332]	@ 0x91c
  }

  /*---------------------------- RNG1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG1) ==
1000411a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000411e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004122:	681b      	ldr	r3, [r3, #0]
10004124:	e9d3 2300 	ldrd	r2, r3, [r3]
10004128:	2100      	movs	r1, #0
1000412a:	6539      	str	r1, [r7, #80]	@ 0x50
1000412c:	f003 0304 	and.w	r3, r3, #4
10004130:	657b      	str	r3, [r7, #84]	@ 0x54
10004132:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
10004136:	460b      	mov	r3, r1
10004138:	4313      	orrs	r3, r2
1000413a:	d037      	beq.n	100041ac <HAL_RCCEx_PeriphCLKConfig+0x15f8>
      RCC_PERIPHCLK_RNG1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNG1CLKSOURCE(PeriphClkInit->Rng1ClockSelection));

    if (PeriphClkInit->Rng1ClockSelection == RCC_RNG1CLKSOURCE_PLL4)
1000413c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004140:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004144:	681b      	ldr	r3, [r3, #0]
10004146:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
1000414a:	2b01      	cmp	r3, #1
1000414c:	d11c      	bne.n	10004188 <HAL_RCCEx_PeriphCLKConfig+0x15d4>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
1000414e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004152:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004156:	681b      	ldr	r3, [r3, #0]
10004158:	3380      	adds	r3, #128	@ 0x80
1000415a:	4618      	mov	r0, r3
1000415c:	f7fe fbd2 	bl	10002904 <RCCEx_PLL4_Config>
10004160:	4603      	mov	r3, r0
10004162:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
10004166:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000416a:	2b00      	cmp	r3, #0
1000416c:	d002      	beq.n	10004174 <HAL_RCCEx_PeriphCLKConfig+0x15c0>
      {
        return status;
1000416e:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004172:	e3a9      	b.n	100048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable RNG1 Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10004174:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004178:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
1000417c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004180:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10004184:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    /* Set the source of RNG1 clock*/
    __HAL_RCC_RNG1_CONFIG(PeriphClkInit->Rng1ClockSelection);
10004188:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000418c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
10004190:	f023 0103 	bic.w	r1, r3, #3
10004194:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004198:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000419c:	681b      	ldr	r3, [r3, #0]
1000419e:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
100041a2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100041a6:	430b      	orrs	r3, r1
100041a8:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
  }

  /*---------------------------- RNG2 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG2) ==
100041ac:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100041b0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100041b4:	681b      	ldr	r3, [r3, #0]
100041b6:	e9d3 2300 	ldrd	r2, r3, [r3]
100041ba:	2100      	movs	r1, #0
100041bc:	64b9      	str	r1, [r7, #72]	@ 0x48
100041be:	f003 0308 	and.w	r3, r3, #8
100041c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
100041c4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
100041c8:	460b      	mov	r3, r1
100041ca:	4313      	orrs	r3, r2
100041cc:	d037      	beq.n	1000423e <HAL_RCCEx_PeriphCLKConfig+0x168a>
      RCC_PERIPHCLK_RNG2)
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNG2CLKSOURCE(PeriphClkInit->Rng2ClockSelection));

    if (PeriphClkInit->Rng2ClockSelection == RCC_RNG2CLKSOURCE_PLL4)
100041ce:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100041d2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100041d6:	681b      	ldr	r3, [r3, #0]
100041d8:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
100041dc:	2b01      	cmp	r3, #1
100041de:	d11c      	bne.n	1000421a <HAL_RCCEx_PeriphCLKConfig+0x1666>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100041e0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100041e4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100041e8:	681b      	ldr	r3, [r3, #0]
100041ea:	3380      	adds	r3, #128	@ 0x80
100041ec:	4618      	mov	r0, r3
100041ee:	f7fe fb89 	bl	10002904 <RCCEx_PLL4_Config>
100041f2:	4603      	mov	r3, r0
100041f4:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
100041f8:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100041fc:	2b00      	cmp	r3, #0
100041fe:	d002      	beq.n	10004206 <HAL_RCCEx_PeriphCLKConfig+0x1652>
      {
        return status;
10004200:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004204:	e360      	b.n	100048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable RNG2 Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10004206:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000420a:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
1000420e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004212:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10004216:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    /* Set the source of RNG2 clock*/
    __HAL_RCC_RNG2_CONFIG(PeriphClkInit->Rng2ClockSelection);
1000421a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000421e:	f8d3 3920 	ldr.w	r3, [r3, #2336]	@ 0x920
10004222:	f023 0103 	bic.w	r1, r3, #3
10004226:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000422a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000422e:	681b      	ldr	r3, [r3, #0]
10004230:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
10004234:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004238:	430b      	orrs	r3, r1
1000423a:	f8c2 3920 	str.w	r3, [r2, #2336]	@ 0x920
  }

  /*---------------------------- STGEN configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_STGEN) ==
1000423e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004242:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004246:	681b      	ldr	r3, [r3, #0]
10004248:	e9d3 2300 	ldrd	r2, r3, [r3]
1000424c:	2100      	movs	r1, #0
1000424e:	6439      	str	r1, [r7, #64]	@ 0x40
10004250:	f003 0310 	and.w	r3, r3, #16
10004254:	647b      	str	r3, [r7, #68]	@ 0x44
10004256:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
1000425a:	460b      	mov	r3, r1
1000425c:	4313      	orrs	r3, r2
1000425e:	d011      	beq.n	10004284 <HAL_RCCEx_PeriphCLKConfig+0x16d0>
      RCC_PERIPHCLK_STGEN)
  {
    /* Check the parameters */
    assert_param(IS_RCC_STGENCLKSOURCE(PeriphClkInit->StgenClockSelection));

    __HAL_RCC_STGEN_CONFIG(PeriphClkInit->StgenClockSelection);
10004260:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004264:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
10004268:	f023 0103 	bic.w	r1, r3, #3
1000426c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004270:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004274:	681b      	ldr	r3, [r3, #0]
10004276:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
1000427a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000427e:	430b      	orrs	r3, r1
10004280:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
  }

#if defined(DSI)
  /*---------------------------- DSI configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) ==
10004284:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004288:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000428c:	681b      	ldr	r3, [r3, #0]
1000428e:	e9d3 2300 	ldrd	r2, r3, [r3]
10004292:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
10004296:	63bb      	str	r3, [r7, #56]	@ 0x38
10004298:	2300      	movs	r3, #0
1000429a:	63fb      	str	r3, [r7, #60]	@ 0x3c
1000429c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
100042a0:	460b      	mov	r3, r1
100042a2:	4313      	orrs	r3, r2
100042a4:	d037      	beq.n	10004316 <HAL_RCCEx_PeriphCLKConfig+0x1762>
      RCC_PERIPHCLK_DSI)
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    if (PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLL4)
100042a6:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100042aa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100042ae:	681b      	ldr	r3, [r3, #0]
100042b0:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
100042b4:	2b01      	cmp	r3, #1
100042b6:	d11c      	bne.n	100042f2 <HAL_RCCEx_PeriphCLKConfig+0x173e>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100042b8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100042bc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100042c0:	681b      	ldr	r3, [r3, #0]
100042c2:	3380      	adds	r3, #128	@ 0x80
100042c4:	4618      	mov	r0, r3
100042c6:	f7fe fb1d 	bl	10002904 <RCCEx_PLL4_Config>
100042ca:	4603      	mov	r3, r0
100042cc:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
100042d0:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100042d4:	2b00      	cmp	r3, #0
100042d6:	d002      	beq.n	100042de <HAL_RCCEx_PeriphCLKConfig+0x172a>
      {
        return status;
100042d8:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100042dc:	e2f4      	b.n	100048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable DSI Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
100042de:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100042e2:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100042e6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100042ea:	f043 0310 	orr.w	r3, r3, #16
100042ee:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
100042f2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100042f6:	f8d3 3924 	ldr.w	r3, [r3, #2340]	@ 0x924
100042fa:	f023 0101 	bic.w	r1, r3, #1
100042fe:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004302:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004306:	681b      	ldr	r3, [r3, #0]
10004308:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
1000430c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004310:	430b      	orrs	r3, r1
10004312:	f8c2 3924 	str.w	r3, [r2, #2340]	@ 0x924
  }
#endif /*DSI*/

  /*---------------------------- ADC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) ==
10004316:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000431a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000431e:	681b      	ldr	r3, [r3, #0]
10004320:	e9d3 2300 	ldrd	r2, r3, [r3]
10004324:	f002 0308 	and.w	r3, r2, #8
10004328:	633b      	str	r3, [r7, #48]	@ 0x30
1000432a:	2300      	movs	r3, #0
1000432c:	637b      	str	r3, [r7, #52]	@ 0x34
1000432e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
10004332:	460b      	mov	r3, r1
10004334:	4313      	orrs	r3, r2
10004336:	d059      	beq.n	100043ec <HAL_RCCEx_PeriphCLKConfig+0x1838>
      RCC_PERIPHCLK_ADC)
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    switch (PeriphClkInit->AdcClockSelection)
10004338:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000433c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004340:	681b      	ldr	r3, [r3, #0]
10004342:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
10004346:	2b00      	cmp	r3, #0
10004348:	d002      	beq.n	10004350 <HAL_RCCEx_PeriphCLKConfig+0x179c>
1000434a:	2b02      	cmp	r3, #2
1000434c:	d01e      	beq.n	1000438c <HAL_RCCEx_PeriphCLKConfig+0x17d8>
1000434e:	e03b      	b.n	100043c8 <HAL_RCCEx_PeriphCLKConfig+0x1814>
    {
      case RCC_ADCCLKSOURCE_PLL4: /* PLL4 is used as clock source for ADC */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004350:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004354:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004358:	681b      	ldr	r3, [r3, #0]
1000435a:	3380      	adds	r3, #128	@ 0x80
1000435c:	4618      	mov	r0, r3
1000435e:	f7fe fad1 	bl	10002904 <RCCEx_PLL4_Config>
10004362:	4603      	mov	r3, r0
10004364:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10004368:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000436c:	2b00      	cmp	r3, #0
1000436e:	d002      	beq.n	10004376 <HAL_RCCEx_PeriphCLKConfig+0x17c2>
        {
          return status;
10004370:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004374:	e2a8      	b.n	100048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable ADC Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10004376:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000437a:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
1000437e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004382:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10004386:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
        break;
1000438a:	e01d      	b.n	100043c8 <HAL_RCCEx_PeriphCLKConfig+0x1814>

      case RCC_ADCCLKSOURCE_PLL3: /* PLL3 is used as clock source for ADC */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000438c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004390:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004394:	681b      	ldr	r3, [r3, #0]
10004396:	3344      	adds	r3, #68	@ 0x44
10004398:	4618      	mov	r0, r3
1000439a:	f7fe f949 	bl	10002630 <RCCEx_PLL3_Config>
1000439e:	4603      	mov	r3, r0
100043a0:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
100043a4:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100043a8:	2b00      	cmp	r3, #0
100043aa:	d002      	beq.n	100043b2 <HAL_RCCEx_PeriphCLKConfig+0x17fe>
        {
          return status;
100043ac:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100043b0:	e28a      	b.n	100048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable ADC Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
100043b2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100043b6:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100043ba:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100043be:	f043 0320 	orr.w	r3, r3, #32
100043c2:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
100043c6:	bf00      	nop
    }

    /* Set the source of ADC clock*/
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
100043c8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100043cc:	f8d3 3928 	ldr.w	r3, [r3, #2344]	@ 0x928
100043d0:	f023 0103 	bic.w	r1, r3, #3
100043d4:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100043d8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100043dc:	681b      	ldr	r3, [r3, #0]
100043de:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
100043e2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100043e6:	430b      	orrs	r3, r1
100043e8:	f8c2 3928 	str.w	r3, [r2, #2344]	@ 0x928
  }

  /*---------------------------- LPTIM45 configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM45) ==
100043ec:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100043f0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100043f4:	681b      	ldr	r3, [r3, #0]
100043f6:	e9d3 2300 	ldrd	r2, r3, [r3]
100043fa:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
100043fe:	62bb      	str	r3, [r7, #40]	@ 0x28
10004400:	2300      	movs	r3, #0
10004402:	62fb      	str	r3, [r7, #44]	@ 0x2c
10004404:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
10004408:	460b      	mov	r3, r1
1000440a:	4313      	orrs	r3, r2
1000440c:	d058      	beq.n	100044c0 <HAL_RCCEx_PeriphCLKConfig+0x190c>
      RCC_PERIPHCLK_LPTIM45)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM45CLKSOURCE(PeriphClkInit->Lptim45ClockSelection));

    switch (PeriphClkInit->Lptim45ClockSelection)
1000440e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004412:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004416:	681b      	ldr	r3, [r3, #0]
10004418:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
1000441c:	2b01      	cmp	r3, #1
1000441e:	d01f      	beq.n	10004460 <HAL_RCCEx_PeriphCLKConfig+0x18ac>
10004420:	2b02      	cmp	r3, #2
10004422:	d13b      	bne.n	1000449c <HAL_RCCEx_PeriphCLKConfig+0x18e8>
    {
      case RCC_LPTIM45CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPTIM45 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10004424:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004428:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000442c:	681b      	ldr	r3, [r3, #0]
1000442e:	3344      	adds	r3, #68	@ 0x44
10004430:	4618      	mov	r0, r3
10004432:	f7fe f8fd 	bl	10002630 <RCCEx_PLL3_Config>
10004436:	4603      	mov	r3, r0
10004438:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
1000443c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004440:	2b00      	cmp	r3, #0
10004442:	d002      	beq.n	1000444a <HAL_RCCEx_PeriphCLKConfig+0x1896>
        {
          return status;
10004444:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004448:	e23e      	b.n	100048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
1000444a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000444e:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10004452:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004456:	f043 0320 	orr.w	r3, r3, #32
1000445a:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
1000445e:	e01d      	b.n	1000449c <HAL_RCCEx_PeriphCLKConfig+0x18e8>

      case RCC_LPTIM45CLKSOURCE_PLL4: /* PLL4 is used as clock source for LPTIM45 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004460:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004464:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004468:	681b      	ldr	r3, [r3, #0]
1000446a:	3380      	adds	r3, #128	@ 0x80
1000446c:	4618      	mov	r0, r3
1000446e:	f7fe fa49 	bl	10002904 <RCCEx_PLL4_Config>
10004472:	4603      	mov	r3, r0
10004474:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10004478:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000447c:	2b00      	cmp	r3, #0
1000447e:	d002      	beq.n	10004486 <HAL_RCCEx_PeriphCLKConfig+0x18d2>
        {
          return status;
10004480:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004484:	e220      	b.n	100048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10004486:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000448a:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
1000448e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004492:	f043 0310 	orr.w	r3, r3, #16
10004496:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
1000449a:	bf00      	nop
    }

    /* Set the source of LPTIM45 clock*/
    __HAL_RCC_LPTIM45_CONFIG(PeriphClkInit->Lptim45ClockSelection);
1000449c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100044a0:	f8d3 392c 	ldr.w	r3, [r3, #2348]	@ 0x92c
100044a4:	f023 0207 	bic.w	r2, r3, #7
100044a8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100044ac:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100044b0:	681b      	ldr	r3, [r3, #0]
100044b2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
100044b6:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100044ba:	4313      	orrs	r3, r2
100044bc:	f8c1 392c 	str.w	r3, [r1, #2348]	@ 0x92c
  }

  /*---------------------------- LPTIM23 configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM23) ==
100044c0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100044c4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100044c8:	681b      	ldr	r3, [r3, #0]
100044ca:	e9d3 2300 	ldrd	r2, r3, [r3]
100044ce:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
100044d2:	623b      	str	r3, [r7, #32]
100044d4:	2300      	movs	r3, #0
100044d6:	627b      	str	r3, [r7, #36]	@ 0x24
100044d8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
100044dc:	460b      	mov	r3, r1
100044de:	4313      	orrs	r3, r2
100044e0:	d037      	beq.n	10004552 <HAL_RCCEx_PeriphCLKConfig+0x199e>
      RCC_PERIPHCLK_LPTIM23)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM23CLKSOURCE(PeriphClkInit->Lptim23ClockSelection));

    if (PeriphClkInit->Lptim23ClockSelection == RCC_LPTIM23CLKSOURCE_PLL4)
100044e2:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100044e6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100044ea:	681b      	ldr	r3, [r3, #0]
100044ec:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
100044f0:	2b01      	cmp	r3, #1
100044f2:	d11c      	bne.n	1000452e <HAL_RCCEx_PeriphCLKConfig+0x197a>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100044f4:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100044f8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100044fc:	681b      	ldr	r3, [r3, #0]
100044fe:	3380      	adds	r3, #128	@ 0x80
10004500:	4618      	mov	r0, r3
10004502:	f7fe f9ff 	bl	10002904 <RCCEx_PLL4_Config>
10004506:	4603      	mov	r3, r0
10004508:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
1000450c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004510:	2b00      	cmp	r3, #0
10004512:	d002      	beq.n	1000451a <HAL_RCCEx_PeriphCLKConfig+0x1966>
      {
        return status;
10004514:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004518:	e1d6      	b.n	100048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
1000451a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000451e:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10004522:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004526:	f043 0320 	orr.w	r3, r3, #32
1000452a:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    /* Set the source of LPTIM23 clock*/
    __HAL_RCC_LPTIM23_CONFIG(PeriphClkInit->Lptim23ClockSelection);
1000452e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004532:	f8d3 3930 	ldr.w	r3, [r3, #2352]	@ 0x930
10004536:	f023 0207 	bic.w	r2, r3, #7
1000453a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000453e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004542:	681b      	ldr	r3, [r3, #0]
10004544:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
10004548:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
1000454c:	4313      	orrs	r3, r2
1000454e:	f8c1 3930 	str.w	r3, [r1, #2352]	@ 0x930
  }

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) ==
10004552:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004556:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000455a:	681b      	ldr	r3, [r3, #0]
1000455c:	e9d3 2300 	ldrd	r2, r3, [r3]
10004560:	f002 0340 	and.w	r3, r2, #64	@ 0x40
10004564:	61bb      	str	r3, [r7, #24]
10004566:	2300      	movs	r3, #0
10004568:	61fb      	str	r3, [r7, #28]
1000456a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
1000456e:	460b      	mov	r3, r1
10004570:	4313      	orrs	r3, r2
10004572:	d058      	beq.n	10004626 <HAL_RCCEx_PeriphCLKConfig+0x1a72>
      RCC_PERIPHCLK_LPTIM1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    switch (PeriphClkInit->Lptim1ClockSelection)
10004574:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004578:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000457c:	681b      	ldr	r3, [r3, #0]
1000457e:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
10004582:	2b01      	cmp	r3, #1
10004584:	d01f      	beq.n	100045c6 <HAL_RCCEx_PeriphCLKConfig+0x1a12>
10004586:	2b02      	cmp	r3, #2
10004588:	d13b      	bne.n	10004602 <HAL_RCCEx_PeriphCLKConfig+0x1a4e>
    {
      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000458a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000458e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004592:	681b      	ldr	r3, [r3, #0]
10004594:	3344      	adds	r3, #68	@ 0x44
10004596:	4618      	mov	r0, r3
10004598:	f7fe f84a 	bl	10002630 <RCCEx_PLL3_Config>
1000459c:	4603      	mov	r3, r0
1000459e:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
100045a2:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100045a6:	2b00      	cmp	r3, #0
100045a8:	d002      	beq.n	100045b0 <HAL_RCCEx_PeriphCLKConfig+0x19fc>
        {
          return status;
100045aa:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100045ae:	e18b      	b.n	100048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
100045b0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100045b4:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100045b8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100045bc:	f043 0320 	orr.w	r3, r3, #32
100045c0:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
100045c4:	e01d      	b.n	10004602 <HAL_RCCEx_PeriphCLKConfig+0x1a4e>

      case RCC_LPTIM1CLKSOURCE_PLL4:  /* PLL4 is used as clock source for LPTIM1 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100045c6:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100045ca:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100045ce:	681b      	ldr	r3, [r3, #0]
100045d0:	3380      	adds	r3, #128	@ 0x80
100045d2:	4618      	mov	r0, r3
100045d4:	f7fe f996 	bl	10002904 <RCCEx_PLL4_Config>
100045d8:	4603      	mov	r3, r0
100045da:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
100045de:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100045e2:	2b00      	cmp	r3, #0
100045e4:	d002      	beq.n	100045ec <HAL_RCCEx_PeriphCLKConfig+0x1a38>
        {
          return status;
100045e6:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100045ea:	e16d      	b.n	100048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
100045ec:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100045f0:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100045f4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100045f8:	f043 0310 	orr.w	r3, r3, #16
100045fc:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10004600:	bf00      	nop
    }

    /* Set the source of LPTIM1 clock*/
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
10004602:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004606:	f8d3 3934 	ldr.w	r3, [r3, #2356]	@ 0x934
1000460a:	f023 0207 	bic.w	r2, r3, #7
1000460e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004612:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004616:	681b      	ldr	r3, [r3, #0]
10004618:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
1000461c:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10004620:	4313      	orrs	r3, r2
10004622:	f8c1 3934 	str.w	r3, [r1, #2356]	@ 0x934
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) ==
10004626:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000462a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000462e:	681b      	ldr	r3, [r3, #0]
10004630:	e9d3 2300 	ldrd	r2, r3, [r3]
10004634:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
10004638:	613b      	str	r3, [r7, #16]
1000463a:	2300      	movs	r3, #0
1000463c:	617b      	str	r3, [r7, #20]
1000463e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
10004642:	460b      	mov	r3, r1
10004644:	4313      	orrs	r3, r2
10004646:	f000 80c6 	beq.w	100047d6 <HAL_RCCEx_PeriphCLKConfig+0x1c22>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
1000464a:	4ba2      	ldr	r3, [pc, #648]	@ (100048d4 <HAL_RCCEx_PeriphCLKConfig+0x1d20>)
1000464c:	681b      	ldr	r3, [r3, #0]
1000464e:	4aa1      	ldr	r2, [pc, #644]	@ (100048d4 <HAL_RCCEx_PeriphCLKConfig+0x1d20>)
10004650:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
10004654:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
10004656:	f7fc f94d 	bl	100008f4 <HAL_GetTick>
1000465a:	f8c7 0234 	str.w	r0, [r7, #564]	@ 0x234

    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
1000465e:	e00a      	b.n	10004676 <HAL_RCCEx_PeriphCLKConfig+0x1ac2>
    {
      if ((HAL_GetTick() - tickstart) > DBP_TIMEOUT_VALUE)
10004660:	f7fc f948 	bl	100008f4 <HAL_GetTick>
10004664:	4602      	mov	r2, r0
10004666:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
1000466a:	1ad3      	subs	r3, r2, r3
1000466c:	2b64      	cmp	r3, #100	@ 0x64
1000466e:	d902      	bls.n	10004676 <HAL_RCCEx_PeriphCLKConfig+0x1ac2>
      {
        ret = HAL_TIMEOUT;
10004670:	2303      	movs	r3, #3
10004672:	f887 3247 	strb.w	r3, [r7, #583]	@ 0x247
    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
10004676:	4b97      	ldr	r3, [pc, #604]	@ (100048d4 <HAL_RCCEx_PeriphCLKConfig+0x1d20>)
10004678:	681b      	ldr	r3, [r3, #0]
1000467a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
1000467e:	2b00      	cmp	r3, #0
10004680:	d0ee      	beq.n	10004660 <HAL_RCCEx_PeriphCLKConfig+0x1aac>
      }
    }

    if (ret == HAL_OK)
10004682:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
10004686:	2b00      	cmp	r3, #0
10004688:	f040 80a2 	bne.w	100047d0 <HAL_RCCEx_PeriphCLKConfig+0x1c1c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSRC) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSRC))
1000468c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004690:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
10004694:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004698:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000469c:	681b      	ldr	r3, [r3, #0]
1000469e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
100046a2:	4053      	eors	r3, r2
100046a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
100046a8:	2b00      	cmp	r3, #0
100046aa:	f000 8086 	beq.w	100047ba <HAL_RCCEx_PeriphCLKConfig+0x1c06>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSRC));
100046ae:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100046b2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
100046b6:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
100046ba:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
100046be:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100046c2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
100046c6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100046ca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
100046ce:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
        __HAL_RCC_BACKUPRESET_RELEASE();
100046d2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100046d6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
100046da:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100046de:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
100046e2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140

        /* Set the LSEDrive value */
        __HAL_RCC_LSEDRIVE_CONFIG(tmpreg & RCC_BDCR_LSEDRV);
100046e6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100046ea:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
100046ee:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
100046f2:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
100046f6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
100046fa:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100046fe:	4313      	orrs	r3, r2
10004700:	f8c1 3140 	str.w	r3, [r1, #320]	@ 0x140

        /* RCC_BDCR_LSEON can be enabled for RTC or another IP, re-enable it */
        RCC_OscInitTypeDef RCC_OscInitStructure;
        /* Configure LSE Oscillator*/
        RCC_OscInitStructure.OscillatorType = RCC_OSCILLATORTYPE_LSE;
10004704:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004708:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
1000470c:	2204      	movs	r2, #4
1000470e:	601a      	str	r2, [r3, #0]
        RCC_OscInitStructure.LSEState = (tmpreg & LSE_MASK);
10004710:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
10004714:	f003 020b 	and.w	r2, r3, #11
10004718:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000471c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
10004720:	609a      	str	r2, [r3, #8]

        RCC_OscInitStructure.PLL.PLLState = RCC_PLL_NONE;
10004722:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004726:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
1000472a:	2200      	movs	r2, #0
1000472c:	625a      	str	r2, [r3, #36]	@ 0x24
        RCC_OscInitStructure.PLL2.PLLState = RCC_PLL_NONE;
1000472e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004732:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
10004736:	2200      	movs	r2, #0
10004738:	661a      	str	r2, [r3, #96]	@ 0x60
        RCC_OscInitStructure.PLL3.PLLState = RCC_PLL_NONE;
1000473a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000473e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
10004742:	2200      	movs	r2, #0
10004744:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        RCC_OscInitStructure.PLL4.PLLState = RCC_PLL_NONE;
10004748:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000474c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
10004750:	2200      	movs	r2, #0
10004752:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
        ret = HAL_RCC_OscConfig(&RCC_OscInitStructure);
10004756:	f507 7390 	add.w	r3, r7, #288	@ 0x120
1000475a:	4618      	mov	r0, r3
1000475c:	f7fc fc0e 	bl	10000f7c <HAL_RCC_OscConfig>
10004760:	4603      	mov	r3, r0
10004762:	f887 3247 	strb.w	r3, [r7, #583]	@ 0x247
        if (ret != HAL_OK)
10004766:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
1000476a:	2b00      	cmp	r3, #0
1000476c:	d002      	beq.n	10004774 <HAL_RCCEx_PeriphCLKConfig+0x1bc0>
        {
          return ret;
1000476e:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
10004772:	e0a9      	b.n	100048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }

        /* Write the RTCSRC */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
10004774:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004778:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
1000477c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
10004780:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004784:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004788:	681b      	ldr	r3, [r3, #0]
1000478a:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
1000478e:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10004792:	4313      	orrs	r3, r2
10004794:	f8c1 3140 	str.w	r3, [r1, #320]	@ 0x140

        /* Fill up Reserved register mask for BDCR
         * All already filled up or what shouldn't be modified must be put on the mask */
        RESERVED_BDCR_MASK = ~(RCC_BDCR_VSWRST | RCC_BDCR_RTCCKEN | RCC_BDCR_RTCSRC |
10004798:	4b4f      	ldr	r3, [pc, #316]	@ (100048d8 <HAL_RCCEx_PeriphCLKConfig+0x1d24>)
1000479a:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
                               RCC_BDCR_LSECSSD | RCC_BDCR_LSEDRV | RCC_BDCR_DIGBYP |
                               RCC_BDCR_LSERDY | RCC_BDCR_LSEBYP | RCC_BDCR_LSEON);

        /* Restore the BDCR context: RESERVED registers plus RCC_BDCR_LSECSSON */
        WRITE_REG(RCC->BDCR, (READ_REG(RCC->BDCR) | (tmpreg & RESERVED_BDCR_MASK)));
1000479e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100047a2:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
100047a6:	f8d7 1240 	ldr.w	r1, [r7, #576]	@ 0x240
100047aa:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
100047ae:	400b      	ands	r3, r1
100047b0:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100047b4:	4313      	orrs	r3, r2
100047b6:	f8c1 3140 	str.w	r3, [r1, #320]	@ 0x140

      }/* End RTCSRC changed */

      /*Enable RTC clock   */
      __HAL_RCC_RTC_ENABLE();
100047ba:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100047be:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
100047c2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100047c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
100047ca:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
100047ce:	e002      	b.n	100047d6 <HAL_RCCEx_PeriphCLKConfig+0x1c22>
    }
    else
    {
      // Enable write access to Backup domain failed
      /* return the error */
      return ret;
100047d0:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
100047d4:	e078      	b.n	100048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
    }
  }

  /*---------------------------- TIMG1 configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIMG1) ==
100047d6:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100047da:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100047de:	681b      	ldr	r3, [r3, #0]
100047e0:	e9d3 2300 	ldrd	r2, r3, [r3]
100047e4:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
100047e8:	60bb      	str	r3, [r7, #8]
100047ea:	2300      	movs	r3, #0
100047ec:	60fb      	str	r3, [r7, #12]
100047ee:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
100047f2:	460b      	mov	r3, r1
100047f4:	4313      	orrs	r3, r2
100047f6:	d02a      	beq.n	1000484e <HAL_RCCEx_PeriphCLKConfig+0x1c9a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMG1PRES(PeriphClkInit->TIMG1PresSelection));

    /* Set TIMG1 division factor */
    __HAL_RCC_TIMG1PRES(PeriphClkInit->TIMG1PresSelection);
100047f8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100047fc:	f8d3 3828 	ldr.w	r3, [r3, #2088]	@ 0x828
10004800:	f023 0201 	bic.w	r2, r3, #1
10004804:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004808:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000480c:	681b      	ldr	r3, [r3, #0]
1000480e:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
10004812:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10004816:	4313      	orrs	r3, r2
10004818:	f8c1 3828 	str.w	r3, [r1, #2088]	@ 0x828

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
1000481c:	f7fc f86a 	bl	100008f4 <HAL_GetTick>
10004820:	f8c7 0234 	str.w	r0, [r7, #564]	@ 0x234

    /* Wait till TIMG1 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_TIMG1PRERDY) == RESET)
10004824:	e00a      	b.n	1000483c <HAL_RCCEx_PeriphCLKConfig+0x1c88>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10004826:	f7fc f865 	bl	100008f4 <HAL_GetTick>
1000482a:	4602      	mov	r2, r0
1000482c:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
10004830:	1ad3      	subs	r3, r2, r3
10004832:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10004836:	d901      	bls.n	1000483c <HAL_RCCEx_PeriphCLKConfig+0x1c88>
      {
        return HAL_TIMEOUT;
10004838:	2303      	movs	r3, #3
1000483a:	e045      	b.n	100048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_TIMG1PRERDY) == RESET)
1000483c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004840:	f8d3 3828 	ldr.w	r3, [r3, #2088]	@ 0x828
10004844:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10004848:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
1000484c:	d1eb      	bne.n	10004826 <HAL_RCCEx_PeriphCLKConfig+0x1c72>
      }
    }
  }

  /*---------------------------- TIMG2 configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIMG2) ==
1000484e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004852:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004856:	681b      	ldr	r3, [r3, #0]
10004858:	e9d3 2300 	ldrd	r2, r3, [r3]
1000485c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
10004860:	603b      	str	r3, [r7, #0]
10004862:	2300      	movs	r3, #0
10004864:	607b      	str	r3, [r7, #4]
10004866:	e9d7 1200 	ldrd	r1, r2, [r7]
1000486a:	460b      	mov	r3, r1
1000486c:	4313      	orrs	r3, r2
1000486e:	d02a      	beq.n	100048c6 <HAL_RCCEx_PeriphCLKConfig+0x1d12>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMG2PRES(PeriphClkInit->TIMG2PresSelection));

    /* Set TIMG1 division factor */
    __HAL_RCC_TIMG2PRES(PeriphClkInit->TIMG2PresSelection);
10004870:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004874:	f8d3 382c 	ldr.w	r3, [r3, #2092]	@ 0x82c
10004878:	f023 0201 	bic.w	r2, r3, #1
1000487c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004880:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004884:	681b      	ldr	r3, [r3, #0]
10004886:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
1000488a:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
1000488e:	4313      	orrs	r3, r2
10004890:	f8c1 382c 	str.w	r3, [r1, #2092]	@ 0x82c

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10004894:	f7fc f82e 	bl	100008f4 <HAL_GetTick>
10004898:	f8c7 0234 	str.w	r0, [r7, #564]	@ 0x234

    /* Wait till TIMG1 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_TIMG2PRERDY) == RESET)
1000489c:	e00a      	b.n	100048b4 <HAL_RCCEx_PeriphCLKConfig+0x1d00>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
1000489e:	f7fc f829 	bl	100008f4 <HAL_GetTick>
100048a2:	4602      	mov	r2, r0
100048a4:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
100048a8:	1ad3      	subs	r3, r2, r3
100048aa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
100048ae:	d901      	bls.n	100048b4 <HAL_RCCEx_PeriphCLKConfig+0x1d00>
      {
        return HAL_TIMEOUT;
100048b0:	2303      	movs	r3, #3
100048b2:	e009      	b.n	100048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_TIMG2PRERDY) == RESET)
100048b4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100048b8:	f8d3 382c 	ldr.w	r3, [r3, #2092]	@ 0x82c
100048bc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
100048c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
100048c4:	d1eb      	bne.n	1000489e <HAL_RCCEx_PeriphCLKConfig+0x1cea>
      }
    }
  }

  return HAL_OK;
100048c6:	2300      	movs	r3, #0
}
100048c8:	4618      	mov	r0, r3
100048ca:	f507 7712 	add.w	r7, r7, #584	@ 0x248
100048ce:	46bd      	mov	sp, r7
100048d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
100048d4:	50001000 	.word	0x50001000
100048d8:	7fecfdc0 	.word	0x7fecfdc0

100048dc <metal_list_init>:
 */
#define METAL_DECLARE_LIST(name)			\
	struct metal_list name = METAL_INIT_LIST(name)

static inline void metal_list_init(struct metal_list *list)
{
100048dc:	b480      	push	{r7}
100048de:	b083      	sub	sp, #12
100048e0:	af00      	add	r7, sp, #0
100048e2:	6078      	str	r0, [r7, #4]
	list->prev = list;
100048e4:	687b      	ldr	r3, [r7, #4]
100048e6:	687a      	ldr	r2, [r7, #4]
100048e8:	605a      	str	r2, [r3, #4]
	list->next = list;
100048ea:	687b      	ldr	r3, [r7, #4]
100048ec:	687a      	ldr	r2, [r7, #4]
100048ee:	601a      	str	r2, [r3, #0]
}
100048f0:	bf00      	nop
100048f2:	370c      	adds	r7, #12
100048f4:	46bd      	mov	sp, r7
100048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
100048fa:	4770      	bx	lr

100048fc <metal_list_add_before>:

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
100048fc:	b480      	push	{r7}
100048fe:	b083      	sub	sp, #12
10004900:	af00      	add	r7, sp, #0
10004902:	6078      	str	r0, [r7, #4]
10004904:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
10004906:	687b      	ldr	r3, [r7, #4]
10004908:	685a      	ldr	r2, [r3, #4]
1000490a:	683b      	ldr	r3, [r7, #0]
1000490c:	605a      	str	r2, [r3, #4]
	new_node->next = node;
1000490e:	683b      	ldr	r3, [r7, #0]
10004910:	687a      	ldr	r2, [r7, #4]
10004912:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
10004914:	683b      	ldr	r3, [r7, #0]
10004916:	681b      	ldr	r3, [r3, #0]
10004918:	683a      	ldr	r2, [r7, #0]
1000491a:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
1000491c:	683b      	ldr	r3, [r7, #0]
1000491e:	685b      	ldr	r3, [r3, #4]
10004920:	683a      	ldr	r2, [r7, #0]
10004922:	601a      	str	r2, [r3, #0]
}
10004924:	bf00      	nop
10004926:	370c      	adds	r7, #12
10004928:	46bd      	mov	sp, r7
1000492a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000492e:	4770      	bx	lr

10004930 <metal_list_add_tail>:
	metal_list_add_after(list, node);
}

static inline void metal_list_add_tail(struct metal_list *list,
				       struct metal_list *node)
{
10004930:	b580      	push	{r7, lr}
10004932:	b082      	sub	sp, #8
10004934:	af00      	add	r7, sp, #0
10004936:	6078      	str	r0, [r7, #4]
10004938:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
1000493a:	6839      	ldr	r1, [r7, #0]
1000493c:	6878      	ldr	r0, [r7, #4]
1000493e:	f7ff ffdd 	bl	100048fc <metal_list_add_before>
}
10004942:	bf00      	nop
10004944:	3708      	adds	r7, #8
10004946:	46bd      	mov	sp, r7
10004948:	bd80      	pop	{r7, pc}

1000494a <__metal_cache_flush>:

extern void metal_machine_cache_flush(void *addr, unsigned int len);
extern void metal_machine_cache_invalidate(void *addr, unsigned int len);

static inline void __metal_cache_flush(void *addr, unsigned int len)
{
1000494a:	b580      	push	{r7, lr}
1000494c:	b082      	sub	sp, #8
1000494e:	af00      	add	r7, sp, #0
10004950:	6078      	str	r0, [r7, #4]
10004952:	6039      	str	r1, [r7, #0]
	metal_machine_cache_flush(addr, len);
10004954:	6839      	ldr	r1, [r7, #0]
10004956:	6878      	ldr	r0, [r7, #4]
10004958:	f001 fc26 	bl	100061a8 <metal_machine_cache_flush>
}
1000495c:	bf00      	nop
1000495e:	3708      	adds	r7, #8
10004960:	46bd      	mov	sp, r7
10004962:	bd80      	pop	{r7, pc}

10004964 <__metal_cache_invalidate>:

static inline void __metal_cache_invalidate(void *addr, unsigned int len)
{
10004964:	b580      	push	{r7, lr}
10004966:	b082      	sub	sp, #8
10004968:	af00      	add	r7, sp, #0
1000496a:	6078      	str	r0, [r7, #4]
1000496c:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
1000496e:	6839      	ldr	r1, [r7, #0]
10004970:	6878      	ldr	r0, [r7, #4]
10004972:	f001 fc24 	bl	100061be <metal_machine_cache_invalidate>
}
10004976:	bf00      	nop
10004978:	3708      	adds	r7, #8
1000497a:	46bd      	mov	sp, r7
1000497c:	bd80      	pop	{r7, pc}

1000497e <metal_cache_flush>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will flush the whole data cache.
 */
static inline void metal_cache_flush(void *addr, unsigned int len)
{
1000497e:	b580      	push	{r7, lr}
10004980:	b082      	sub	sp, #8
10004982:	af00      	add	r7, sp, #0
10004984:	6078      	str	r0, [r7, #4]
10004986:	6039      	str	r1, [r7, #0]
	__metal_cache_flush(addr, len);
10004988:	6839      	ldr	r1, [r7, #0]
1000498a:	6878      	ldr	r0, [r7, #4]
1000498c:	f7ff ffdd 	bl	1000494a <__metal_cache_flush>
}
10004990:	bf00      	nop
10004992:	3708      	adds	r7, #8
10004994:	46bd      	mov	sp, r7
10004996:	bd80      	pop	{r7, pc}

10004998 <metal_cache_invalidate>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will invalidate the whole data cache.
 */
static inline void metal_cache_invalidate(void *addr, unsigned int len)
{
10004998:	b580      	push	{r7, lr}
1000499a:	b082      	sub	sp, #8
1000499c:	af00      	add	r7, sp, #0
1000499e:	6078      	str	r0, [r7, #4]
100049a0:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
100049a2:	6839      	ldr	r1, [r7, #0]
100049a4:	6878      	ldr	r0, [r7, #4]
100049a6:	f7ff ffdd 	bl	10004964 <__metal_cache_invalidate>
}
100049aa:	bf00      	nop
100049ac:	3708      	adds	r7, #8
100049ae:	46bd      	mov	sp, r7
100049b0:	bd80      	pop	{r7, pc}
	...

100049b4 <metal_bus_register>:
#include <metal/utilities.h>
#include <metal/dma.h>
#include <metal/cache.h>

int metal_bus_register(struct metal_bus *bus)
{
100049b4:	b580      	push	{r7, lr}
100049b6:	b082      	sub	sp, #8
100049b8:	af00      	add	r7, sp, #0
100049ba:	6078      	str	r0, [r7, #4]
	if (!bus || !bus->name || !strlen(bus->name))
100049bc:	687b      	ldr	r3, [r7, #4]
100049be:	2b00      	cmp	r3, #0
100049c0:	d008      	beq.n	100049d4 <metal_bus_register+0x20>
100049c2:	687b      	ldr	r3, [r7, #4]
100049c4:	681b      	ldr	r3, [r3, #0]
100049c6:	2b00      	cmp	r3, #0
100049c8:	d004      	beq.n	100049d4 <metal_bus_register+0x20>
100049ca:	687b      	ldr	r3, [r7, #4]
100049cc:	681b      	ldr	r3, [r3, #0]
100049ce:	781b      	ldrb	r3, [r3, #0]
100049d0:	2b00      	cmp	r3, #0
100049d2:	d102      	bne.n	100049da <metal_bus_register+0x26>
		return -EINVAL;
100049d4:	f06f 0315 	mvn.w	r3, #21
100049d8:	e026      	b.n	10004a28 <metal_bus_register+0x74>
	if (metal_bus_find(bus->name, NULL) == 0)
100049da:	687b      	ldr	r3, [r7, #4]
100049dc:	681b      	ldr	r3, [r3, #0]
100049de:	2100      	movs	r1, #0
100049e0:	4618      	mov	r0, r3
100049e2:	f000 f82b 	bl	10004a3c <metal_bus_find>
100049e6:	4603      	mov	r3, r0
100049e8:	2b00      	cmp	r3, #0
100049ea:	d102      	bne.n	100049f2 <metal_bus_register+0x3e>
		return -EEXIST;
100049ec:	f06f 0310 	mvn.w	r3, #16
100049f0:	e01a      	b.n	10004a28 <metal_bus_register+0x74>
	metal_list_init(&bus->devices);
100049f2:	687b      	ldr	r3, [r7, #4]
100049f4:	331c      	adds	r3, #28
100049f6:	4618      	mov	r0, r3
100049f8:	f7ff ff70 	bl	100048dc <metal_list_init>
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
100049fc:	687b      	ldr	r3, [r7, #4]
100049fe:	3324      	adds	r3, #36	@ 0x24
10004a00:	4619      	mov	r1, r3
10004a02:	480b      	ldr	r0, [pc, #44]	@ (10004a30 <metal_bus_register+0x7c>)
10004a04:	f7ff ff94 	bl	10004930 <metal_list_add_tail>
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
10004a08:	4b0a      	ldr	r3, [pc, #40]	@ (10004a34 <metal_bus_register+0x80>)
10004a0a:	781b      	ldrb	r3, [r3, #0]
10004a0c:	2b06      	cmp	r3, #6
10004a0e:	d90a      	bls.n	10004a26 <metal_bus_register+0x72>
10004a10:	4b08      	ldr	r3, [pc, #32]	@ (10004a34 <metal_bus_register+0x80>)
10004a12:	685b      	ldr	r3, [r3, #4]
10004a14:	2b00      	cmp	r3, #0
10004a16:	d006      	beq.n	10004a26 <metal_bus_register+0x72>
10004a18:	4b06      	ldr	r3, [pc, #24]	@ (10004a34 <metal_bus_register+0x80>)
10004a1a:	685b      	ldr	r3, [r3, #4]
10004a1c:	687a      	ldr	r2, [r7, #4]
10004a1e:	6812      	ldr	r2, [r2, #0]
10004a20:	4905      	ldr	r1, [pc, #20]	@ (10004a38 <metal_bus_register+0x84>)
10004a22:	2007      	movs	r0, #7
10004a24:	4798      	blx	r3
	return 0;
10004a26:	2300      	movs	r3, #0
}
10004a28:	4618      	mov	r0, r3
10004a2a:	3708      	adds	r7, #8
10004a2c:	46bd      	mov	sp, r7
10004a2e:	bd80      	pop	{r7, pc}
10004a30:	10020214 	.word	0x10020214
10004a34:	1002020c 	.word	0x1002020c
10004a38:	10007b84 	.word	0x10007b84

10004a3c <metal_bus_find>:
	metal_log(METAL_LOG_DEBUG, "unregistered %s bus\n", bus->name);
	return 0;
}

int metal_bus_find(const char *name, struct metal_bus **result)
{
10004a3c:	b580      	push	{r7, lr}
10004a3e:	b084      	sub	sp, #16
10004a40:	af00      	add	r7, sp, #0
10004a42:	6078      	str	r0, [r7, #4]
10004a44:	6039      	str	r1, [r7, #0]
	struct metal_list *node;
	struct metal_bus *bus;

	metal_list_for_each(&_metal.common.bus_list, node) {
10004a46:	4b12      	ldr	r3, [pc, #72]	@ (10004a90 <metal_bus_find+0x54>)
10004a48:	689b      	ldr	r3, [r3, #8]
10004a4a:	60fb      	str	r3, [r7, #12]
10004a4c:	e016      	b.n	10004a7c <metal_bus_find+0x40>
		bus = metal_container_of(node, struct metal_bus, node);
10004a4e:	68fb      	ldr	r3, [r7, #12]
10004a50:	3b24      	subs	r3, #36	@ 0x24
10004a52:	60bb      	str	r3, [r7, #8]
		if (strcmp(bus->name, name) == 0 && result) {
10004a54:	68bb      	ldr	r3, [r7, #8]
10004a56:	681b      	ldr	r3, [r3, #0]
10004a58:	6879      	ldr	r1, [r7, #4]
10004a5a:	4618      	mov	r0, r3
10004a5c:	f7fb faf0 	bl	10000040 <strcmp>
10004a60:	4603      	mov	r3, r0
10004a62:	2b00      	cmp	r3, #0
10004a64:	d107      	bne.n	10004a76 <metal_bus_find+0x3a>
10004a66:	683b      	ldr	r3, [r7, #0]
10004a68:	2b00      	cmp	r3, #0
10004a6a:	d004      	beq.n	10004a76 <metal_bus_find+0x3a>
			*result = bus;
10004a6c:	683b      	ldr	r3, [r7, #0]
10004a6e:	68ba      	ldr	r2, [r7, #8]
10004a70:	601a      	str	r2, [r3, #0]
			return 0;
10004a72:	2300      	movs	r3, #0
10004a74:	e008      	b.n	10004a88 <metal_bus_find+0x4c>
	metal_list_for_each(&_metal.common.bus_list, node) {
10004a76:	68fb      	ldr	r3, [r7, #12]
10004a78:	681b      	ldr	r3, [r3, #0]
10004a7a:	60fb      	str	r3, [r7, #12]
10004a7c:	68fb      	ldr	r3, [r7, #12]
10004a7e:	4a05      	ldr	r2, [pc, #20]	@ (10004a94 <metal_bus_find+0x58>)
10004a80:	4293      	cmp	r3, r2
10004a82:	d1e4      	bne.n	10004a4e <metal_bus_find+0x12>
		}
	}
	return -ENOENT;
10004a84:	f06f 0301 	mvn.w	r3, #1
}
10004a88:	4618      	mov	r0, r3
10004a8a:	3710      	adds	r7, #16
10004a8c:	46bd      	mov	sp, r7
10004a8e:	bd80      	pop	{r7, pc}
10004a90:	1002020c 	.word	0x1002020c
10004a94:	10020214 	.word	0x10020214

10004a98 <metal_device_open>:

int metal_device_open(const char *bus_name, const char *dev_name,
		      struct metal_device **device)
{
10004a98:	b580      	push	{r7, lr}
10004a9a:	b086      	sub	sp, #24
10004a9c:	af00      	add	r7, sp, #0
10004a9e:	60f8      	str	r0, [r7, #12]
10004aa0:	60b9      	str	r1, [r7, #8]
10004aa2:	607a      	str	r2, [r7, #4]
	struct metal_bus *bus;
	int error;

	if (!bus_name || !strlen(bus_name) ||
10004aa4:	68fb      	ldr	r3, [r7, #12]
10004aa6:	2b00      	cmp	r3, #0
10004aa8:	d00d      	beq.n	10004ac6 <metal_device_open+0x2e>
10004aaa:	68fb      	ldr	r3, [r7, #12]
10004aac:	781b      	ldrb	r3, [r3, #0]
10004aae:	2b00      	cmp	r3, #0
10004ab0:	d009      	beq.n	10004ac6 <metal_device_open+0x2e>
10004ab2:	68bb      	ldr	r3, [r7, #8]
10004ab4:	2b00      	cmp	r3, #0
10004ab6:	d006      	beq.n	10004ac6 <metal_device_open+0x2e>
	    !dev_name || !strlen(dev_name) ||
10004ab8:	68bb      	ldr	r3, [r7, #8]
10004aba:	781b      	ldrb	r3, [r3, #0]
10004abc:	2b00      	cmp	r3, #0
10004abe:	d002      	beq.n	10004ac6 <metal_device_open+0x2e>
10004ac0:	687b      	ldr	r3, [r7, #4]
10004ac2:	2b00      	cmp	r3, #0
10004ac4:	d102      	bne.n	10004acc <metal_device_open+0x34>
	    !device)
		return -EINVAL;
10004ac6:	f06f 0315 	mvn.w	r3, #21
10004aca:	e01f      	b.n	10004b0c <metal_device_open+0x74>

	error = metal_bus_find(bus_name, &bus);
10004acc:	f107 0310 	add.w	r3, r7, #16
10004ad0:	4619      	mov	r1, r3
10004ad2:	68f8      	ldr	r0, [r7, #12]
10004ad4:	f7ff ffb2 	bl	10004a3c <metal_bus_find>
10004ad8:	6178      	str	r0, [r7, #20]
	if (error)
10004ada:	697b      	ldr	r3, [r7, #20]
10004adc:	2b00      	cmp	r3, #0
10004ade:	d001      	beq.n	10004ae4 <metal_device_open+0x4c>
		return error;
10004ae0:	697b      	ldr	r3, [r7, #20]
10004ae2:	e013      	b.n	10004b0c <metal_device_open+0x74>

	if (!bus->ops.dev_open)
10004ae4:	693b      	ldr	r3, [r7, #16]
10004ae6:	689b      	ldr	r3, [r3, #8]
10004ae8:	2b00      	cmp	r3, #0
10004aea:	d102      	bne.n	10004af2 <metal_device_open+0x5a>
		return -ENODEV;
10004aec:	f06f 0312 	mvn.w	r3, #18
10004af0:	e00c      	b.n	10004b0c <metal_device_open+0x74>

	error = (*bus->ops.dev_open)(bus, dev_name, device);
10004af2:	693b      	ldr	r3, [r7, #16]
10004af4:	689b      	ldr	r3, [r3, #8]
10004af6:	6938      	ldr	r0, [r7, #16]
10004af8:	687a      	ldr	r2, [r7, #4]
10004afa:	68b9      	ldr	r1, [r7, #8]
10004afc:	4798      	blx	r3
10004afe:	6178      	str	r0, [r7, #20]
	if (error)
10004b00:	697b      	ldr	r3, [r7, #20]
10004b02:	2b00      	cmp	r3, #0
10004b04:	d001      	beq.n	10004b0a <metal_device_open+0x72>
		return error;
10004b06:	697b      	ldr	r3, [r7, #20]
10004b08:	e000      	b.n	10004b0c <metal_device_open+0x74>

	return 0;
10004b0a:	2300      	movs	r3, #0
}
10004b0c:	4618      	mov	r0, r3
10004b0e:	3718      	adds	r7, #24
10004b10:	46bd      	mov	sp, r7
10004b12:	bd80      	pop	{r7, pc}

10004b14 <metal_register_generic_device>:
	if (device->bus->ops.dev_close)
		device->bus->ops.dev_close(device->bus, device);
}

int metal_register_generic_device(struct metal_device *device)
{
10004b14:	b580      	push	{r7, lr}
10004b16:	b082      	sub	sp, #8
10004b18:	af00      	add	r7, sp, #0
10004b1a:	6078      	str	r0, [r7, #4]
	if (!device->name || !strlen(device->name) ||
10004b1c:	687b      	ldr	r3, [r7, #4]
10004b1e:	681b      	ldr	r3, [r3, #0]
10004b20:	2b00      	cmp	r3, #0
10004b22:	d008      	beq.n	10004b36 <metal_register_generic_device+0x22>
10004b24:	687b      	ldr	r3, [r7, #4]
10004b26:	681b      	ldr	r3, [r3, #0]
10004b28:	781b      	ldrb	r3, [r3, #0]
10004b2a:	2b00      	cmp	r3, #0
10004b2c:	d003      	beq.n	10004b36 <metal_register_generic_device+0x22>
	    device->num_regions > METAL_MAX_DEVICE_REGIONS)
10004b2e:	687b      	ldr	r3, [r7, #4]
10004b30:	689b      	ldr	r3, [r3, #8]
	if (!device->name || !strlen(device->name) ||
10004b32:	2b02      	cmp	r3, #2
10004b34:	d902      	bls.n	10004b3c <metal_register_generic_device+0x28>
		return -EINVAL;
10004b36:	f06f 0315 	mvn.w	r3, #21
10004b3a:	e009      	b.n	10004b50 <metal_register_generic_device+0x3c>

	device->bus = &metal_generic_bus;
10004b3c:	687b      	ldr	r3, [r7, #4]
10004b3e:	4a06      	ldr	r2, [pc, #24]	@ (10004b58 <metal_register_generic_device+0x44>)
10004b40:	605a      	str	r2, [r3, #4]
	metal_list_add_tail(&_metal.common.generic_device_list,
10004b42:	687b      	ldr	r3, [r7, #4]
10004b44:	337c      	adds	r3, #124	@ 0x7c
10004b46:	4619      	mov	r1, r3
10004b48:	4804      	ldr	r0, [pc, #16]	@ (10004b5c <metal_register_generic_device+0x48>)
10004b4a:	f7ff fef1 	bl	10004930 <metal_list_add_tail>
			    &device->node);
	return 0;
10004b4e:	2300      	movs	r3, #0
}
10004b50:	4618      	mov	r0, r3
10004b52:	3708      	adds	r7, #8
10004b54:	46bd      	mov	sp, r7
10004b56:	bd80      	pop	{r7, pc}
10004b58:	1002000c 	.word	0x1002000c
10004b5c:	10020224 	.word	0x10020224

10004b60 <metal_generic_dev_open>:

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
10004b60:	b580      	push	{r7, lr}
10004b62:	b086      	sub	sp, #24
10004b64:	af00      	add	r7, sp, #0
10004b66:	60f8      	str	r0, [r7, #12]
10004b68:	60b9      	str	r1, [r7, #8]
10004b6a:	607a      	str	r2, [r7, #4]
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
10004b6c:	4b12      	ldr	r3, [pc, #72]	@ (10004bb8 <metal_generic_dev_open+0x58>)
10004b6e:	699b      	ldr	r3, [r3, #24]
10004b70:	617b      	str	r3, [r7, #20]
10004b72:	e016      	b.n	10004ba2 <metal_generic_dev_open+0x42>
		dev = metal_container_of(node, struct metal_device, node);
10004b74:	697b      	ldr	r3, [r7, #20]
10004b76:	3b7c      	subs	r3, #124	@ 0x7c
10004b78:	613b      	str	r3, [r7, #16]
		if (strcmp(dev->name, dev_name) == 0) {
10004b7a:	693b      	ldr	r3, [r7, #16]
10004b7c:	681b      	ldr	r3, [r3, #0]
10004b7e:	68b9      	ldr	r1, [r7, #8]
10004b80:	4618      	mov	r0, r3
10004b82:	f7fb fa5d 	bl	10000040 <strcmp>
10004b86:	4603      	mov	r3, r0
10004b88:	2b00      	cmp	r3, #0
10004b8a:	d107      	bne.n	10004b9c <metal_generic_dev_open+0x3c>
			*device = dev;
10004b8c:	687b      	ldr	r3, [r7, #4]
10004b8e:	693a      	ldr	r2, [r7, #16]
10004b90:	601a      	str	r2, [r3, #0]
			return metal_generic_dev_sys_open(dev);
10004b92:	6938      	ldr	r0, [r7, #16]
10004b94:	f000 f890 	bl	10004cb8 <metal_generic_dev_sys_open>
10004b98:	4603      	mov	r3, r0
10004b9a:	e008      	b.n	10004bae <metal_generic_dev_open+0x4e>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
10004b9c:	697b      	ldr	r3, [r7, #20]
10004b9e:	681b      	ldr	r3, [r3, #0]
10004ba0:	617b      	str	r3, [r7, #20]
10004ba2:	697b      	ldr	r3, [r7, #20]
10004ba4:	4a05      	ldr	r2, [pc, #20]	@ (10004bbc <metal_generic_dev_open+0x5c>)
10004ba6:	4293      	cmp	r3, r2
10004ba8:	d1e4      	bne.n	10004b74 <metal_generic_dev_open+0x14>
		}
	}

	return -ENODEV;
10004baa:	f06f 0312 	mvn.w	r3, #18
}
10004bae:	4618      	mov	r0, r3
10004bb0:	3718      	adds	r7, #24
10004bb2:	46bd      	mov	sp, r7
10004bb4:	bd80      	pop	{r7, pc}
10004bb6:	bf00      	nop
10004bb8:	1002020c 	.word	0x1002020c
10004bbc:	10020224 	.word	0x10020224

10004bc0 <metal_generic_dev_dma_map>:
			     struct metal_device *device,
			     uint32_t dir,
			     struct metal_sg *sg_in,
			     int nents_in,
			     struct metal_sg *sg_out)
{
10004bc0:	b580      	push	{r7, lr}
10004bc2:	b086      	sub	sp, #24
10004bc4:	af00      	add	r7, sp, #0
10004bc6:	60f8      	str	r0, [r7, #12]
10004bc8:	60b9      	str	r1, [r7, #8]
10004bca:	607a      	str	r2, [r7, #4]
10004bcc:	603b      	str	r3, [r7, #0]
	int i;
	(void)bus;
	(void)device;

	if (sg_out != sg_in)
10004bce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10004bd0:	683b      	ldr	r3, [r7, #0]
10004bd2:	429a      	cmp	r2, r3
10004bd4:	d009      	beq.n	10004bea <metal_generic_dev_dma_map+0x2a>
		memcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));
10004bd6:	6a3a      	ldr	r2, [r7, #32]
10004bd8:	4613      	mov	r3, r2
10004bda:	005b      	lsls	r3, r3, #1
10004bdc:	4413      	add	r3, r2
10004bde:	009b      	lsls	r3, r3, #2
10004be0:	461a      	mov	r2, r3
10004be2:	6839      	ldr	r1, [r7, #0]
10004be4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
10004be6:	f002 fa62 	bl	100070ae <memcpy>
	for (i = 0; i < nents_in; i++) {
10004bea:	2300      	movs	r3, #0
10004bec:	617b      	str	r3, [r7, #20]
10004bee:	e02f      	b.n	10004c50 <metal_generic_dev_dma_map+0x90>
		if (dir == METAL_DMA_DEV_W) {
10004bf0:	687b      	ldr	r3, [r7, #4]
10004bf2:	2b02      	cmp	r3, #2
10004bf4:	d114      	bne.n	10004c20 <metal_generic_dev_dma_map+0x60>
			metal_cache_flush(sg_out[i].virt, sg_out[i].len);
10004bf6:	697a      	ldr	r2, [r7, #20]
10004bf8:	4613      	mov	r3, r2
10004bfa:	005b      	lsls	r3, r3, #1
10004bfc:	4413      	add	r3, r2
10004bfe:	009b      	lsls	r3, r3, #2
10004c00:	461a      	mov	r2, r3
10004c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10004c04:	4413      	add	r3, r2
10004c06:	6818      	ldr	r0, [r3, #0]
10004c08:	697a      	ldr	r2, [r7, #20]
10004c0a:	4613      	mov	r3, r2
10004c0c:	005b      	lsls	r3, r3, #1
10004c0e:	4413      	add	r3, r2
10004c10:	009b      	lsls	r3, r3, #2
10004c12:	461a      	mov	r2, r3
10004c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10004c16:	4413      	add	r3, r2
10004c18:	689b      	ldr	r3, [r3, #8]
10004c1a:	4619      	mov	r1, r3
10004c1c:	f7ff feaf 	bl	1000497e <metal_cache_flush>
		}
		metal_cache_invalidate(sg_out[i].virt, sg_out[i].len);
10004c20:	697a      	ldr	r2, [r7, #20]
10004c22:	4613      	mov	r3, r2
10004c24:	005b      	lsls	r3, r3, #1
10004c26:	4413      	add	r3, r2
10004c28:	009b      	lsls	r3, r3, #2
10004c2a:	461a      	mov	r2, r3
10004c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10004c2e:	4413      	add	r3, r2
10004c30:	6818      	ldr	r0, [r3, #0]
10004c32:	697a      	ldr	r2, [r7, #20]
10004c34:	4613      	mov	r3, r2
10004c36:	005b      	lsls	r3, r3, #1
10004c38:	4413      	add	r3, r2
10004c3a:	009b      	lsls	r3, r3, #2
10004c3c:	461a      	mov	r2, r3
10004c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10004c40:	4413      	add	r3, r2
10004c42:	689b      	ldr	r3, [r3, #8]
10004c44:	4619      	mov	r1, r3
10004c46:	f7ff fea7 	bl	10004998 <metal_cache_invalidate>
	for (i = 0; i < nents_in; i++) {
10004c4a:	697b      	ldr	r3, [r7, #20]
10004c4c:	3301      	adds	r3, #1
10004c4e:	617b      	str	r3, [r7, #20]
10004c50:	697a      	ldr	r2, [r7, #20]
10004c52:	6a3b      	ldr	r3, [r7, #32]
10004c54:	429a      	cmp	r2, r3
10004c56:	dbcb      	blt.n	10004bf0 <metal_generic_dev_dma_map+0x30>
	}

	return nents_in;
10004c58:	6a3b      	ldr	r3, [r7, #32]
}
10004c5a:	4618      	mov	r0, r3
10004c5c:	3718      	adds	r7, #24
10004c5e:	46bd      	mov	sp, r7
10004c60:	bd80      	pop	{r7, pc}

10004c62 <metal_generic_dev_dma_unmap>:
void metal_generic_dev_dma_unmap(struct metal_bus *bus,
				 struct metal_device *device,
				 uint32_t dir,
				 struct metal_sg *sg,
				 int nents)
{
10004c62:	b580      	push	{r7, lr}
10004c64:	b086      	sub	sp, #24
10004c66:	af00      	add	r7, sp, #0
10004c68:	60f8      	str	r0, [r7, #12]
10004c6a:	60b9      	str	r1, [r7, #8]
10004c6c:	607a      	str	r2, [r7, #4]
10004c6e:	603b      	str	r3, [r7, #0]
	int i;
	(void)bus;
	(void)device;
	(void)dir;

	for (i = 0; i < nents; i++) {
10004c70:	2300      	movs	r3, #0
10004c72:	617b      	str	r3, [r7, #20]
10004c74:	e017      	b.n	10004ca6 <metal_generic_dev_dma_unmap+0x44>
		metal_cache_invalidate(sg[i].virt, sg[i].len);
10004c76:	697a      	ldr	r2, [r7, #20]
10004c78:	4613      	mov	r3, r2
10004c7a:	005b      	lsls	r3, r3, #1
10004c7c:	4413      	add	r3, r2
10004c7e:	009b      	lsls	r3, r3, #2
10004c80:	461a      	mov	r2, r3
10004c82:	683b      	ldr	r3, [r7, #0]
10004c84:	4413      	add	r3, r2
10004c86:	6818      	ldr	r0, [r3, #0]
10004c88:	697a      	ldr	r2, [r7, #20]
10004c8a:	4613      	mov	r3, r2
10004c8c:	005b      	lsls	r3, r3, #1
10004c8e:	4413      	add	r3, r2
10004c90:	009b      	lsls	r3, r3, #2
10004c92:	461a      	mov	r2, r3
10004c94:	683b      	ldr	r3, [r7, #0]
10004c96:	4413      	add	r3, r2
10004c98:	689b      	ldr	r3, [r3, #8]
10004c9a:	4619      	mov	r1, r3
10004c9c:	f7ff fe7c 	bl	10004998 <metal_cache_invalidate>
	for (i = 0; i < nents; i++) {
10004ca0:	697b      	ldr	r3, [r7, #20]
10004ca2:	3301      	adds	r3, #1
10004ca4:	617b      	str	r3, [r7, #20]
10004ca6:	697a      	ldr	r2, [r7, #20]
10004ca8:	6a3b      	ldr	r3, [r7, #32]
10004caa:	429a      	cmp	r2, r3
10004cac:	dbe3      	blt.n	10004c76 <metal_generic_dev_dma_unmap+0x14>
	}
}
10004cae:	bf00      	nop
10004cb0:	bf00      	nop
10004cb2:	3718      	adds	r7, #24
10004cb4:	46bd      	mov	sp, r7
10004cb6:	bd80      	pop	{r7, pc}

10004cb8 <metal_generic_dev_sys_open>:
#include <metal/io.h>
#include <metal/sys.h>
#include <metal/utilities.h>

int metal_generic_dev_sys_open(struct metal_device *dev)
{
10004cb8:	b580      	push	{r7, lr}
10004cba:	b084      	sub	sp, #16
10004cbc:	af00      	add	r7, sp, #0
10004cbe:	6078      	str	r0, [r7, #4]
	struct metal_io_region *io;
	unsigned int i;

	/* map I/O memory regions */
	for (i = 0; i < dev->num_regions; i++) {
10004cc0:	2300      	movs	r3, #0
10004cc2:	60fb      	str	r3, [r7, #12]
10004cc4:	e013      	b.n	10004cee <metal_generic_dev_sys_open+0x36>
		io = &dev->regions[i];
10004cc6:	68fa      	ldr	r2, [r7, #12]
10004cc8:	4613      	mov	r3, r2
10004cca:	00db      	lsls	r3, r3, #3
10004ccc:	1a9b      	subs	r3, r3, r2
10004cce:	00db      	lsls	r3, r3, #3
10004cd0:	3308      	adds	r3, #8
10004cd2:	687a      	ldr	r2, [r7, #4]
10004cd4:	4413      	add	r3, r2
10004cd6:	3304      	adds	r3, #4
10004cd8:	60bb      	str	r3, [r7, #8]
		if (!io->size)
10004cda:	68bb      	ldr	r3, [r7, #8]
10004cdc:	689b      	ldr	r3, [r3, #8]
10004cde:	2b00      	cmp	r3, #0
10004ce0:	d00b      	beq.n	10004cfa <metal_generic_dev_sys_open+0x42>
			break;
		metal_sys_io_mem_map(io);
10004ce2:	68b8      	ldr	r0, [r7, #8]
10004ce4:	f000 f81e 	bl	10004d24 <metal_sys_io_mem_map>
	for (i = 0; i < dev->num_regions; i++) {
10004ce8:	68fb      	ldr	r3, [r7, #12]
10004cea:	3301      	adds	r3, #1
10004cec:	60fb      	str	r3, [r7, #12]
10004cee:	687b      	ldr	r3, [r7, #4]
10004cf0:	689b      	ldr	r3, [r3, #8]
10004cf2:	68fa      	ldr	r2, [r7, #12]
10004cf4:	429a      	cmp	r2, r3
10004cf6:	d3e6      	bcc.n	10004cc6 <metal_generic_dev_sys_open+0xe>
10004cf8:	e000      	b.n	10004cfc <metal_generic_dev_sys_open+0x44>
			break;
10004cfa:	bf00      	nop
	}

	return 0;
10004cfc:	2300      	movs	r3, #0
}
10004cfe:	4618      	mov	r0, r3
10004d00:	3710      	adds	r7, #16
10004d02:	46bd      	mov	sp, r7
10004d04:	bd80      	pop	{r7, pc}
	...

10004d08 <metal_sys_init>:
#include <metal/device.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
10004d08:	b580      	push	{r7, lr}
10004d0a:	b082      	sub	sp, #8
10004d0c:	af00      	add	r7, sp, #0
10004d0e:	6078      	str	r0, [r7, #4]
	metal_unused(params);
	metal_bus_register(&metal_generic_bus);
10004d10:	4803      	ldr	r0, [pc, #12]	@ (10004d20 <metal_sys_init+0x18>)
10004d12:	f7ff fe4f 	bl	100049b4 <metal_bus_register>
	return 0;
10004d16:	2300      	movs	r3, #0
}
10004d18:	4618      	mov	r0, r3
10004d1a:	3708      	adds	r7, #8
10004d1c:	46bd      	mov	sp, r7
10004d1e:	bd80      	pop	{r7, pc}
10004d20:	1002000c 	.word	0x1002000c

10004d24 <metal_sys_io_mem_map>:
 */

#include <metal/io.h>

void metal_sys_io_mem_map(struct metal_io_region *io)
{
10004d24:	b580      	push	{r7, lr}
10004d26:	b086      	sub	sp, #24
10004d28:	af00      	add	r7, sp, #0
10004d2a:	6078      	str	r0, [r7, #4]
	unsigned long p;
	size_t psize;
	size_t *va;

	va = io->virt;
10004d2c:	687b      	ldr	r3, [r7, #4]
10004d2e:	681b      	ldr	r3, [r3, #0]
10004d30:	60fb      	str	r3, [r7, #12]
	psize = (size_t)io->size;
10004d32:	687b      	ldr	r3, [r7, #4]
10004d34:	689b      	ldr	r3, [r3, #8]
10004d36:	613b      	str	r3, [r7, #16]
	if (psize) {
10004d38:	693b      	ldr	r3, [r7, #16]
10004d3a:	2b00      	cmp	r3, #0
10004d3c:	d02c      	beq.n	10004d98 <metal_sys_io_mem_map+0x74>
		if (psize >> io->page_shift)
10004d3e:	687b      	ldr	r3, [r7, #4]
10004d40:	68db      	ldr	r3, [r3, #12]
10004d42:	693a      	ldr	r2, [r7, #16]
10004d44:	fa22 f303 	lsr.w	r3, r2, r3
10004d48:	2b00      	cmp	r3, #0
10004d4a:	d005      	beq.n	10004d58 <metal_sys_io_mem_map+0x34>
			psize = (size_t)1 << io->page_shift;
10004d4c:	687b      	ldr	r3, [r7, #4]
10004d4e:	68db      	ldr	r3, [r3, #12]
10004d50:	2201      	movs	r2, #1
10004d52:	fa02 f303 	lsl.w	r3, r2, r3
10004d56:	613b      	str	r3, [r7, #16]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
10004d58:	2300      	movs	r3, #0
10004d5a:	617b      	str	r3, [r7, #20]
10004d5c:	e013      	b.n	10004d86 <metal_sys_io_mem_map+0x62>
			metal_machine_io_mem_map(va, io->physmap[p],
10004d5e:	687b      	ldr	r3, [r7, #4]
10004d60:	685a      	ldr	r2, [r3, #4]
10004d62:	697b      	ldr	r3, [r7, #20]
10004d64:	009b      	lsls	r3, r3, #2
10004d66:	4413      	add	r3, r2
10004d68:	6819      	ldr	r1, [r3, #0]
10004d6a:	687b      	ldr	r3, [r7, #4]
10004d6c:	695b      	ldr	r3, [r3, #20]
10004d6e:	693a      	ldr	r2, [r7, #16]
10004d70:	68f8      	ldr	r0, [r7, #12]
10004d72:	f001 fa2f 	bl	100061d4 <metal_machine_io_mem_map>
						 psize, io->mem_flags);
			va += psize;
10004d76:	693b      	ldr	r3, [r7, #16]
10004d78:	009b      	lsls	r3, r3, #2
10004d7a:	68fa      	ldr	r2, [r7, #12]
10004d7c:	4413      	add	r3, r2
10004d7e:	60fb      	str	r3, [r7, #12]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
10004d80:	697b      	ldr	r3, [r7, #20]
10004d82:	3301      	adds	r3, #1
10004d84:	617b      	str	r3, [r7, #20]
10004d86:	687b      	ldr	r3, [r7, #4]
10004d88:	689a      	ldr	r2, [r3, #8]
10004d8a:	687b      	ldr	r3, [r7, #4]
10004d8c:	68db      	ldr	r3, [r3, #12]
10004d8e:	fa22 f303 	lsr.w	r3, r2, r3
10004d92:	697a      	ldr	r2, [r7, #20]
10004d94:	429a      	cmp	r2, r3
10004d96:	d9e2      	bls.n	10004d5e <metal_sys_io_mem_map+0x3a>
		}
	}
}
10004d98:	bf00      	nop
10004d9a:	3718      	adds	r7, #24
10004d9c:	46bd      	mov	sp, r7
10004d9e:	bd80      	pop	{r7, pc}

10004da0 <metal_list_init>:
{
10004da0:	b480      	push	{r7}
10004da2:	b083      	sub	sp, #12
10004da4:	af00      	add	r7, sp, #0
10004da6:	6078      	str	r0, [r7, #4]
	list->prev = list;
10004da8:	687b      	ldr	r3, [r7, #4]
10004daa:	687a      	ldr	r2, [r7, #4]
10004dac:	605a      	str	r2, [r3, #4]
	list->next = list;
10004dae:	687b      	ldr	r3, [r7, #4]
10004db0:	687a      	ldr	r2, [r7, #4]
10004db2:	601a      	str	r2, [r3, #0]
}
10004db4:	bf00      	nop
10004db6:	370c      	adds	r7, #12
10004db8:	46bd      	mov	sp, r7
10004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
10004dbe:	4770      	bx	lr

10004dc0 <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
10004dc0:	b580      	push	{r7, lr}
10004dc2:	b084      	sub	sp, #16
10004dc4:	af00      	add	r7, sp, #0
10004dc6:	6078      	str	r0, [r7, #4]
	int error = 0;
10004dc8:	2300      	movs	r3, #0
10004dca:	60fb      	str	r3, [r7, #12]

	memset(&_metal, 0, sizeof(_metal));
10004dcc:	2220      	movs	r2, #32
10004dce:	2100      	movs	r1, #0
10004dd0:	4810      	ldr	r0, [pc, #64]	@ (10004e14 <metal_init+0x54>)
10004dd2:	f002 f8bc 	bl	10006f4e <memset>

	_metal.common.log_handler   = params->log_handler;
10004dd6:	687b      	ldr	r3, [r7, #4]
10004dd8:	681b      	ldr	r3, [r3, #0]
10004dda:	4a0e      	ldr	r2, [pc, #56]	@ (10004e14 <metal_init+0x54>)
10004ddc:	6053      	str	r3, [r2, #4]
	_metal.common.log_level     = params->log_level;
10004dde:	687b      	ldr	r3, [r7, #4]
10004de0:	791a      	ldrb	r2, [r3, #4]
10004de2:	4b0c      	ldr	r3, [pc, #48]	@ (10004e14 <metal_init+0x54>)
10004de4:	701a      	strb	r2, [r3, #0]

	metal_list_init(&_metal.common.bus_list);
10004de6:	480c      	ldr	r0, [pc, #48]	@ (10004e18 <metal_init+0x58>)
10004de8:	f7ff ffda 	bl	10004da0 <metal_list_init>
	metal_list_init(&_metal.common.generic_shmem_list);
10004dec:	480b      	ldr	r0, [pc, #44]	@ (10004e1c <metal_init+0x5c>)
10004dee:	f7ff ffd7 	bl	10004da0 <metal_list_init>
	metal_list_init(&_metal.common.generic_device_list);
10004df2:	480b      	ldr	r0, [pc, #44]	@ (10004e20 <metal_init+0x60>)
10004df4:	f7ff ffd4 	bl	10004da0 <metal_list_init>

	error = metal_sys_init(params);
10004df8:	6878      	ldr	r0, [r7, #4]
10004dfa:	f7ff ff85 	bl	10004d08 <metal_sys_init>
10004dfe:	60f8      	str	r0, [r7, #12]
	if (error)
10004e00:	68fb      	ldr	r3, [r7, #12]
10004e02:	2b00      	cmp	r3, #0
10004e04:	d001      	beq.n	10004e0a <metal_init+0x4a>
		return error;
10004e06:	68fb      	ldr	r3, [r7, #12]
10004e08:	e000      	b.n	10004e0c <metal_init+0x4c>

	return error;
10004e0a:	68fb      	ldr	r3, [r7, #12]
}
10004e0c:	4618      	mov	r0, r3
10004e0e:	3710      	adds	r7, #16
10004e10:	46bd      	mov	sp, r7
10004e12:	bd80      	pop	{r7, pc}
10004e14:	1002020c 	.word	0x1002020c
10004e18:	10020214 	.word	0x10020214
10004e1c:	1002021c 	.word	0x1002021c
10004e20:	10020224 	.word	0x10020224

10004e24 <metal_io_virt>:
 * @param[in]	offset	Offset into shared memory segment.
 * @return	NULL if offset is out of range, or pointer to offset.
 */
static inline void *
metal_io_virt(struct metal_io_region *io, unsigned long offset)
{
10004e24:	b480      	push	{r7}
10004e26:	b083      	sub	sp, #12
10004e28:	af00      	add	r7, sp, #0
10004e2a:	6078      	str	r0, [r7, #4]
10004e2c:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset < io->size
10004e2e:	687b      	ldr	r3, [r7, #4]
10004e30:	681b      	ldr	r3, [r3, #0]
		? (void *)((uintptr_t)io->virt + offset)
		: NULL);
10004e32:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
10004e36:	d00a      	beq.n	10004e4e <metal_io_virt+0x2a>
	return (io->virt != METAL_BAD_VA && offset < io->size
10004e38:	687b      	ldr	r3, [r7, #4]
10004e3a:	689b      	ldr	r3, [r3, #8]
10004e3c:	683a      	ldr	r2, [r7, #0]
10004e3e:	429a      	cmp	r2, r3
10004e40:	d205      	bcs.n	10004e4e <metal_io_virt+0x2a>
		? (void *)((uintptr_t)io->virt + offset)
10004e42:	687b      	ldr	r3, [r7, #4]
10004e44:	681b      	ldr	r3, [r3, #0]
10004e46:	461a      	mov	r2, r3
10004e48:	683b      	ldr	r3, [r7, #0]
10004e4a:	4413      	add	r3, r2
		: NULL);
10004e4c:	e000      	b.n	10004e50 <metal_io_virt+0x2c>
10004e4e:	2300      	movs	r3, #0
}
10004e50:	4618      	mov	r0, r3
10004e52:	370c      	adds	r7, #12
10004e54:	46bd      	mov	sp, r7
10004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
10004e5a:	4770      	bx	lr

10004e5c <metal_io_init>:

void metal_io_init(struct metal_io_region *io, void *virt,
	      const metal_phys_addr_t *physmap, size_t size,
	      unsigned int page_shift, unsigned int mem_flags,
	      const struct metal_io_ops *ops)
{
10004e5c:	b5b0      	push	{r4, r5, r7, lr}
10004e5e:	b08c      	sub	sp, #48	@ 0x30
10004e60:	af00      	add	r7, sp, #0
10004e62:	60f8      	str	r0, [r7, #12]
10004e64:	60b9      	str	r1, [r7, #8]
10004e66:	607a      	str	r2, [r7, #4]
10004e68:	603b      	str	r3, [r7, #0]
	const struct metal_io_ops nops = {
10004e6a:	f107 0310 	add.w	r3, r7, #16
10004e6e:	2220      	movs	r2, #32
10004e70:	2100      	movs	r1, #0
10004e72:	4618      	mov	r0, r3
10004e74:	f002 f86b 	bl	10006f4e <memset>
		NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
	};

	io->virt = virt;
10004e78:	68fb      	ldr	r3, [r7, #12]
10004e7a:	68ba      	ldr	r2, [r7, #8]
10004e7c:	601a      	str	r2, [r3, #0]
	io->physmap = physmap;
10004e7e:	68fb      	ldr	r3, [r7, #12]
10004e80:	687a      	ldr	r2, [r7, #4]
10004e82:	605a      	str	r2, [r3, #4]
	io->size = size;
10004e84:	68fb      	ldr	r3, [r7, #12]
10004e86:	683a      	ldr	r2, [r7, #0]
10004e88:	609a      	str	r2, [r3, #8]
	io->page_shift = page_shift;
10004e8a:	68fb      	ldr	r3, [r7, #12]
10004e8c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
10004e8e:	60da      	str	r2, [r3, #12]
	if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)
10004e90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
10004e92:	2b1f      	cmp	r3, #31
10004e94:	d904      	bls.n	10004ea0 <metal_io_init+0x44>
		/* avoid overflow */
		io->page_mask = -1UL;
10004e96:	68fb      	ldr	r3, [r7, #12]
10004e98:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
10004e9c:	611a      	str	r2, [r3, #16]
10004e9e:	e006      	b.n	10004eae <metal_io_init+0x52>
	else
		io->page_mask = (1UL << page_shift) - 1UL;
10004ea0:	2201      	movs	r2, #1
10004ea2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
10004ea4:	fa02 f303 	lsl.w	r3, r2, r3
10004ea8:	1e5a      	subs	r2, r3, #1
10004eaa:	68fb      	ldr	r3, [r7, #12]
10004eac:	611a      	str	r2, [r3, #16]
	io->mem_flags = mem_flags;
10004eae:	68fb      	ldr	r3, [r7, #12]
10004eb0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
10004eb2:	615a      	str	r2, [r3, #20]
	io->ops = ops ? *ops : nops;
10004eb4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
10004eb6:	2b00      	cmp	r3, #0
10004eb8:	d00b      	beq.n	10004ed2 <metal_io_init+0x76>
10004eba:	68fb      	ldr	r3, [r7, #12]
10004ebc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
10004ebe:	f103 0418 	add.w	r4, r3, #24
10004ec2:	4615      	mov	r5, r2
10004ec4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
10004ec6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
10004ec8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
10004ecc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
10004ed0:	e00a      	b.n	10004ee8 <metal_io_init+0x8c>
10004ed2:	68fb      	ldr	r3, [r7, #12]
10004ed4:	f103 0418 	add.w	r4, r3, #24
10004ed8:	f107 0510 	add.w	r5, r7, #16
10004edc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
10004ede:	c40f      	stmia	r4!, {r0, r1, r2, r3}
10004ee0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
10004ee4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	metal_sys_io_mem_map(io);
10004ee8:	68f8      	ldr	r0, [r7, #12]
10004eea:	f7ff ff1b 	bl	10004d24 <metal_sys_io_mem_map>
}
10004eee:	bf00      	nop
10004ef0:	3730      	adds	r7, #48	@ 0x30
10004ef2:	46bd      	mov	sp, r7
10004ef4:	bdb0      	pop	{r4, r5, r7, pc}

10004ef6 <metal_io_block_read>:

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
10004ef6:	b590      	push	{r4, r7, lr}
10004ef8:	b08b      	sub	sp, #44	@ 0x2c
10004efa:	af02      	add	r7, sp, #8
10004efc:	60f8      	str	r0, [r7, #12]
10004efe:	60b9      	str	r1, [r7, #8]
10004f00:	607a      	str	r2, [r7, #4]
10004f02:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
10004f04:	68b9      	ldr	r1, [r7, #8]
10004f06:	68f8      	ldr	r0, [r7, #12]
10004f08:	f7ff ff8c 	bl	10004e24 <metal_io_virt>
10004f0c:	61f8      	str	r0, [r7, #28]
	unsigned char *dest = dst;
10004f0e:	687b      	ldr	r3, [r7, #4]
10004f10:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (!ptr)
10004f12:	69fb      	ldr	r3, [r7, #28]
10004f14:	2b00      	cmp	r3, #0
10004f16:	d102      	bne.n	10004f1e <metal_io_block_read+0x28>
		return -ERANGE;
10004f18:	f06f 0321 	mvn.w	r3, #33	@ 0x21
10004f1c:	e05c      	b.n	10004fd8 <metal_io_block_read+0xe2>
	if ((offset + len) > io->size)
10004f1e:	683a      	ldr	r2, [r7, #0]
10004f20:	68bb      	ldr	r3, [r7, #8]
10004f22:	441a      	add	r2, r3
10004f24:	68fb      	ldr	r3, [r7, #12]
10004f26:	689b      	ldr	r3, [r3, #8]
10004f28:	429a      	cmp	r2, r3
10004f2a:	d904      	bls.n	10004f36 <metal_io_block_read+0x40>
		len = io->size - offset;
10004f2c:	68fb      	ldr	r3, [r7, #12]
10004f2e:	689a      	ldr	r2, [r3, #8]
10004f30:	68bb      	ldr	r3, [r7, #8]
10004f32:	1ad3      	subs	r3, r2, r3
10004f34:	603b      	str	r3, [r7, #0]
	retlen = len;
10004f36:	683b      	ldr	r3, [r7, #0]
10004f38:	617b      	str	r3, [r7, #20]
	if (io->ops.block_read) {
10004f3a:	68fb      	ldr	r3, [r7, #12]
10004f3c:	6a1b      	ldr	r3, [r3, #32]
10004f3e:	2b00      	cmp	r3, #0
10004f40:	d00a      	beq.n	10004f58 <metal_io_block_read+0x62>
		retlen = (*io->ops.block_read)(
10004f42:	68fb      	ldr	r3, [r7, #12]
10004f44:	6a1c      	ldr	r4, [r3, #32]
10004f46:	683b      	ldr	r3, [r7, #0]
10004f48:	9300      	str	r3, [sp, #0]
10004f4a:	2305      	movs	r3, #5
10004f4c:	687a      	ldr	r2, [r7, #4]
10004f4e:	68b9      	ldr	r1, [r7, #8]
10004f50:	68f8      	ldr	r0, [r7, #12]
10004f52:	47a0      	blx	r4
10004f54:	6178      	str	r0, [r7, #20]
10004f56:	e03e      	b.n	10004fd6 <metal_io_block_read+0xe0>
			io, offset, dst, memory_order_seq_cst, len);
	} else {
		atomic_thread_fence(memory_order_seq_cst);
10004f58:	f3bf 8f5b 	dmb	ish
		while ( len && (
10004f5c:	e00c      	b.n	10004f78 <metal_io_block_read+0x82>
			((uintptr_t)dest % sizeof(int)) ||
			((uintptr_t)ptr % sizeof(int)))) {
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
10004f5e:	69fb      	ldr	r3, [r7, #28]
10004f60:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
10004f62:	69bb      	ldr	r3, [r7, #24]
10004f64:	701a      	strb	r2, [r3, #0]
			dest++;
10004f66:	69bb      	ldr	r3, [r7, #24]
10004f68:	3301      	adds	r3, #1
10004f6a:	61bb      	str	r3, [r7, #24]
			ptr++;
10004f6c:	69fb      	ldr	r3, [r7, #28]
10004f6e:	3301      	adds	r3, #1
10004f70:	61fb      	str	r3, [r7, #28]
			len--;
10004f72:	683b      	ldr	r3, [r7, #0]
10004f74:	3b01      	subs	r3, #1
10004f76:	603b      	str	r3, [r7, #0]
		while ( len && (
10004f78:	683b      	ldr	r3, [r7, #0]
10004f7a:	2b00      	cmp	r3, #0
10004f7c:	d017      	beq.n	10004fae <metal_io_block_read+0xb8>
			((uintptr_t)dest % sizeof(int)) ||
10004f7e:	69bb      	ldr	r3, [r7, #24]
10004f80:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
10004f84:	2b00      	cmp	r3, #0
10004f86:	d1ea      	bne.n	10004f5e <metal_io_block_read+0x68>
			((uintptr_t)ptr % sizeof(int)))) {
10004f88:	69fb      	ldr	r3, [r7, #28]
10004f8a:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)dest % sizeof(int)) ||
10004f8e:	2b00      	cmp	r3, #0
10004f90:	d1e5      	bne.n	10004f5e <metal_io_block_read+0x68>
		}
		for (; len >= (int)sizeof(int); dest += sizeof(int),
10004f92:	e00c      	b.n	10004fae <metal_io_block_read+0xb8>
					ptr += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)dest = *(const unsigned int *)ptr;
10004f94:	69fb      	ldr	r3, [r7, #28]
10004f96:	681a      	ldr	r2, [r3, #0]
10004f98:	69bb      	ldr	r3, [r7, #24]
10004f9a:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
10004f9c:	69bb      	ldr	r3, [r7, #24]
10004f9e:	3304      	adds	r3, #4
10004fa0:	61bb      	str	r3, [r7, #24]
					ptr += sizeof(int),
10004fa2:	69fb      	ldr	r3, [r7, #28]
10004fa4:	3304      	adds	r3, #4
10004fa6:	61fb      	str	r3, [r7, #28]
					len -= sizeof(int))
10004fa8:	683b      	ldr	r3, [r7, #0]
10004faa:	3b04      	subs	r3, #4
10004fac:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
10004fae:	683b      	ldr	r3, [r7, #0]
10004fb0:	2b03      	cmp	r3, #3
10004fb2:	dcef      	bgt.n	10004f94 <metal_io_block_read+0x9e>
		for (; len != 0; dest++, ptr++, len--)
10004fb4:	e00c      	b.n	10004fd0 <metal_io_block_read+0xda>
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
10004fb6:	69fb      	ldr	r3, [r7, #28]
10004fb8:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
10004fba:	69bb      	ldr	r3, [r7, #24]
10004fbc:	701a      	strb	r2, [r3, #0]
		for (; len != 0; dest++, ptr++, len--)
10004fbe:	69bb      	ldr	r3, [r7, #24]
10004fc0:	3301      	adds	r3, #1
10004fc2:	61bb      	str	r3, [r7, #24]
10004fc4:	69fb      	ldr	r3, [r7, #28]
10004fc6:	3301      	adds	r3, #1
10004fc8:	61fb      	str	r3, [r7, #28]
10004fca:	683b      	ldr	r3, [r7, #0]
10004fcc:	3b01      	subs	r3, #1
10004fce:	603b      	str	r3, [r7, #0]
10004fd0:	683b      	ldr	r3, [r7, #0]
10004fd2:	2b00      	cmp	r3, #0
10004fd4:	d1ef      	bne.n	10004fb6 <metal_io_block_read+0xc0>
	}
	return retlen;
10004fd6:	697b      	ldr	r3, [r7, #20]
}
10004fd8:	4618      	mov	r0, r3
10004fda:	3724      	adds	r7, #36	@ 0x24
10004fdc:	46bd      	mov	sp, r7
10004fde:	bd90      	pop	{r4, r7, pc}

10004fe0 <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
10004fe0:	b590      	push	{r4, r7, lr}
10004fe2:	b08b      	sub	sp, #44	@ 0x2c
10004fe4:	af02      	add	r7, sp, #8
10004fe6:	60f8      	str	r0, [r7, #12]
10004fe8:	60b9      	str	r1, [r7, #8]
10004fea:	607a      	str	r2, [r7, #4]
10004fec:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
10004fee:	68b9      	ldr	r1, [r7, #8]
10004ff0:	68f8      	ldr	r0, [r7, #12]
10004ff2:	f7ff ff17 	bl	10004e24 <metal_io_virt>
10004ff6:	61f8      	str	r0, [r7, #28]
	const unsigned char *source = src;
10004ff8:	687b      	ldr	r3, [r7, #4]
10004ffa:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (!ptr)
10004ffc:	69fb      	ldr	r3, [r7, #28]
10004ffe:	2b00      	cmp	r3, #0
10005000:	d102      	bne.n	10005008 <metal_io_block_write+0x28>
		return -ERANGE;
10005002:	f06f 0321 	mvn.w	r3, #33	@ 0x21
10005006:	e05b      	b.n	100050c0 <metal_io_block_write+0xe0>
	if ((offset + len) > io->size)
10005008:	683a      	ldr	r2, [r7, #0]
1000500a:	68bb      	ldr	r3, [r7, #8]
1000500c:	441a      	add	r2, r3
1000500e:	68fb      	ldr	r3, [r7, #12]
10005010:	689b      	ldr	r3, [r3, #8]
10005012:	429a      	cmp	r2, r3
10005014:	d904      	bls.n	10005020 <metal_io_block_write+0x40>
		len = io->size - offset;
10005016:	68fb      	ldr	r3, [r7, #12]
10005018:	689a      	ldr	r2, [r3, #8]
1000501a:	68bb      	ldr	r3, [r7, #8]
1000501c:	1ad3      	subs	r3, r2, r3
1000501e:	603b      	str	r3, [r7, #0]
	retlen = len;
10005020:	683b      	ldr	r3, [r7, #0]
10005022:	617b      	str	r3, [r7, #20]
	if (io->ops.block_write) {
10005024:	68fb      	ldr	r3, [r7, #12]
10005026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005028:	2b00      	cmp	r3, #0
1000502a:	d017      	beq.n	1000505c <metal_io_block_write+0x7c>
		retlen = (*io->ops.block_write)(
1000502c:	68fb      	ldr	r3, [r7, #12]
1000502e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
10005030:	683b      	ldr	r3, [r7, #0]
10005032:	9300      	str	r3, [sp, #0]
10005034:	2305      	movs	r3, #5
10005036:	687a      	ldr	r2, [r7, #4]
10005038:	68b9      	ldr	r1, [r7, #8]
1000503a:	68f8      	ldr	r0, [r7, #12]
1000503c:	47a0      	blx	r4
1000503e:	6178      	str	r0, [r7, #20]
10005040:	e03d      	b.n	100050be <metal_io_block_write+0xde>
	} else {
		while ( len && (
			((uintptr_t)ptr % sizeof(int)) ||
			((uintptr_t)source % sizeof(int)))) {
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
10005042:	69bb      	ldr	r3, [r7, #24]
10005044:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
10005046:	69fb      	ldr	r3, [r7, #28]
10005048:	701a      	strb	r2, [r3, #0]
			ptr++;
1000504a:	69fb      	ldr	r3, [r7, #28]
1000504c:	3301      	adds	r3, #1
1000504e:	61fb      	str	r3, [r7, #28]
			source++;
10005050:	69bb      	ldr	r3, [r7, #24]
10005052:	3301      	adds	r3, #1
10005054:	61bb      	str	r3, [r7, #24]
			len--;
10005056:	683b      	ldr	r3, [r7, #0]
10005058:	3b01      	subs	r3, #1
1000505a:	603b      	str	r3, [r7, #0]
		while ( len && (
1000505c:	683b      	ldr	r3, [r7, #0]
1000505e:	2b00      	cmp	r3, #0
10005060:	d017      	beq.n	10005092 <metal_io_block_write+0xb2>
			((uintptr_t)ptr % sizeof(int)) ||
10005062:	69fb      	ldr	r3, [r7, #28]
10005064:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
10005068:	2b00      	cmp	r3, #0
1000506a:	d1ea      	bne.n	10005042 <metal_io_block_write+0x62>
			((uintptr_t)source % sizeof(int)))) {
1000506c:	69bb      	ldr	r3, [r7, #24]
1000506e:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)ptr % sizeof(int)) ||
10005072:	2b00      	cmp	r3, #0
10005074:	d1e5      	bne.n	10005042 <metal_io_block_write+0x62>
		}
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
10005076:	e00c      	b.n	10005092 <metal_io_block_write+0xb2>
					source += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)ptr = *(const unsigned int *)source;
10005078:	69bb      	ldr	r3, [r7, #24]
1000507a:	681a      	ldr	r2, [r3, #0]
1000507c:	69fb      	ldr	r3, [r7, #28]
1000507e:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
10005080:	69fb      	ldr	r3, [r7, #28]
10005082:	3304      	adds	r3, #4
10005084:	61fb      	str	r3, [r7, #28]
					source += sizeof(int),
10005086:	69bb      	ldr	r3, [r7, #24]
10005088:	3304      	adds	r3, #4
1000508a:	61bb      	str	r3, [r7, #24]
					len -= sizeof(int))
1000508c:	683b      	ldr	r3, [r7, #0]
1000508e:	3b04      	subs	r3, #4
10005090:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
10005092:	683b      	ldr	r3, [r7, #0]
10005094:	2b03      	cmp	r3, #3
10005096:	dcef      	bgt.n	10005078 <metal_io_block_write+0x98>
		for (; len != 0; ptr++, source++, len--)
10005098:	e00c      	b.n	100050b4 <metal_io_block_write+0xd4>
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
1000509a:	69bb      	ldr	r3, [r7, #24]
1000509c:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
1000509e:	69fb      	ldr	r3, [r7, #28]
100050a0:	701a      	strb	r2, [r3, #0]
		for (; len != 0; ptr++, source++, len--)
100050a2:	69fb      	ldr	r3, [r7, #28]
100050a4:	3301      	adds	r3, #1
100050a6:	61fb      	str	r3, [r7, #28]
100050a8:	69bb      	ldr	r3, [r7, #24]
100050aa:	3301      	adds	r3, #1
100050ac:	61bb      	str	r3, [r7, #24]
100050ae:	683b      	ldr	r3, [r7, #0]
100050b0:	3b01      	subs	r3, #1
100050b2:	603b      	str	r3, [r7, #0]
100050b4:	683b      	ldr	r3, [r7, #0]
100050b6:	2b00      	cmp	r3, #0
100050b8:	d1ef      	bne.n	1000509a <metal_io_block_write+0xba>
		atomic_thread_fence(memory_order_seq_cst);
100050ba:	f3bf 8f5b 	dmb	ish
	}
	return retlen;
100050be:	697b      	ldr	r3, [r7, #20]
}
100050c0:	4618      	mov	r0, r3
100050c2:	3724      	adds	r7, #36	@ 0x24
100050c4:	46bd      	mov	sp, r7
100050c6:	bd90      	pop	{r4, r7, pc}

100050c8 <metal_default_log_handler>:
#include <metal/log.h>
#include <metal/sys.h>

void metal_default_log_handler(enum metal_log_level level,
			       const char *format, ...)
{
100050c8:	b40e      	push	{r1, r2, r3}
100050ca:	b480      	push	{r7}
100050cc:	b082      	sub	sp, #8
100050ce:	af00      	add	r7, sp, #0
100050d0:	4603      	mov	r3, r0
100050d2:	71fb      	strb	r3, [r7, #7]
	fprintf(stderr, "%s%s", level_strs[level], msg);
#else
	(void)level;
	(void)format;
#endif
}
100050d4:	bf00      	nop
100050d6:	3708      	adds	r7, #8
100050d8:	46bd      	mov	sp, r7
100050da:	f85d 7b04 	ldr.w	r7, [sp], #4
100050de:	b003      	add	sp, #12
100050e0:	4770      	bx	lr

100050e2 <metal_io_virt>:
{
100050e2:	b480      	push	{r7}
100050e4:	b083      	sub	sp, #12
100050e6:	af00      	add	r7, sp, #0
100050e8:	6078      	str	r0, [r7, #4]
100050ea:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset < io->size
100050ec:	687b      	ldr	r3, [r7, #4]
100050ee:	681b      	ldr	r3, [r3, #0]
		: NULL);
100050f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
100050f4:	d00a      	beq.n	1000510c <metal_io_virt+0x2a>
	return (io->virt != METAL_BAD_VA && offset < io->size
100050f6:	687b      	ldr	r3, [r7, #4]
100050f8:	689b      	ldr	r3, [r3, #8]
100050fa:	683a      	ldr	r2, [r7, #0]
100050fc:	429a      	cmp	r2, r3
100050fe:	d205      	bcs.n	1000510c <metal_io_virt+0x2a>
		? (void *)((uintptr_t)io->virt + offset)
10005100:	687b      	ldr	r3, [r7, #4]
10005102:	681b      	ldr	r3, [r3, #0]
10005104:	461a      	mov	r2, r3
10005106:	683b      	ldr	r3, [r7, #0]
10005108:	4413      	add	r3, r2
		: NULL);
1000510a:	e000      	b.n	1000510e <metal_io_virt+0x2c>
1000510c:	2300      	movs	r3, #0
}
1000510e:	4618      	mov	r0, r3
10005110:	370c      	adds	r7, #12
10005112:	46bd      	mov	sp, r7
10005114:	f85d 7b04 	ldr.w	r7, [sp], #4
10005118:	4770      	bx	lr

1000511a <metal_io_virt_to_offset>:
 * @param[in]	virt	Virtual address within segment.
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
1000511a:	b480      	push	{r7}
1000511c:	b085      	sub	sp, #20
1000511e:	af00      	add	r7, sp, #0
10005120:	6078      	str	r0, [r7, #4]
10005122:	6039      	str	r1, [r7, #0]
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
10005124:	683b      	ldr	r3, [r7, #0]
10005126:	687a      	ldr	r2, [r7, #4]
10005128:	6812      	ldr	r2, [r2, #0]
1000512a:	1a9b      	subs	r3, r3, r2
1000512c:	60fb      	str	r3, [r7, #12]

	return (offset < io->size ? offset : METAL_BAD_OFFSET);
1000512e:	687b      	ldr	r3, [r7, #4]
10005130:	689b      	ldr	r3, [r3, #8]
10005132:	68fa      	ldr	r2, [r7, #12]
10005134:	429a      	cmp	r2, r3
10005136:	d201      	bcs.n	1000513c <metal_io_virt_to_offset+0x22>
10005138:	68fb      	ldr	r3, [r7, #12]
1000513a:	e001      	b.n	10005140 <metal_io_virt_to_offset+0x26>
1000513c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
10005140:	4618      	mov	r0, r3
10005142:	3714      	adds	r7, #20
10005144:	46bd      	mov	sp, r7
10005146:	f85d 7b04 	ldr.w	r7, [sp], #4
1000514a:	4770      	bx	lr

1000514c <metal_io_read>:
 * @return	Value.
 */
static inline uint64_t
metal_io_read(struct metal_io_region *io, unsigned long offset,
	      memory_order order, int width)
{
1000514c:	b5b0      	push	{r4, r5, r7, lr}
1000514e:	b08c      	sub	sp, #48	@ 0x30
10005150:	af00      	add	r7, sp, #0
10005152:	60f8      	str	r0, [r7, #12]
10005154:	60b9      	str	r1, [r7, #8]
10005156:	603b      	str	r3, [r7, #0]
10005158:	4613      	mov	r3, r2
1000515a:	71fb      	strb	r3, [r7, #7]
	void *ptr = metal_io_virt(io, offset);
1000515c:	68b9      	ldr	r1, [r7, #8]
1000515e:	68f8      	ldr	r0, [r7, #12]
10005160:	f7ff ffbf 	bl	100050e2 <metal_io_virt>
10005164:	62f8      	str	r0, [r7, #44]	@ 0x2c

	if (io->ops.read)
10005166:	68fb      	ldr	r3, [r7, #12]
10005168:	699b      	ldr	r3, [r3, #24]
1000516a:	2b00      	cmp	r3, #0
1000516c:	d009      	beq.n	10005182 <metal_io_read+0x36>
		return (*io->ops.read)(io, offset, order, width);
1000516e:	68fb      	ldr	r3, [r7, #12]
10005170:	699c      	ldr	r4, [r3, #24]
10005172:	79fa      	ldrb	r2, [r7, #7]
10005174:	683b      	ldr	r3, [r7, #0]
10005176:	68b9      	ldr	r1, [r7, #8]
10005178:	68f8      	ldr	r0, [r7, #12]
1000517a:	47a0      	blx	r4
1000517c:	4604      	mov	r4, r0
1000517e:	460d      	mov	r5, r1
10005180:	e059      	b.n	10005236 <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_uchar) == width)
10005182:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10005184:	2b00      	cmp	r3, #0
10005186:	d012      	beq.n	100051ae <metal_io_read+0x62>
10005188:	683b      	ldr	r3, [r7, #0]
1000518a:	2b01      	cmp	r3, #1
1000518c:	d10f      	bne.n	100051ae <metal_io_read+0x62>
		return atomic_load_explicit((atomic_uchar *)ptr, order);
1000518e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10005190:	62bb      	str	r3, [r7, #40]	@ 0x28
10005192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10005194:	f3bf 8f5b 	dmb	ish
10005198:	781b      	ldrb	r3, [r3, #0]
1000519a:	f3bf 8f5b 	dmb	ish
1000519e:	b2db      	uxtb	r3, r3
100051a0:	76fb      	strb	r3, [r7, #27]
100051a2:	7efb      	ldrb	r3, [r7, #27]
100051a4:	b2db      	uxtb	r3, r3
100051a6:	2200      	movs	r2, #0
100051a8:	461c      	mov	r4, r3
100051aa:	4615      	mov	r5, r2
100051ac:	e043      	b.n	10005236 <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_ushort) == width)
100051ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
100051b0:	2b00      	cmp	r3, #0
100051b2:	d012      	beq.n	100051da <metal_io_read+0x8e>
100051b4:	683b      	ldr	r3, [r7, #0]
100051b6:	2b02      	cmp	r3, #2
100051b8:	d10f      	bne.n	100051da <metal_io_read+0x8e>
		return atomic_load_explicit((atomic_ushort *)ptr, order);
100051ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
100051bc:	627b      	str	r3, [r7, #36]	@ 0x24
100051be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100051c0:	f3bf 8f5b 	dmb	ish
100051c4:	881b      	ldrh	r3, [r3, #0]
100051c6:	f3bf 8f5b 	dmb	ish
100051ca:	b29b      	uxth	r3, r3
100051cc:	833b      	strh	r3, [r7, #24]
100051ce:	8b3b      	ldrh	r3, [r7, #24]
100051d0:	b29b      	uxth	r3, r3
100051d2:	2200      	movs	r2, #0
100051d4:	461c      	mov	r4, r3
100051d6:	4615      	mov	r5, r2
100051d8:	e02d      	b.n	10005236 <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_uint) == width)
100051da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
100051dc:	2b00      	cmp	r3, #0
100051de:	d010      	beq.n	10005202 <metal_io_read+0xb6>
100051e0:	683b      	ldr	r3, [r7, #0]
100051e2:	2b04      	cmp	r3, #4
100051e4:	d10d      	bne.n	10005202 <metal_io_read+0xb6>
		return atomic_load_explicit((atomic_uint *)ptr, order);
100051e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
100051e8:	623b      	str	r3, [r7, #32]
100051ea:	6a3b      	ldr	r3, [r7, #32]
100051ec:	f3bf 8f5b 	dmb	ish
100051f0:	681b      	ldr	r3, [r3, #0]
100051f2:	f3bf 8f5b 	dmb	ish
100051f6:	617b      	str	r3, [r7, #20]
100051f8:	697b      	ldr	r3, [r7, #20]
100051fa:	2200      	movs	r2, #0
100051fc:	461c      	mov	r4, r3
100051fe:	4615      	mov	r5, r2
10005200:	e019      	b.n	10005236 <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_ulong) == width)
10005202:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10005204:	2b00      	cmp	r3, #0
10005206:	d010      	beq.n	1000522a <metal_io_read+0xde>
10005208:	683b      	ldr	r3, [r7, #0]
1000520a:	2b04      	cmp	r3, #4
1000520c:	d10d      	bne.n	1000522a <metal_io_read+0xde>
		return atomic_load_explicit((atomic_ulong *)ptr, order);
1000520e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10005210:	61fb      	str	r3, [r7, #28]
10005212:	69fb      	ldr	r3, [r7, #28]
10005214:	f3bf 8f5b 	dmb	ish
10005218:	681b      	ldr	r3, [r3, #0]
1000521a:	f3bf 8f5b 	dmb	ish
1000521e:	613b      	str	r3, [r7, #16]
10005220:	693b      	ldr	r3, [r7, #16]
10005222:	2200      	movs	r2, #0
10005224:	461c      	mov	r4, r3
10005226:	4615      	mov	r5, r2
10005228:	e005      	b.n	10005236 <metal_io_read+0xea>
#ifndef NO_ATOMIC_64_SUPPORT
	else if (ptr && sizeof(atomic_ullong) == width)
		return atomic_load_explicit((atomic_ullong *)ptr, order);
#endif
	metal_assert(0);
1000522a:	4b06      	ldr	r3, [pc, #24]	@ (10005244 <metal_io_read+0xf8>)
1000522c:	4a06      	ldr	r2, [pc, #24]	@ (10005248 <metal_io_read+0xfc>)
1000522e:	21fe      	movs	r1, #254	@ 0xfe
10005230:	4806      	ldr	r0, [pc, #24]	@ (1000524c <metal_io_read+0x100>)
10005232:	f001 fc99 	bl	10006b68 <__assert_func>
	return 0; /* quiet compiler */
}
10005236:	4622      	mov	r2, r4
10005238:	462b      	mov	r3, r5
1000523a:	4610      	mov	r0, r2
1000523c:	4619      	mov	r1, r3
1000523e:	3730      	adds	r7, #48	@ 0x30
10005240:	46bd      	mov	sp, r7
10005242:	bdb0      	pop	{r4, r5, r7, pc}
10005244:	10007c44 	.word	0x10007c44
10005248:	10007e74 	.word	0x10007e74
1000524c:	10007c48 	.word	0x10007c48

10005250 <metal_allocate_memory>:
#ifdef __cplusplus
extern "C" {
#endif

static inline void *metal_allocate_memory(unsigned int size)
{
10005250:	b580      	push	{r7, lr}
10005252:	b082      	sub	sp, #8
10005254:	af00      	add	r7, sp, #0
10005256:	6078      	str	r0, [r7, #4]
	return malloc(size);
10005258:	6878      	ldr	r0, [r7, #4]
1000525a:	f001 fca3 	bl	10006ba4 <malloc>
1000525e:	4603      	mov	r3, r0
}
10005260:	4618      	mov	r0, r3
10005262:	3708      	adds	r7, #8
10005264:	46bd      	mov	sp, r7
10005266:	bd80      	pop	{r7, pc}

10005268 <metal_free_memory>:

static inline void metal_free_memory(void *ptr)
{
10005268:	b580      	push	{r7, lr}
1000526a:	b082      	sub	sp, #8
1000526c:	af00      	add	r7, sp, #0
1000526e:	6078      	str	r0, [r7, #4]
	free(ptr);
10005270:	6878      	ldr	r0, [r7, #4]
10005272:	f001 fc9f 	bl	10006bb4 <free>
}
10005276:	bf00      	nop
10005278:	3708      	adds	r7, #8
1000527a:	46bd      	mov	sp, r7
1000527c:	bd80      	pop	{r7, pc}

1000527e <virtqueue_allocate>:
int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
{
1000527e:	b580      	push	{r7, lr}
10005280:	b084      	sub	sp, #16
10005282:	af00      	add	r7, sp, #0
10005284:	6078      	str	r0, [r7, #4]
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
		 num_desc_extra * sizeof(struct vq_desc_extra);
10005286:	687b      	ldr	r3, [r7, #4]
10005288:	00db      	lsls	r3, r3, #3
	uint32_t vq_size = sizeof(struct virtqueue) +
1000528a:	3334      	adds	r3, #52	@ 0x34
1000528c:	60fb      	str	r3, [r7, #12]

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
1000528e:	68f8      	ldr	r0, [r7, #12]
10005290:	f7ff ffde 	bl	10005250 <metal_allocate_memory>
10005294:	60b8      	str	r0, [r7, #8]
	if (vqs) {
10005296:	68bb      	ldr	r3, [r7, #8]
10005298:	2b00      	cmp	r3, #0
1000529a:	d004      	beq.n	100052a6 <virtqueue_allocate+0x28>
		memset(vqs, 0x00, vq_size);
1000529c:	68fa      	ldr	r2, [r7, #12]
1000529e:	2100      	movs	r1, #0
100052a0:	68b8      	ldr	r0, [r7, #8]
100052a2:	f001 fe54 	bl	10006f4e <memset>
	}

	return vqs;
100052a6:	68bb      	ldr	r3, [r7, #8]
}
100052a8:	4618      	mov	r0, r3
100052aa:	3710      	adds	r7, #16
100052ac:	46bd      	mov	sp, r7
100052ae:	bd80      	pop	{r7, pc}

100052b0 <rproc_virtio_virtqueue_notify>:
#include <metal/cpu.h>
#include <metal/utilities.h>
#include <metal/alloc.h>

static void rproc_virtio_virtqueue_notify(struct virtqueue *vq)
{
100052b0:	b580      	push	{r7, lr}
100052b2:	b086      	sub	sp, #24
100052b4:	af00      	add	r7, sp, #0
100052b6:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vring_info;
	struct virtio_device *vdev;
	unsigned int vq_id = vq->vq_queue_index;
100052b8:	687b      	ldr	r3, [r7, #4]
100052ba:	891b      	ldrh	r3, [r3, #8]
100052bc:	617b      	str	r3, [r7, #20]

	vdev = vq->vq_dev;
100052be:	687b      	ldr	r3, [r7, #4]
100052c0:	681b      	ldr	r3, [r3, #0]
100052c2:	613b      	str	r3, [r7, #16]
	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
100052c4:	693b      	ldr	r3, [r7, #16]
100052c6:	3b10      	subs	r3, #16
100052c8:	60fb      	str	r3, [r7, #12]
	metal_assert(vq_id < vdev->vrings_num);
100052ca:	693b      	ldr	r3, [r7, #16]
100052cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100052ce:	697a      	ldr	r2, [r7, #20]
100052d0:	429a      	cmp	r2, r3
100052d2:	d305      	bcc.n	100052e0 <rproc_virtio_virtqueue_notify+0x30>
100052d4:	4b0d      	ldr	r3, [pc, #52]	@ (1000530c <rproc_virtio_virtqueue_notify+0x5c>)
100052d6:	4a0e      	ldr	r2, [pc, #56]	@ (10005310 <rproc_virtio_virtqueue_notify+0x60>)
100052d8:	211c      	movs	r1, #28
100052da:	480e      	ldr	r0, [pc, #56]	@ (10005314 <rproc_virtio_virtqueue_notify+0x64>)
100052dc:	f001 fc44 	bl	10006b68 <__assert_func>
	vring_info = &vdev->vrings_info[vq_id];
100052e0:	693b      	ldr	r3, [r7, #16]
100052e2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
100052e4:	697a      	ldr	r2, [r7, #20]
100052e6:	4613      	mov	r3, r2
100052e8:	005b      	lsls	r3, r3, #1
100052ea:	4413      	add	r3, r2
100052ec:	00db      	lsls	r3, r3, #3
100052ee:	440b      	add	r3, r1
100052f0:	60bb      	str	r3, [r7, #8]
	rpvdev->notify(rpvdev->priv, vring_info->notifyid);
100052f2:	68fb      	ldr	r3, [r7, #12]
100052f4:	68db      	ldr	r3, [r3, #12]
100052f6:	68fa      	ldr	r2, [r7, #12]
100052f8:	6810      	ldr	r0, [r2, #0]
100052fa:	68ba      	ldr	r2, [r7, #8]
100052fc:	6912      	ldr	r2, [r2, #16]
100052fe:	4611      	mov	r1, r2
10005300:	4798      	blx	r3
}
10005302:	bf00      	nop
10005304:	3718      	adds	r7, #24
10005306:	46bd      	mov	sp, r7
10005308:	bd80      	pop	{r7, pc}
1000530a:	bf00      	nop
1000530c:	10007c90 	.word	0x10007c90
10005310:	10007e54 	.word	0x10007e54
10005314:	10007cac 	.word	0x10007cac

10005318 <rproc_virtio_get_status>:

static unsigned char rproc_virtio_get_status(struct virtio_device *vdev)
{
10005318:	b580      	push	{r7, lr}
1000531a:	b086      	sub	sp, #24
1000531c:	af00      	add	r7, sp, #0
1000531e:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	char status;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
10005320:	687b      	ldr	r3, [r7, #4]
10005322:	3b10      	subs	r3, #16
10005324:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
10005326:	697b      	ldr	r3, [r7, #20]
10005328:	685b      	ldr	r3, [r3, #4]
1000532a:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
1000532c:	697b      	ldr	r3, [r7, #20]
1000532e:	689b      	ldr	r3, [r3, #8]
10005330:	60fb      	str	r3, [r7, #12]
	status = metal_io_read8(io,
10005332:	693b      	ldr	r3, [r7, #16]
10005334:	3318      	adds	r3, #24
10005336:	4619      	mov	r1, r3
10005338:	68f8      	ldr	r0, [r7, #12]
1000533a:	f7ff feee 	bl	1000511a <metal_io_virt_to_offset>
1000533e:	4601      	mov	r1, r0
10005340:	2301      	movs	r3, #1
10005342:	2205      	movs	r2, #5
10005344:	68f8      	ldr	r0, [r7, #12]
10005346:	f7ff ff01 	bl	1000514c <metal_io_read>
1000534a:	4602      	mov	r2, r0
1000534c:	460b      	mov	r3, r1
1000534e:	4613      	mov	r3, r2
10005350:	72fb      	strb	r3, [r7, #11]
				metal_io_virt_to_offset(io, &vdev_rsc->status));
	return status;
10005352:	7afb      	ldrb	r3, [r7, #11]
}
10005354:	4618      	mov	r0, r3
10005356:	3718      	adds	r7, #24
10005358:	46bd      	mov	sp, r7
1000535a:	bd80      	pop	{r7, pc}

1000535c <rproc_virtio_get_dfeatures>:
	rpvdev->notify(rpvdev->priv, vdev->notifyid);
}
#endif

static uint32_t rproc_virtio_get_dfeatures(struct virtio_device *vdev)
{
1000535c:	b580      	push	{r7, lr}
1000535e:	b086      	sub	sp, #24
10005360:	af00      	add	r7, sp, #0
10005362:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	uint32_t features;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
10005364:	687b      	ldr	r3, [r7, #4]
10005366:	3b10      	subs	r3, #16
10005368:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
1000536a:	697b      	ldr	r3, [r7, #20]
1000536c:	685b      	ldr	r3, [r3, #4]
1000536e:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
10005370:	697b      	ldr	r3, [r7, #20]
10005372:	689b      	ldr	r3, [r3, #8]
10005374:	60fb      	str	r3, [r7, #12]
	features = metal_io_read32(io,
10005376:	693b      	ldr	r3, [r7, #16]
10005378:	330c      	adds	r3, #12
1000537a:	4619      	mov	r1, r3
1000537c:	68f8      	ldr	r0, [r7, #12]
1000537e:	f7ff fecc 	bl	1000511a <metal_io_virt_to_offset>
10005382:	4601      	mov	r1, r0
10005384:	2304      	movs	r3, #4
10005386:	2205      	movs	r2, #5
10005388:	68f8      	ldr	r0, [r7, #12]
1000538a:	f7ff fedf 	bl	1000514c <metal_io_read>
1000538e:	4602      	mov	r2, r0
10005390:	460b      	mov	r3, r1
10005392:	4613      	mov	r3, r2
10005394:	60bb      	str	r3, [r7, #8]
			metal_io_virt_to_offset(io, &vdev_rsc->dfeatures));

	return features;
10005396:	68bb      	ldr	r3, [r7, #8]
}
10005398:	4618      	mov	r0, r3
1000539a:	3718      	adds	r7, #24
1000539c:	46bd      	mov	sp, r7
1000539e:	bd80      	pop	{r7, pc}

100053a0 <rproc_virtio_get_features>:

static uint32_t rproc_virtio_get_features(struct virtio_device *vdev)
{
100053a0:	b580      	push	{r7, lr}
100053a2:	b088      	sub	sp, #32
100053a4:	af00      	add	r7, sp, #0
100053a6:	6078      	str	r0, [r7, #4]
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	uint32_t gfeatures;
	uint32_t dfeatures;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
100053a8:	687b      	ldr	r3, [r7, #4]
100053aa:	3b10      	subs	r3, #16
100053ac:	61fb      	str	r3, [r7, #28]
	vdev_rsc = rpvdev->vdev_rsc;
100053ae:	69fb      	ldr	r3, [r7, #28]
100053b0:	685b      	ldr	r3, [r3, #4]
100053b2:	61bb      	str	r3, [r7, #24]
	io = rpvdev->vdev_rsc_io;
100053b4:	69fb      	ldr	r3, [r7, #28]
100053b6:	689b      	ldr	r3, [r3, #8]
100053b8:	617b      	str	r3, [r7, #20]
	gfeatures = metal_io_read32(io,
100053ba:	69bb      	ldr	r3, [r7, #24]
100053bc:	3310      	adds	r3, #16
100053be:	4619      	mov	r1, r3
100053c0:	6978      	ldr	r0, [r7, #20]
100053c2:	f7ff feaa 	bl	1000511a <metal_io_virt_to_offset>
100053c6:	4601      	mov	r1, r0
100053c8:	2304      	movs	r3, #4
100053ca:	2205      	movs	r2, #5
100053cc:	6978      	ldr	r0, [r7, #20]
100053ce:	f7ff febd 	bl	1000514c <metal_io_read>
100053d2:	4602      	mov	r2, r0
100053d4:	460b      	mov	r3, r1
100053d6:	4613      	mov	r3, r2
100053d8:	613b      	str	r3, [r7, #16]
			metal_io_virt_to_offset(io, &vdev_rsc->gfeatures));
	dfeatures = rproc_virtio_get_dfeatures(vdev);
100053da:	6878      	ldr	r0, [r7, #4]
100053dc:	f7ff ffbe 	bl	1000535c <rproc_virtio_get_dfeatures>
100053e0:	60f8      	str	r0, [r7, #12]

	return dfeatures & gfeatures;
100053e2:	68fa      	ldr	r2, [r7, #12]
100053e4:	693b      	ldr	r3, [r7, #16]
100053e6:	4013      	ands	r3, r2
}
100053e8:	4618      	mov	r0, r3
100053ea:	3720      	adds	r7, #32
100053ec:	46bd      	mov	sp, r7
100053ee:	bd80      	pop	{r7, pc}

100053f0 <rproc_virtio_read_config>:
}
#endif

static void rproc_virtio_read_config(struct virtio_device *vdev,
				     uint32_t offset, void *dst, int length)
{
100053f0:	b580      	push	{r7, lr}
100053f2:	b088      	sub	sp, #32
100053f4:	af00      	add	r7, sp, #0
100053f6:	60f8      	str	r0, [r7, #12]
100053f8:	60b9      	str	r1, [r7, #8]
100053fa:	607a      	str	r2, [r7, #4]
100053fc:	603b      	str	r3, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	char *config;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
100053fe:	68fb      	ldr	r3, [r7, #12]
10005400:	3b10      	subs	r3, #16
10005402:	61fb      	str	r3, [r7, #28]
	vdev_rsc = rpvdev->vdev_rsc;
10005404:	69fb      	ldr	r3, [r7, #28]
10005406:	685b      	ldr	r3, [r3, #4]
10005408:	61bb      	str	r3, [r7, #24]
	config = (char *)(&vdev_rsc->vring[vdev->vrings_num]);
1000540a:	68fb      	ldr	r3, [r7, #12]
1000540c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
1000540e:	4613      	mov	r3, r2
10005410:	009b      	lsls	r3, r3, #2
10005412:	4413      	add	r3, r2
10005414:	009b      	lsls	r3, r3, #2
10005416:	3318      	adds	r3, #24
10005418:	69ba      	ldr	r2, [r7, #24]
1000541a:	4413      	add	r3, r2
1000541c:	3304      	adds	r3, #4
1000541e:	617b      	str	r3, [r7, #20]
	io = rpvdev->vdev_rsc_io;
10005420:	69fb      	ldr	r3, [r7, #28]
10005422:	689b      	ldr	r3, [r3, #8]
10005424:	613b      	str	r3, [r7, #16]

	if (offset + length <= vdev_rsc->config_len)
10005426:	683a      	ldr	r2, [r7, #0]
10005428:	68bb      	ldr	r3, [r7, #8]
1000542a:	441a      	add	r2, r3
1000542c:	69bb      	ldr	r3, [r7, #24]
1000542e:	695b      	ldr	r3, [r3, #20]
10005430:	429a      	cmp	r2, r3
10005432:	d80c      	bhi.n	1000544e <rproc_virtio_read_config+0x5e>
		metal_io_block_read(io,
				metal_io_virt_to_offset(io, config + offset),
10005434:	697a      	ldr	r2, [r7, #20]
10005436:	68bb      	ldr	r3, [r7, #8]
10005438:	4413      	add	r3, r2
		metal_io_block_read(io,
1000543a:	4619      	mov	r1, r3
1000543c:	6938      	ldr	r0, [r7, #16]
1000543e:	f7ff fe6c 	bl	1000511a <metal_io_virt_to_offset>
10005442:	4601      	mov	r1, r0
10005444:	683b      	ldr	r3, [r7, #0]
10005446:	687a      	ldr	r2, [r7, #4]
10005448:	6938      	ldr	r0, [r7, #16]
1000544a:	f7ff fd54 	bl	10004ef6 <metal_io_block_read>
				dst, length);
}
1000544e:	bf00      	nop
10005450:	3720      	adds	r7, #32
10005452:	46bd      	mov	sp, r7
10005454:	bd80      	pop	{r7, pc}
	...

10005458 <rproc_virtio_create_vdev>:
rproc_virtio_create_vdev(unsigned int role, unsigned int notifyid,
			 void *rsc, struct metal_io_region *rsc_io,
			 void *priv,
			 rpvdev_notify_func notify,
			 virtio_dev_reset_cb rst_cb)
{
10005458:	b580      	push	{r7, lr}
1000545a:	b08e      	sub	sp, #56	@ 0x38
1000545c:	af00      	add	r7, sp, #0
1000545e:	60f8      	str	r0, [r7, #12]
10005460:	60b9      	str	r1, [r7, #8]
10005462:	607a      	str	r2, [r7, #4]
10005464:	603b      	str	r3, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vrings_info;
	struct fw_rsc_vdev *vdev_rsc = rsc;
10005466:	687b      	ldr	r3, [r7, #4]
10005468:	62fb      	str	r3, [r7, #44]	@ 0x2c
	struct virtio_device *vdev;
	unsigned int num_vrings = vdev_rsc->num_of_vrings;
1000546a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1000546c:	7e5b      	ldrb	r3, [r3, #25]
1000546e:	62bb      	str	r3, [r7, #40]	@ 0x28
	unsigned int i;

	rpvdev = metal_allocate_memory(sizeof(*rpvdev));
10005470:	2048      	movs	r0, #72	@ 0x48
10005472:	f7ff feed 	bl	10005250 <metal_allocate_memory>
10005476:	6278      	str	r0, [r7, #36]	@ 0x24
	if (!rpvdev)
10005478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1000547a:	2b00      	cmp	r3, #0
1000547c:	d101      	bne.n	10005482 <rproc_virtio_create_vdev+0x2a>
		return NULL;
1000547e:	2300      	movs	r3, #0
10005480:	e092      	b.n	100055a8 <rproc_virtio_create_vdev+0x150>
	vrings_info = metal_allocate_memory(sizeof(*vrings_info) * num_vrings);
10005482:	6aba      	ldr	r2, [r7, #40]	@ 0x28
10005484:	4613      	mov	r3, r2
10005486:	005b      	lsls	r3, r3, #1
10005488:	4413      	add	r3, r2
1000548a:	00db      	lsls	r3, r3, #3
1000548c:	4618      	mov	r0, r3
1000548e:	f7ff fedf 	bl	10005250 <metal_allocate_memory>
10005492:	6238      	str	r0, [r7, #32]
	if (!vrings_info)
10005494:	6a3b      	ldr	r3, [r7, #32]
10005496:	2b00      	cmp	r3, #0
10005498:	f000 8081 	beq.w	1000559e <rproc_virtio_create_vdev+0x146>
		goto err0;
	memset(rpvdev, 0, sizeof(*rpvdev));
1000549c:	2248      	movs	r2, #72	@ 0x48
1000549e:	2100      	movs	r1, #0
100054a0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
100054a2:	f001 fd54 	bl	10006f4e <memset>
	memset(vrings_info, 0, sizeof(*vrings_info));
100054a6:	2218      	movs	r2, #24
100054a8:	2100      	movs	r1, #0
100054aa:	6a38      	ldr	r0, [r7, #32]
100054ac:	f001 fd4f 	bl	10006f4e <memset>
	vdev = &rpvdev->vdev;
100054b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100054b2:	3310      	adds	r3, #16
100054b4:	61fb      	str	r3, [r7, #28]

	for (i = 0; i < num_vrings; i++) {
100054b6:	2300      	movs	r3, #0
100054b8:	637b      	str	r3, [r7, #52]	@ 0x34
100054ba:	e025      	b.n	10005508 <rproc_virtio_create_vdev+0xb0>
		struct virtqueue *vq;
		struct fw_rsc_vdev_vring *vring_rsc;
		unsigned int num_extra_desc = 0;
100054bc:	2300      	movs	r3, #0
100054be:	633b      	str	r3, [r7, #48]	@ 0x30

		vring_rsc = &vdev_rsc->vring[i];
100054c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
100054c2:	4613      	mov	r3, r2
100054c4:	009b      	lsls	r3, r3, #2
100054c6:	4413      	add	r3, r2
100054c8:	009b      	lsls	r3, r3, #2
100054ca:	3318      	adds	r3, #24
100054cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
100054ce:	4413      	add	r3, r2
100054d0:	3304      	adds	r3, #4
100054d2:	61bb      	str	r3, [r7, #24]
		if (role == VIRTIO_DEV_MASTER) {
100054d4:	68fb      	ldr	r3, [r7, #12]
100054d6:	2b00      	cmp	r3, #0
100054d8:	d102      	bne.n	100054e0 <rproc_virtio_create_vdev+0x88>
			num_extra_desc = vring_rsc->num;
100054da:	69bb      	ldr	r3, [r7, #24]
100054dc:	689b      	ldr	r3, [r3, #8]
100054de:	633b      	str	r3, [r7, #48]	@ 0x30
		}
		vq = virtqueue_allocate(num_extra_desc);
100054e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
100054e2:	f7ff fecc 	bl	1000527e <virtqueue_allocate>
100054e6:	6178      	str	r0, [r7, #20]
		if (!vq)
100054e8:	697b      	ldr	r3, [r7, #20]
100054ea:	2b00      	cmp	r3, #0
100054ec:	d031      	beq.n	10005552 <rproc_virtio_create_vdev+0xfa>
			goto err1;
		vrings_info[i].vq = vq;
100054ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
100054f0:	4613      	mov	r3, r2
100054f2:	005b      	lsls	r3, r3, #1
100054f4:	4413      	add	r3, r2
100054f6:	00db      	lsls	r3, r3, #3
100054f8:	461a      	mov	r2, r3
100054fa:	6a3b      	ldr	r3, [r7, #32]
100054fc:	4413      	add	r3, r2
100054fe:	697a      	ldr	r2, [r7, #20]
10005500:	601a      	str	r2, [r3, #0]
	for (i = 0; i < num_vrings; i++) {
10005502:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10005504:	3301      	adds	r3, #1
10005506:	637b      	str	r3, [r7, #52]	@ 0x34
10005508:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
1000550a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1000550c:	429a      	cmp	r2, r3
1000550e:	d3d5      	bcc.n	100054bc <rproc_virtio_create_vdev+0x64>
	}

	rpvdev->notify = notify;
10005510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10005512:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
10005514:	60da      	str	r2, [r3, #12]
	rpvdev->priv = priv;
10005516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10005518:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
1000551a:	601a      	str	r2, [r3, #0]
	vdev->vrings_info = vrings_info;
1000551c:	69fb      	ldr	r3, [r7, #28]
1000551e:	6a3a      	ldr	r2, [r7, #32]
10005520:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Assuming the shared memory has been mapped and registered if
	 * necessary
	 */
	rpvdev->vdev_rsc = vdev_rsc;
10005522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10005524:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
10005526:	605a      	str	r2, [r3, #4]
	rpvdev->vdev_rsc_io = rsc_io;
10005528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1000552a:	683a      	ldr	r2, [r7, #0]
1000552c:	609a      	str	r2, [r3, #8]

	vdev->notifyid = notifyid;
1000552e:	69fb      	ldr	r3, [r7, #28]
10005530:	68ba      	ldr	r2, [r7, #8]
10005532:	601a      	str	r2, [r3, #0]
	vdev->role = role;
10005534:	69fb      	ldr	r3, [r7, #28]
10005536:	68fa      	ldr	r2, [r7, #12]
10005538:	619a      	str	r2, [r3, #24]
	vdev->reset_cb = rst_cb;
1000553a:	69fb      	ldr	r3, [r7, #28]
1000553c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
1000553e:	61da      	str	r2, [r3, #28]
	vdev->vrings_num = num_vrings;
10005540:	69fb      	ldr	r3, [r7, #28]
10005542:	6aba      	ldr	r2, [r7, #40]	@ 0x28
10005544:	629a      	str	r2, [r3, #40]	@ 0x28
	vdev->func = &remoteproc_virtio_dispatch_funcs;
10005546:	69fb      	ldr	r3, [r7, #28]
10005548:	4a19      	ldr	r2, [pc, #100]	@ (100055b0 <rproc_virtio_create_vdev+0x158>)
1000554a:	621a      	str	r2, [r3, #32]
		/* Assume the master support all slave features */
		rproc_virtio_negotiate_features(vdev, dfeatures);
	}
#endif

	return &rpvdev->vdev;
1000554c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1000554e:	3310      	adds	r3, #16
10005550:	e02a      	b.n	100055a8 <rproc_virtio_create_vdev+0x150>
			goto err1;
10005552:	bf00      	nop

err1:
	for (i = 0; i < num_vrings; i++) {
10005554:	2300      	movs	r3, #0
10005556:	637b      	str	r3, [r7, #52]	@ 0x34
10005558:	e019      	b.n	1000558e <rproc_virtio_create_vdev+0x136>
		if (vrings_info[i].vq)
1000555a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
1000555c:	4613      	mov	r3, r2
1000555e:	005b      	lsls	r3, r3, #1
10005560:	4413      	add	r3, r2
10005562:	00db      	lsls	r3, r3, #3
10005564:	461a      	mov	r2, r3
10005566:	6a3b      	ldr	r3, [r7, #32]
10005568:	4413      	add	r3, r2
1000556a:	681b      	ldr	r3, [r3, #0]
1000556c:	2b00      	cmp	r3, #0
1000556e:	d00b      	beq.n	10005588 <rproc_virtio_create_vdev+0x130>
			metal_free_memory(vrings_info[i].vq);
10005570:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
10005572:	4613      	mov	r3, r2
10005574:	005b      	lsls	r3, r3, #1
10005576:	4413      	add	r3, r2
10005578:	00db      	lsls	r3, r3, #3
1000557a:	461a      	mov	r2, r3
1000557c:	6a3b      	ldr	r3, [r7, #32]
1000557e:	4413      	add	r3, r2
10005580:	681b      	ldr	r3, [r3, #0]
10005582:	4618      	mov	r0, r3
10005584:	f7ff fe70 	bl	10005268 <metal_free_memory>
	for (i = 0; i < num_vrings; i++) {
10005588:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1000558a:	3301      	adds	r3, #1
1000558c:	637b      	str	r3, [r7, #52]	@ 0x34
1000558e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
10005590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10005592:	429a      	cmp	r2, r3
10005594:	d3e1      	bcc.n	1000555a <rproc_virtio_create_vdev+0x102>
	}
	metal_free_memory(vrings_info);
10005596:	6a38      	ldr	r0, [r7, #32]
10005598:	f7ff fe66 	bl	10005268 <metal_free_memory>
1000559c:	e000      	b.n	100055a0 <rproc_virtio_create_vdev+0x148>
		goto err0;
1000559e:	bf00      	nop
err0:
	metal_free_memory(rpvdev);
100055a0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
100055a2:	f7ff fe61 	bl	10005268 <metal_free_memory>
	return NULL;
100055a6:	2300      	movs	r3, #0
}
100055a8:	4618      	mov	r0, r3
100055aa:	3738      	adds	r7, #56	@ 0x38
100055ac:	46bd      	mov	sp, r7
100055ae:	bd80      	pop	{r7, pc}
100055b0:	10007e30 	.word	0x10007e30

100055b4 <rproc_virtio_init_vring>:

int rproc_virtio_init_vring(struct virtio_device *vdev, unsigned int index,
			    unsigned int notifyid, void *va,
			    struct metal_io_region *io,
			    unsigned int num_descs, unsigned int align)
{
100055b4:	b480      	push	{r7}
100055b6:	b087      	sub	sp, #28
100055b8:	af00      	add	r7, sp, #0
100055ba:	60f8      	str	r0, [r7, #12]
100055bc:	60b9      	str	r1, [r7, #8]
100055be:	607a      	str	r2, [r7, #4]
100055c0:	603b      	str	r3, [r7, #0]
	struct virtio_vring_info *vring_info;
	unsigned int num_vrings;

	num_vrings = vdev->vrings_num;
100055c2:	68fb      	ldr	r3, [r7, #12]
100055c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100055c6:	617b      	str	r3, [r7, #20]
	if (index >= num_vrings)
100055c8:	68ba      	ldr	r2, [r7, #8]
100055ca:	697b      	ldr	r3, [r7, #20]
100055cc:	429a      	cmp	r2, r3
100055ce:	d302      	bcc.n	100055d6 <rproc_virtio_init_vring+0x22>
		return -RPROC_EINVAL;
100055d0:	f06f 0301 	mvn.w	r3, #1
100055d4:	e019      	b.n	1000560a <rproc_virtio_init_vring+0x56>
	vring_info = &vdev->vrings_info[index];
100055d6:	68fb      	ldr	r3, [r7, #12]
100055d8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
100055da:	68ba      	ldr	r2, [r7, #8]
100055dc:	4613      	mov	r3, r2
100055de:	005b      	lsls	r3, r3, #1
100055e0:	4413      	add	r3, r2
100055e2:	00db      	lsls	r3, r3, #3
100055e4:	440b      	add	r3, r1
100055e6:	613b      	str	r3, [r7, #16]
	vring_info->io = io;
100055e8:	693b      	ldr	r3, [r7, #16]
100055ea:	6a3a      	ldr	r2, [r7, #32]
100055ec:	615a      	str	r2, [r3, #20]
	vring_info->notifyid = notifyid;
100055ee:	693b      	ldr	r3, [r7, #16]
100055f0:	687a      	ldr	r2, [r7, #4]
100055f2:	611a      	str	r2, [r3, #16]
	vring_info->info.vaddr = va;
100055f4:	693b      	ldr	r3, [r7, #16]
100055f6:	683a      	ldr	r2, [r7, #0]
100055f8:	605a      	str	r2, [r3, #4]
	vring_info->info.num_descs = num_descs;
100055fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100055fc:	b29a      	uxth	r2, r3
100055fe:	693b      	ldr	r3, [r7, #16]
10005600:	819a      	strh	r2, [r3, #12]
	vring_info->info.align = align;
10005602:	693b      	ldr	r3, [r7, #16]
10005604:	6aba      	ldr	r2, [r7, #40]	@ 0x28
10005606:	609a      	str	r2, [r3, #8]

	return 0;
10005608:	2300      	movs	r3, #0
}
1000560a:	4618      	mov	r0, r3
1000560c:	371c      	adds	r7, #28
1000560e:	46bd      	mov	sp, r7
10005610:	f85d 7b04 	ldr.w	r7, [sp], #4
10005614:	4770      	bx	lr

10005616 <rproc_virtio_wait_remote_ready>:
	}
	return 0;
}

void rproc_virtio_wait_remote_ready(struct virtio_device *vdev)
{
10005616:	b580      	push	{r7, lr}
10005618:	b084      	sub	sp, #16
1000561a:	af00      	add	r7, sp, #0
1000561c:	6078      	str	r0, [r7, #4]
	/*
	 * No status available for slave. As Master has not to wait
	 * slave action, we can return. Behavior should be updated
	 * in future if a slave status is added.
	 */
	if (vdev->role == VIRTIO_DEV_MASTER)
1000561e:	687b      	ldr	r3, [r7, #4]
10005620:	699b      	ldr	r3, [r3, #24]
10005622:	2b00      	cmp	r3, #0
10005624:	d00a      	beq.n	1000563c <rproc_virtio_wait_remote_ready+0x26>
		return;

	while (1) {
		status = rproc_virtio_get_status(vdev);
10005626:	6878      	ldr	r0, [r7, #4]
10005628:	f7ff fe76 	bl	10005318 <rproc_virtio_get_status>
1000562c:	4603      	mov	r3, r0
1000562e:	73fb      	strb	r3, [r7, #15]
		if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK)
10005630:	7bfb      	ldrb	r3, [r7, #15]
10005632:	f003 0304 	and.w	r3, r3, #4
10005636:	2b00      	cmp	r3, #0
10005638:	d102      	bne.n	10005640 <rproc_virtio_wait_remote_ready+0x2a>
		status = rproc_virtio_get_status(vdev);
1000563a:	e7f4      	b.n	10005626 <rproc_virtio_wait_remote_ready+0x10>
		return;
1000563c:	bf00      	nop
1000563e:	e000      	b.n	10005642 <rproc_virtio_wait_remote_ready+0x2c>
			return;
10005640:	bf00      	nop
		metal_cpu_yield();
	}
}
10005642:	3710      	adds	r7, #16
10005644:	46bd      	mov	sp, r7
10005646:	bd80      	pop	{r7, pc}

10005648 <metal_list_add_before>:
{
10005648:	b480      	push	{r7}
1000564a:	b083      	sub	sp, #12
1000564c:	af00      	add	r7, sp, #0
1000564e:	6078      	str	r0, [r7, #4]
10005650:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
10005652:	687b      	ldr	r3, [r7, #4]
10005654:	685a      	ldr	r2, [r3, #4]
10005656:	683b      	ldr	r3, [r7, #0]
10005658:	605a      	str	r2, [r3, #4]
	new_node->next = node;
1000565a:	683b      	ldr	r3, [r7, #0]
1000565c:	687a      	ldr	r2, [r7, #4]
1000565e:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
10005660:	683b      	ldr	r3, [r7, #0]
10005662:	681b      	ldr	r3, [r3, #0]
10005664:	683a      	ldr	r2, [r7, #0]
10005666:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
10005668:	683b      	ldr	r3, [r7, #0]
1000566a:	685b      	ldr	r3, [r3, #4]
1000566c:	683a      	ldr	r2, [r7, #0]
1000566e:	601a      	str	r2, [r3, #0]
}
10005670:	bf00      	nop
10005672:	370c      	adds	r7, #12
10005674:	46bd      	mov	sp, r7
10005676:	f85d 7b04 	ldr.w	r7, [sp], #4
1000567a:	4770      	bx	lr

1000567c <metal_list_add_tail>:
{
1000567c:	b580      	push	{r7, lr}
1000567e:	b082      	sub	sp, #8
10005680:	af00      	add	r7, sp, #0
10005682:	6078      	str	r0, [r7, #4]
10005684:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
10005686:	6839      	ldr	r1, [r7, #0]
10005688:	6878      	ldr	r0, [r7, #4]
1000568a:	f7ff ffdd 	bl	10005648 <metal_list_add_before>
}
1000568e:	bf00      	nop
10005690:	3708      	adds	r7, #8
10005692:	46bd      	mov	sp, r7
10005694:	bd80      	pop	{r7, pc}

10005696 <rpmsg_get_endpoint>:
}

struct rpmsg_endpoint *rpmsg_get_endpoint(struct rpmsg_device *rdev,
					  const char *name, uint32_t addr,
					  uint32_t dest_addr)
{
10005696:	b580      	push	{r7, lr}
10005698:	b088      	sub	sp, #32
1000569a:	af00      	add	r7, sp, #0
1000569c:	60f8      	str	r0, [r7, #12]
1000569e:	60b9      	str	r1, [r7, #8]
100056a0:	607a      	str	r2, [r7, #4]
100056a2:	603b      	str	r3, [r7, #0]
	struct metal_list *node;
	struct rpmsg_endpoint *ept;

	metal_list_for_each(&rdev->endpoints, node) {
100056a4:	68fb      	ldr	r3, [r7, #12]
100056a6:	681b      	ldr	r3, [r3, #0]
100056a8:	61fb      	str	r3, [r7, #28]
100056aa:	e04b      	b.n	10005744 <rpmsg_get_endpoint+0xae>
		int name_match = 0;
100056ac:	2300      	movs	r3, #0
100056ae:	61bb      	str	r3, [r7, #24]

		ept = metal_container_of(node, struct rpmsg_endpoint, node);
100056b0:	69fb      	ldr	r3, [r7, #28]
100056b2:	3b34      	subs	r3, #52	@ 0x34
100056b4:	617b      	str	r3, [r7, #20]
		/* try to get by local address only */
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
100056b6:	687b      	ldr	r3, [r7, #4]
100056b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
100056bc:	d006      	beq.n	100056cc <rpmsg_get_endpoint+0x36>
100056be:	697b      	ldr	r3, [r7, #20]
100056c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100056c2:	687a      	ldr	r2, [r7, #4]
100056c4:	429a      	cmp	r2, r3
100056c6:	d101      	bne.n	100056cc <rpmsg_get_endpoint+0x36>
			return ept;
100056c8:	697b      	ldr	r3, [r7, #20]
100056ca:	e040      	b.n	1000574e <rpmsg_get_endpoint+0xb8>
		/* try to find match on local end remote address */
		if (addr == ept->addr && dest_addr == ept->dest_addr)
100056cc:	697b      	ldr	r3, [r7, #20]
100056ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100056d0:	687a      	ldr	r2, [r7, #4]
100056d2:	429a      	cmp	r2, r3
100056d4:	d106      	bne.n	100056e4 <rpmsg_get_endpoint+0x4e>
100056d6:	697b      	ldr	r3, [r7, #20]
100056d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100056da:	683a      	ldr	r2, [r7, #0]
100056dc:	429a      	cmp	r2, r3
100056de:	d101      	bne.n	100056e4 <rpmsg_get_endpoint+0x4e>
			return ept;
100056e0:	697b      	ldr	r3, [r7, #20]
100056e2:	e034      	b.n	1000574e <rpmsg_get_endpoint+0xb8>
		/* else use name service and destination address */
		if (name)
100056e4:	68bb      	ldr	r3, [r7, #8]
100056e6:	2b00      	cmp	r3, #0
100056e8:	d00c      	beq.n	10005704 <rpmsg_get_endpoint+0x6e>
			name_match = !strncmp(ept->name, name,
100056ea:	697b      	ldr	r3, [r7, #20]
100056ec:	2220      	movs	r2, #32
100056ee:	68b9      	ldr	r1, [r7, #8]
100056f0:	4618      	mov	r0, r3
100056f2:	f001 fc34 	bl	10006f5e <strncmp>
100056f6:	4603      	mov	r3, r0
100056f8:	2b00      	cmp	r3, #0
100056fa:	bf0c      	ite	eq
100056fc:	2301      	moveq	r3, #1
100056fe:	2300      	movne	r3, #0
10005700:	b2db      	uxtb	r3, r3
10005702:	61bb      	str	r3, [r7, #24]
					      sizeof(ept->name));
		if (!name || !name_match)
10005704:	68bb      	ldr	r3, [r7, #8]
10005706:	2b00      	cmp	r3, #0
10005708:	d018      	beq.n	1000573c <rpmsg_get_endpoint+0xa6>
1000570a:	69bb      	ldr	r3, [r7, #24]
1000570c:	2b00      	cmp	r3, #0
1000570e:	d015      	beq.n	1000573c <rpmsg_get_endpoint+0xa6>
			continue;
		/* destination address is known, equal to ept remote address */
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
10005710:	683b      	ldr	r3, [r7, #0]
10005712:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
10005716:	d006      	beq.n	10005726 <rpmsg_get_endpoint+0x90>
10005718:	697b      	ldr	r3, [r7, #20]
1000571a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1000571c:	683a      	ldr	r2, [r7, #0]
1000571e:	429a      	cmp	r2, r3
10005720:	d101      	bne.n	10005726 <rpmsg_get_endpoint+0x90>
			return ept;
10005722:	697b      	ldr	r3, [r7, #20]
10005724:	e013      	b.n	1000574e <rpmsg_get_endpoint+0xb8>
		/* ept is registered but not associated to remote ept */
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
10005726:	687b      	ldr	r3, [r7, #4]
10005728:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
1000572c:	d107      	bne.n	1000573e <rpmsg_get_endpoint+0xa8>
1000572e:	697b      	ldr	r3, [r7, #20]
10005730:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10005732:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
10005736:	d102      	bne.n	1000573e <rpmsg_get_endpoint+0xa8>
			return ept;
10005738:	697b      	ldr	r3, [r7, #20]
1000573a:	e008      	b.n	1000574e <rpmsg_get_endpoint+0xb8>
			continue;
1000573c:	bf00      	nop
	metal_list_for_each(&rdev->endpoints, node) {
1000573e:	69fb      	ldr	r3, [r7, #28]
10005740:	681b      	ldr	r3, [r3, #0]
10005742:	61fb      	str	r3, [r7, #28]
10005744:	68fb      	ldr	r3, [r7, #12]
10005746:	69fa      	ldr	r2, [r7, #28]
10005748:	429a      	cmp	r2, r3
1000574a:	d1af      	bne.n	100056ac <rpmsg_get_endpoint+0x16>
	}
	return NULL;
1000574c:	2300      	movs	r3, #0
}
1000574e:	4618      	mov	r0, r3
10005750:	3720      	adds	r7, #32
10005752:	46bd      	mov	sp, r7
10005754:	bd80      	pop	{r7, pc}

10005756 <rpmsg_register_endpoint>:
	metal_mutex_release(&rdev->lock);
}

void rpmsg_register_endpoint(struct rpmsg_device *rdev,
			     struct rpmsg_endpoint *ept)
{
10005756:	b580      	push	{r7, lr}
10005758:	b082      	sub	sp, #8
1000575a:	af00      	add	r7, sp, #0
1000575c:	6078      	str	r0, [r7, #4]
1000575e:	6039      	str	r1, [r7, #0]
	ept->rdev = rdev;
10005760:	683b      	ldr	r3, [r7, #0]
10005762:	687a      	ldr	r2, [r7, #4]
10005764:	621a      	str	r2, [r3, #32]
	metal_list_add_tail(&rdev->endpoints, &ept->node);
10005766:	687a      	ldr	r2, [r7, #4]
10005768:	683b      	ldr	r3, [r7, #0]
1000576a:	3334      	adds	r3, #52	@ 0x34
1000576c:	4619      	mov	r1, r3
1000576e:	4610      	mov	r0, r2
10005770:	f7ff ff84 	bl	1000567c <metal_list_add_tail>
}
10005774:	bf00      	nop
10005776:	3708      	adds	r7, #8
10005778:	46bd      	mov	sp, r7
1000577a:	bd80      	pop	{r7, pc}

1000577c <__metal_sleep_usec>:
#ifdef __cplusplus
extern "C" {
#endif

static inline int __metal_sleep_usec(unsigned int usec)
{
1000577c:	b480      	push	{r7}
1000577e:	b083      	sub	sp, #12
10005780:	af00      	add	r7, sp, #0
10005782:	6078      	str	r0, [r7, #4]
	metal_unused(usec);
	/* Fix me */
	return 0;
10005784:	2300      	movs	r3, #0
}
10005786:	4618      	mov	r0, r3
10005788:	370c      	adds	r7, #12
1000578a:	46bd      	mov	sp, r7
1000578c:	f85d 7b04 	ldr.w	r7, [sp], #4
10005790:	4770      	bx	lr

10005792 <metal_sleep_usec>:
 *
 * @param[in]  usec      microsecond intervals
 * @return     0 on success, non-zero for failures
 */
static inline int metal_sleep_usec(unsigned int usec)
{
10005792:	b580      	push	{r7, lr}
10005794:	b082      	sub	sp, #8
10005796:	af00      	add	r7, sp, #0
10005798:	6078      	str	r0, [r7, #4]
	return __metal_sleep_usec(usec);
1000579a:	6878      	ldr	r0, [r7, #4]
1000579c:	f7ff ffee 	bl	1000577c <__metal_sleep_usec>
100057a0:	4603      	mov	r3, r0
}
100057a2:	4618      	mov	r0, r3
100057a4:	3708      	adds	r7, #8
100057a6:	46bd      	mov	sp, r7
100057a8:	bd80      	pop	{r7, pc}

100057aa <metal_list_init>:
{
100057aa:	b480      	push	{r7}
100057ac:	b083      	sub	sp, #12
100057ae:	af00      	add	r7, sp, #0
100057b0:	6078      	str	r0, [r7, #4]
	list->prev = list;
100057b2:	687b      	ldr	r3, [r7, #4]
100057b4:	687a      	ldr	r2, [r7, #4]
100057b6:	605a      	str	r2, [r3, #4]
	list->next = list;
100057b8:	687b      	ldr	r3, [r7, #4]
100057ba:	687a      	ldr	r2, [r7, #4]
100057bc:	601a      	str	r2, [r3, #0]
}
100057be:	bf00      	nop
100057c0:	370c      	adds	r7, #12
100057c2:	46bd      	mov	sp, r7
100057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
100057c8:	4770      	bx	lr

100057ca <metal_io_virt_to_offset>:
{
100057ca:	b480      	push	{r7}
100057cc:	b085      	sub	sp, #20
100057ce:	af00      	add	r7, sp, #0
100057d0:	6078      	str	r0, [r7, #4]
100057d2:	6039      	str	r1, [r7, #0]
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
100057d4:	683b      	ldr	r3, [r7, #0]
100057d6:	687a      	ldr	r2, [r7, #4]
100057d8:	6812      	ldr	r2, [r2, #0]
100057da:	1a9b      	subs	r3, r3, r2
100057dc:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
100057de:	687b      	ldr	r3, [r7, #4]
100057e0:	689b      	ldr	r3, [r3, #8]
100057e2:	68fa      	ldr	r2, [r7, #12]
100057e4:	429a      	cmp	r2, r3
100057e6:	d201      	bcs.n	100057ec <metal_io_virt_to_offset+0x22>
100057e8:	68fb      	ldr	r3, [r7, #12]
100057ea:	e001      	b.n	100057f0 <metal_io_virt_to_offset+0x26>
100057ec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
100057f0:	4618      	mov	r0, r3
100057f2:	3714      	adds	r7, #20
100057f4:	46bd      	mov	sp, r7
100057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
100057fa:	4770      	bx	lr

100057fc <__metal_mutex_init>:
 * static singleton mutex
 */
#define METAL_MUTEX_DEFINE(m) metal_mutex_t m = METAL_MUTEX_INIT(m)

static inline void __metal_mutex_init(metal_mutex_t *mutex)
{
100057fc:	b480      	push	{r7}
100057fe:	b085      	sub	sp, #20
10005800:	af00      	add	r7, sp, #0
10005802:	6078      	str	r0, [r7, #4]
	atomic_store(&mutex->v, METAL_MUTEX_UNLOCKED);
10005804:	687b      	ldr	r3, [r7, #4]
10005806:	60fb      	str	r3, [r7, #12]
10005808:	2300      	movs	r3, #0
1000580a:	60bb      	str	r3, [r7, #8]
1000580c:	68bb      	ldr	r3, [r7, #8]
1000580e:	461a      	mov	r2, r3
10005810:	68fb      	ldr	r3, [r7, #12]
10005812:	f3bf 8f5b 	dmb	ish
10005816:	601a      	str	r2, [r3, #0]
10005818:	f3bf 8f5b 	dmb	ish
}
1000581c:	bf00      	nop
1000581e:	3714      	adds	r7, #20
10005820:	46bd      	mov	sp, r7
10005822:	f85d 7b04 	ldr.w	r7, [sp], #4
10005826:	4770      	bx	lr

10005828 <__metal_mutex_acquire>:
		return 0; /* not acquired */
	}
}

static inline void __metal_mutex_acquire(metal_mutex_t *mutex)
{
10005828:	b490      	push	{r4, r7}
1000582a:	b086      	sub	sp, #24
1000582c:	af00      	add	r7, sp, #0
1000582e:	6078      	str	r0, [r7, #4]
	int unlocked = METAL_MUTEX_UNLOCKED;
10005830:	2300      	movs	r3, #0
10005832:	613b      	str	r3, [r7, #16]

	while (!atomic_compare_exchange_weak(&mutex->v, &unlocked,
10005834:	bf00      	nop
10005836:	687b      	ldr	r3, [r7, #4]
10005838:	617b      	str	r3, [r7, #20]
1000583a:	2301      	movs	r3, #1
1000583c:	60fb      	str	r3, [r7, #12]
1000583e:	68fb      	ldr	r3, [r7, #12]
10005840:	461c      	mov	r4, r3
10005842:	697a      	ldr	r2, [r7, #20]
10005844:	f107 0310 	add.w	r3, r7, #16
10005848:	6818      	ldr	r0, [r3, #0]
1000584a:	f3bf 8f5b 	dmb	ish
1000584e:	e852 1f00 	ldrex	r1, [r2]
10005852:	4281      	cmp	r1, r0
10005854:	d103      	bne.n	1000585e <__metal_mutex_acquire+0x36>
10005856:	e842 4c00 	strex	ip, r4, [r2]
1000585a:	f1bc 0f00 	cmp.w	ip, #0
1000585e:	f3bf 8f5b 	dmb	ish
10005862:	bf0c      	ite	eq
10005864:	2201      	moveq	r2, #1
10005866:	2200      	movne	r2, #0
10005868:	2a00      	cmp	r2, #0
1000586a:	d100      	bne.n	1000586e <__metal_mutex_acquire+0x46>
1000586c:	6019      	str	r1, [r3, #0]
1000586e:	4613      	mov	r3, r2
10005870:	f083 0301 	eor.w	r3, r3, #1
10005874:	b2db      	uxtb	r3, r3
10005876:	2b00      	cmp	r3, #0
10005878:	d1dd      	bne.n	10005836 <__metal_mutex_acquire+0xe>
					     METAL_MUTEX_LOCKED)) {
		;
	}
}
1000587a:	bf00      	nop
1000587c:	bf00      	nop
1000587e:	3718      	adds	r7, #24
10005880:	46bd      	mov	sp, r7
10005882:	bc90      	pop	{r4, r7}
10005884:	4770      	bx	lr

10005886 <__metal_mutex_release>:

static inline void __metal_mutex_release(metal_mutex_t *mutex)
{
10005886:	b480      	push	{r7}
10005888:	b085      	sub	sp, #20
1000588a:	af00      	add	r7, sp, #0
1000588c:	6078      	str	r0, [r7, #4]
	atomic_store(&mutex->v, METAL_MUTEX_UNLOCKED);
1000588e:	687b      	ldr	r3, [r7, #4]
10005890:	60fb      	str	r3, [r7, #12]
10005892:	2300      	movs	r3, #0
10005894:	60bb      	str	r3, [r7, #8]
10005896:	68bb      	ldr	r3, [r7, #8]
10005898:	461a      	mov	r2, r3
1000589a:	68fb      	ldr	r3, [r7, #12]
1000589c:	f3bf 8f5b 	dmb	ish
100058a0:	601a      	str	r2, [r3, #0]
100058a2:	f3bf 8f5b 	dmb	ish
}
100058a6:	bf00      	nop
100058a8:	3714      	adds	r7, #20
100058aa:	46bd      	mov	sp, r7
100058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
100058b0:	4770      	bx	lr

100058b2 <metal_mutex_init>:
/**
 * @brief	Initialize a libmetal mutex.
 * @param[in]	mutex	Mutex to initialize.
 */
static inline void metal_mutex_init(metal_mutex_t *mutex)
{
100058b2:	b580      	push	{r7, lr}
100058b4:	b082      	sub	sp, #8
100058b6:	af00      	add	r7, sp, #0
100058b8:	6078      	str	r0, [r7, #4]
	__metal_mutex_init(mutex);
100058ba:	6878      	ldr	r0, [r7, #4]
100058bc:	f7ff ff9e 	bl	100057fc <__metal_mutex_init>
}
100058c0:	bf00      	nop
100058c2:	3708      	adds	r7, #8
100058c4:	46bd      	mov	sp, r7
100058c6:	bd80      	pop	{r7, pc}

100058c8 <metal_mutex_acquire>:
/**
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
100058c8:	b580      	push	{r7, lr}
100058ca:	b082      	sub	sp, #8
100058cc:	af00      	add	r7, sp, #0
100058ce:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
100058d0:	6878      	ldr	r0, [r7, #4]
100058d2:	f7ff ffa9 	bl	10005828 <__metal_mutex_acquire>
}
100058d6:	bf00      	nop
100058d8:	3708      	adds	r7, #8
100058da:	46bd      	mov	sp, r7
100058dc:	bd80      	pop	{r7, pc}

100058de <metal_mutex_release>:
 * @brief	Release a previously acquired mutex.
 * @param[in]	mutex	Mutex to mutex.
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
100058de:	b580      	push	{r7, lr}
100058e0:	b082      	sub	sp, #8
100058e2:	af00      	add	r7, sp, #0
100058e4:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
100058e6:	6878      	ldr	r0, [r7, #4]
100058e8:	f7ff ffcd 	bl	10005886 <__metal_mutex_release>
}
100058ec:	bf00      	nop
100058ee:	3708      	adds	r7, #8
100058f0:	46bd      	mov	sp, r7
100058f2:	bd80      	pop	{r7, pc}

100058f4 <rpmsg_virtio_get_role>:
#define RPMSG_REMOTE	VIRTIO_DEV_SLAVE
#define RPMSG_MASTER	VIRTIO_DEV_MASTER

static inline unsigned int
rpmsg_virtio_get_role(struct rpmsg_virtio_device *rvdev)
{
100058f4:	b480      	push	{r7}
100058f6:	b083      	sub	sp, #12
100058f8:	af00      	add	r7, sp, #0
100058fa:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->role;
100058fc:	687b      	ldr	r3, [r7, #4]
100058fe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
10005900:	699b      	ldr	r3, [r3, #24]
}
10005902:	4618      	mov	r0, r3
10005904:	370c      	adds	r7, #12
10005906:	46bd      	mov	sp, r7
10005908:	f85d 7b04 	ldr.w	r7, [sp], #4
1000590c:	4770      	bx	lr

1000590e <rpmsg_virtio_set_status>:

static inline void rpmsg_virtio_set_status(struct rpmsg_virtio_device *rvdev,
					   uint8_t status)
{
1000590e:	b580      	push	{r7, lr}
10005910:	b082      	sub	sp, #8
10005912:	af00      	add	r7, sp, #0
10005914:	6078      	str	r0, [r7, #4]
10005916:	460b      	mov	r3, r1
10005918:	70fb      	strb	r3, [r7, #3]
	rvdev->vdev->func->set_status(rvdev->vdev, status);
1000591a:	687b      	ldr	r3, [r7, #4]
1000591c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
1000591e:	6a1b      	ldr	r3, [r3, #32]
10005920:	685b      	ldr	r3, [r3, #4]
10005922:	687a      	ldr	r2, [r7, #4]
10005924:	6f92      	ldr	r2, [r2, #120]	@ 0x78
10005926:	78f9      	ldrb	r1, [r7, #3]
10005928:	4610      	mov	r0, r2
1000592a:	4798      	blx	r3
}
1000592c:	bf00      	nop
1000592e:	3708      	adds	r7, #8
10005930:	46bd      	mov	sp, r7
10005932:	bd80      	pop	{r7, pc}

10005934 <rpmsg_virtio_get_status>:

static inline uint8_t rpmsg_virtio_get_status(struct rpmsg_virtio_device *rvdev)
{
10005934:	b580      	push	{r7, lr}
10005936:	b082      	sub	sp, #8
10005938:	af00      	add	r7, sp, #0
1000593a:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_status(rvdev->vdev);
1000593c:	687b      	ldr	r3, [r7, #4]
1000593e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
10005940:	6a1b      	ldr	r3, [r3, #32]
10005942:	681b      	ldr	r3, [r3, #0]
10005944:	687a      	ldr	r2, [r7, #4]
10005946:	6f92      	ldr	r2, [r2, #120]	@ 0x78
10005948:	4610      	mov	r0, r2
1000594a:	4798      	blx	r3
1000594c:	4603      	mov	r3, r0
}
1000594e:	4618      	mov	r0, r3
10005950:	3708      	adds	r7, #8
10005952:	46bd      	mov	sp, r7
10005954:	bd80      	pop	{r7, pc}

10005956 <rpmsg_virtio_get_features>:

static inline uint32_t
rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
10005956:	b580      	push	{r7, lr}
10005958:	b082      	sub	sp, #8
1000595a:	af00      	add	r7, sp, #0
1000595c:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_features(rvdev->vdev);
1000595e:	687b      	ldr	r3, [r7, #4]
10005960:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
10005962:	6a1b      	ldr	r3, [r3, #32]
10005964:	689b      	ldr	r3, [r3, #8]
10005966:	687a      	ldr	r2, [r7, #4]
10005968:	6f92      	ldr	r2, [r2, #120]	@ 0x78
1000596a:	4610      	mov	r0, r2
1000596c:	4798      	blx	r3
1000596e:	4603      	mov	r3, r0
}
10005970:	4618      	mov	r0, r3
10005972:	3708      	adds	r7, #8
10005974:	46bd      	mov	sp, r7
10005976:	bd80      	pop	{r7, pc}

10005978 <rpmsg_virtio_create_virtqueues>:
static inline int
rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
			       int flags, unsigned int nvqs,
			       const char *names[],
			       vq_callback *callbacks)
{
10005978:	b580      	push	{r7, lr}
1000597a:	b086      	sub	sp, #24
1000597c:	af02      	add	r7, sp, #8
1000597e:	60f8      	str	r0, [r7, #12]
10005980:	60b9      	str	r1, [r7, #8]
10005982:	607a      	str	r2, [r7, #4]
10005984:	603b      	str	r3, [r7, #0]
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
10005986:	68fb      	ldr	r3, [r7, #12]
10005988:	6f98      	ldr	r0, [r3, #120]	@ 0x78
1000598a:	68b9      	ldr	r1, [r7, #8]
1000598c:	69bb      	ldr	r3, [r7, #24]
1000598e:	9300      	str	r3, [sp, #0]
10005990:	683b      	ldr	r3, [r7, #0]
10005992:	687a      	ldr	r2, [r7, #4]
10005994:	f000 fc2c 	bl	100061f0 <virtio_create_virtqueues>
10005998:	4603      	mov	r3, r0
					callbacks);
}
1000599a:	4618      	mov	r0, r3
1000599c:	3710      	adds	r7, #16
1000599e:	46bd      	mov	sp, r7
100059a0:	bd80      	pop	{r7, pc}
	...

100059a4 <rpmsg_initialize_ept>:
static inline void rpmsg_initialize_ept(struct rpmsg_endpoint *ept,
					const char *name,
					uint32_t src, uint32_t dest,
					rpmsg_ept_cb cb,
					rpmsg_ns_unbind_cb ns_unbind_cb)
{
100059a4:	b580      	push	{r7, lr}
100059a6:	b084      	sub	sp, #16
100059a8:	af00      	add	r7, sp, #0
100059aa:	60f8      	str	r0, [r7, #12]
100059ac:	60b9      	str	r1, [r7, #8]
100059ae:	607a      	str	r2, [r7, #4]
100059b0:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
100059b2:	68f8      	ldr	r0, [r7, #12]
100059b4:	68bb      	ldr	r3, [r7, #8]
100059b6:	2b00      	cmp	r3, #0
100059b8:	d001      	beq.n	100059be <rpmsg_initialize_ept+0x1a>
100059ba:	68bb      	ldr	r3, [r7, #8]
100059bc:	e000      	b.n	100059c0 <rpmsg_initialize_ept+0x1c>
100059be:	4b0a      	ldr	r3, [pc, #40]	@ (100059e8 <rpmsg_initialize_ept+0x44>)
100059c0:	2220      	movs	r2, #32
100059c2:	4619      	mov	r1, r3
100059c4:	f001 fadd 	bl	10006f82 <strncpy>
	ept->addr = src;
100059c8:	68fb      	ldr	r3, [r7, #12]
100059ca:	687a      	ldr	r2, [r7, #4]
100059cc:	625a      	str	r2, [r3, #36]	@ 0x24
	ept->dest_addr = dest;
100059ce:	68fb      	ldr	r3, [r7, #12]
100059d0:	683a      	ldr	r2, [r7, #0]
100059d2:	629a      	str	r2, [r3, #40]	@ 0x28
	ept->cb = cb;
100059d4:	68fb      	ldr	r3, [r7, #12]
100059d6:	69ba      	ldr	r2, [r7, #24]
100059d8:	62da      	str	r2, [r3, #44]	@ 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
100059da:	68fb      	ldr	r3, [r7, #12]
100059dc:	69fa      	ldr	r2, [r7, #28]
100059de:	631a      	str	r2, [r3, #48]	@ 0x30
}
100059e0:	bf00      	nop
100059e2:	3710      	adds	r7, #16
100059e4:	46bd      	mov	sp, r7
100059e6:	bd80      	pop	{r7, pc}
100059e8:	10007d38 	.word	0x10007d38

100059ec <rpmsg_get_ept_from_addr>:
void rpmsg_register_endpoint(struct rpmsg_device *rdev,
			     struct rpmsg_endpoint *ept);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
100059ec:	b580      	push	{r7, lr}
100059ee:	b082      	sub	sp, #8
100059f0:	af00      	add	r7, sp, #0
100059f2:	6078      	str	r0, [r7, #4]
100059f4:	6039      	str	r1, [r7, #0]
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
100059f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
100059fa:	683a      	ldr	r2, [r7, #0]
100059fc:	2100      	movs	r1, #0
100059fe:	6878      	ldr	r0, [r7, #4]
10005a00:	f7ff fe49 	bl	10005696 <rpmsg_get_endpoint>
10005a04:	4603      	mov	r3, r0
}
10005a06:	4618      	mov	r0, r3
10005a08:	3708      	adds	r7, #8
10005a0a:	46bd      	mov	sp, r7
10005a0c:	bd80      	pop	{r7, pc}

10005a0e <rpmsg_virtio_init_shm_pool>:
}
#endif /*!VIRTIO_SLAVE_ONLY*/

void rpmsg_virtio_init_shm_pool(struct rpmsg_virtio_shm_pool *shpool,
				void *shb, size_t size)
{
10005a0e:	b480      	push	{r7}
10005a10:	b085      	sub	sp, #20
10005a12:	af00      	add	r7, sp, #0
10005a14:	60f8      	str	r0, [r7, #12]
10005a16:	60b9      	str	r1, [r7, #8]
10005a18:	607a      	str	r2, [r7, #4]
	if (!shpool)
10005a1a:	68fb      	ldr	r3, [r7, #12]
10005a1c:	2b00      	cmp	r3, #0
10005a1e:	d009      	beq.n	10005a34 <rpmsg_virtio_init_shm_pool+0x26>
		return;
	shpool->base = shb;
10005a20:	68fb      	ldr	r3, [r7, #12]
10005a22:	68ba      	ldr	r2, [r7, #8]
10005a24:	601a      	str	r2, [r3, #0]
	shpool->size = size;
10005a26:	68fb      	ldr	r3, [r7, #12]
10005a28:	687a      	ldr	r2, [r7, #4]
10005a2a:	609a      	str	r2, [r3, #8]
	shpool->avail = size;
10005a2c:	68fb      	ldr	r3, [r7, #12]
10005a2e:	687a      	ldr	r2, [r7, #4]
10005a30:	605a      	str	r2, [r3, #4]
10005a32:	e000      	b.n	10005a36 <rpmsg_virtio_init_shm_pool+0x28>
		return;
10005a34:	bf00      	nop
}
10005a36:	3714      	adds	r7, #20
10005a38:	46bd      	mov	sp, r7
10005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
10005a3e:	4770      	bx	lr

10005a40 <rpmsg_virtio_return_buffer>:
 *
 */
static void rpmsg_virtio_return_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, uint32_t len,
				       uint16_t idx)
{
10005a40:	b580      	push	{r7, lr}
10005a42:	b086      	sub	sp, #24
10005a44:	af00      	add	r7, sp, #0
10005a46:	60f8      	str	r0, [r7, #12]
10005a48:	60b9      	str	r1, [r7, #8]
10005a4a:	607a      	str	r2, [r7, #4]
10005a4c:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
10005a4e:	68f8      	ldr	r0, [r7, #12]
10005a50:	f7ff ff50 	bl	100058f4 <rpmsg_virtio_get_role>
10005a54:	6178      	str	r0, [r7, #20]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
	}
#endif /*VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
10005a56:	697b      	ldr	r3, [r7, #20]
10005a58:	2b01      	cmp	r3, #1
10005a5a:	d106      	bne.n	10005a6a <rpmsg_virtio_return_buffer+0x2a>
		(void)buffer;
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
10005a5c:	68fb      	ldr	r3, [r7, #12]
10005a5e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
10005a60:	8879      	ldrh	r1, [r7, #2]
10005a62:	687a      	ldr	r2, [r7, #4]
10005a64:	4618      	mov	r0, r3
10005a66:	f000 fd95 	bl	10006594 <virtqueue_add_consumed_buffer>
	}
#endif /*VIRTIO_MASTER_ONLY*/
}
10005a6a:	bf00      	nop
10005a6c:	3718      	adds	r7, #24
10005a6e:	46bd      	mov	sp, r7
10005a70:	bd80      	pop	{r7, pc}

10005a72 <rpmsg_virtio_enqueue_buffer>:
 * @return - status of function execution
 */
static int rpmsg_virtio_enqueue_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, uint32_t len,
				       uint16_t idx)
{
10005a72:	b580      	push	{r7, lr}
10005a74:	b086      	sub	sp, #24
10005a76:	af00      	add	r7, sp, #0
10005a78:	60f8      	str	r0, [r7, #12]
10005a7a:	60b9      	str	r1, [r7, #8]
10005a7c:	607a      	str	r2, [r7, #4]
10005a7e:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
10005a80:	68f8      	ldr	r0, [r7, #12]
10005a82:	f7ff ff37 	bl	100058f4 <rpmsg_virtio_get_role>
10005a86:	6178      	str	r0, [r7, #20]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 1, 0, buffer);
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
10005a88:	697b      	ldr	r3, [r7, #20]
10005a8a:	2b01      	cmp	r3, #1
10005a8c:	d109      	bne.n	10005aa2 <rpmsg_virtio_enqueue_buffer+0x30>
		(void)buffer;
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
10005a8e:	68fb      	ldr	r3, [r7, #12]
10005a90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10005a94:	8879      	ldrh	r1, [r7, #2]
10005a96:	687a      	ldr	r2, [r7, #4]
10005a98:	4618      	mov	r0, r3
10005a9a:	f000 fd7b 	bl	10006594 <virtqueue_add_consumed_buffer>
10005a9e:	4603      	mov	r3, r0
10005aa0:	e000      	b.n	10005aa4 <rpmsg_virtio_enqueue_buffer+0x32>
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	return 0;
10005aa2:	2300      	movs	r3, #0
}
10005aa4:	4618      	mov	r0, r3
10005aa6:	3718      	adds	r7, #24
10005aa8:	46bd      	mov	sp, r7
10005aaa:	bd80      	pop	{r7, pc}

10005aac <rpmsg_virtio_get_tx_buffer>:
 *
 * return - pointer to buffer.
 */
static void *rpmsg_virtio_get_tx_buffer(struct rpmsg_virtio_device *rvdev,
					uint32_t *len, uint16_t *idx)
{
10005aac:	b580      	push	{r7, lr}
10005aae:	b086      	sub	sp, #24
10005ab0:	af00      	add	r7, sp, #0
10005ab2:	60f8      	str	r0, [r7, #12]
10005ab4:	60b9      	str	r1, [r7, #8]
10005ab6:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
10005ab8:	68f8      	ldr	r0, [r7, #12]
10005aba:	f7ff ff1b 	bl	100058f4 <rpmsg_virtio_get_role>
10005abe:	6138      	str	r0, [r7, #16]
	void *data = NULL;
10005ac0:	2300      	movs	r3, #0
10005ac2:	617b      	str	r3, [r7, #20]
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
10005ac4:	693b      	ldr	r3, [r7, #16]
10005ac6:	2b01      	cmp	r3, #1
10005ac8:	d108      	bne.n	10005adc <rpmsg_virtio_get_tx_buffer+0x30>
		data = virtqueue_get_available_buffer(rvdev->svq, idx, len);
10005aca:	68fb      	ldr	r3, [r7, #12]
10005acc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10005ad0:	68ba      	ldr	r2, [r7, #8]
10005ad2:	6879      	ldr	r1, [r7, #4]
10005ad4:	4618      	mov	r0, r3
10005ad6:	f000 fd15 	bl	10006504 <virtqueue_get_available_buffer>
10005ada:	6178      	str	r0, [r7, #20]
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return data;
10005adc:	697b      	ldr	r3, [r7, #20]
}
10005ade:	4618      	mov	r0, r3
10005ae0:	3718      	adds	r7, #24
10005ae2:	46bd      	mov	sp, r7
10005ae4:	bd80      	pop	{r7, pc}

10005ae6 <rpmsg_virtio_get_rx_buffer>:
 * @return - pointer to received buffer
 *
 */
static void *rpmsg_virtio_get_rx_buffer(struct rpmsg_virtio_device *rvdev,
					uint32_t *len, uint16_t *idx)
{
10005ae6:	b580      	push	{r7, lr}
10005ae8:	b086      	sub	sp, #24
10005aea:	af00      	add	r7, sp, #0
10005aec:	60f8      	str	r0, [r7, #12]
10005aee:	60b9      	str	r1, [r7, #8]
10005af0:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
10005af2:	68f8      	ldr	r0, [r7, #12]
10005af4:	f7ff fefe 	bl	100058f4 <rpmsg_virtio_get_role>
10005af8:	6138      	str	r0, [r7, #16]
	void *data = NULL;
10005afa:	2300      	movs	r3, #0
10005afc:	617b      	str	r3, [r7, #20]
		data = virtqueue_get_buffer(rvdev->rvq, len, idx);
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
10005afe:	693b      	ldr	r3, [r7, #16]
10005b00:	2b01      	cmp	r3, #1
10005b02:	d107      	bne.n	10005b14 <rpmsg_virtio_get_rx_buffer+0x2e>
		data =
		    virtqueue_get_available_buffer(rvdev->rvq, idx, len);
10005b04:	68fb      	ldr	r3, [r7, #12]
10005b06:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
10005b08:	68ba      	ldr	r2, [r7, #8]
10005b0a:	6879      	ldr	r1, [r7, #4]
10005b0c:	4618      	mov	r0, r3
10005b0e:	f000 fcf9 	bl	10006504 <virtqueue_get_available_buffer>
10005b12:	6178      	str	r0, [r7, #20]
#ifdef VIRTIO_CACHED_BUFFERS
	/* Invalidate the buffer before returning it */
	metal_cache_invalidate(data, *len);
#endif /* VIRTIO_CACHED_BUFFERS */

	return data;
10005b14:	697b      	ldr	r3, [r7, #20]
}
10005b16:	4618      	mov	r0, r3
10005b18:	3718      	adds	r7, #24
10005b1a:	46bd      	mov	sp, r7
10005b1c:	bd80      	pop	{r7, pc}

10005b1e <rpmsg_virtio_wait_remote_ready>:
#ifndef VIRTIO_MASTER_ONLY
/**
 * check if the remote is ready to start RPMsg communication
 */
static int rpmsg_virtio_wait_remote_ready(struct rpmsg_virtio_device *rvdev)
{
10005b1e:	b580      	push	{r7, lr}
10005b20:	b084      	sub	sp, #16
10005b22:	af00      	add	r7, sp, #0
10005b24:	6078      	str	r0, [r7, #4]
	uint8_t status;

	while (1) {
		status = rpmsg_virtio_get_status(rvdev);
10005b26:	6878      	ldr	r0, [r7, #4]
10005b28:	f7ff ff04 	bl	10005934 <rpmsg_virtio_get_status>
10005b2c:	4603      	mov	r3, r0
10005b2e:	73fb      	strb	r3, [r7, #15]
		/* Busy wait until the remote is ready */
		if (status & VIRTIO_CONFIG_STATUS_NEEDS_RESET) {
10005b30:	7bfb      	ldrb	r3, [r7, #15]
10005b32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
10005b36:	2b00      	cmp	r3, #0
10005b38:	d004      	beq.n	10005b44 <rpmsg_virtio_wait_remote_ready+0x26>
			rpmsg_virtio_set_status(rvdev, 0);
10005b3a:	2100      	movs	r1, #0
10005b3c:	6878      	ldr	r0, [r7, #4]
10005b3e:	f7ff fee6 	bl	1000590e <rpmsg_virtio_set_status>
10005b42:	e7f0      	b.n	10005b26 <rpmsg_virtio_wait_remote_ready+0x8>
			/* TODO notify remote processor */
		} else if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK) {
10005b44:	7bfb      	ldrb	r3, [r7, #15]
10005b46:	f003 0304 	and.w	r3, r3, #4
10005b4a:	2b00      	cmp	r3, #0
10005b4c:	d0eb      	beq.n	10005b26 <rpmsg_virtio_wait_remote_ready+0x8>
			return true;
10005b4e:	2301      	movs	r3, #1
		}
		/* TODO: clarify metal_cpu_yield usage*/
		metal_cpu_yield();
	}
}
10005b50:	4618      	mov	r0, r3
10005b52:	3710      	adds	r7, #16
10005b54:	46bd      	mov	sp, r7
10005b56:	bd80      	pop	{r7, pc}

10005b58 <rpmsg_virtio_hold_rx_buffer>:

	return length;
}

static void rpmsg_virtio_hold_rx_buffer(struct rpmsg_device *rdev, void *rxbuf)
{
10005b58:	b480      	push	{r7}
10005b5a:	b085      	sub	sp, #20
10005b5c:	af00      	add	r7, sp, #0
10005b5e:	6078      	str	r0, [r7, #4]
10005b60:	6039      	str	r1, [r7, #0]
	struct rpmsg_hdr *rp_hdr;

	(void)rdev;

	rp_hdr = RPMSG_LOCATE_HDR(rxbuf);
10005b62:	683b      	ldr	r3, [r7, #0]
10005b64:	3b10      	subs	r3, #16
10005b66:	60fb      	str	r3, [r7, #12]

	/* Set held status to keep buffer */
	rp_hdr->reserved |= RPMSG_BUF_HELD;
10005b68:	68fb      	ldr	r3, [r7, #12]
10005b6a:	689b      	ldr	r3, [r3, #8]
10005b6c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
10005b70:	68fb      	ldr	r3, [r7, #12]
10005b72:	609a      	str	r2, [r3, #8]
}
10005b74:	bf00      	nop
10005b76:	3714      	adds	r7, #20
10005b78:	46bd      	mov	sp, r7
10005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
10005b7e:	4770      	bx	lr

10005b80 <rpmsg_virtio_release_rx_buffer>:

static void rpmsg_virtio_release_rx_buffer(struct rpmsg_device *rdev,
					   void *rxbuf)
{
10005b80:	b580      	push	{r7, lr}
10005b82:	b086      	sub	sp, #24
10005b84:	af00      	add	r7, sp, #0
10005b86:	6078      	str	r0, [r7, #4]
10005b88:	6039      	str	r1, [r7, #0]
	struct rpmsg_virtio_device *rvdev;
	struct rpmsg_hdr *rp_hdr;
	uint16_t idx;
	uint32_t len;

	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
10005b8a:	687b      	ldr	r3, [r7, #4]
10005b8c:	617b      	str	r3, [r7, #20]
	rp_hdr = RPMSG_LOCATE_HDR(rxbuf);
10005b8e:	683b      	ldr	r3, [r7, #0]
10005b90:	3b10      	subs	r3, #16
10005b92:	613b      	str	r3, [r7, #16]
	/* The reserved field contains buffer index */
	idx = (uint16_t)(rp_hdr->reserved & ~RPMSG_BUF_HELD);
10005b94:	693b      	ldr	r3, [r7, #16]
10005b96:	689b      	ldr	r3, [r3, #8]
10005b98:	81fb      	strh	r3, [r7, #14]

	metal_mutex_acquire(&rdev->lock);
10005b9a:	687b      	ldr	r3, [r7, #4]
10005b9c:	3358      	adds	r3, #88	@ 0x58
10005b9e:	4618      	mov	r0, r3
10005ba0:	f7ff fe92 	bl	100058c8 <metal_mutex_acquire>
	/* Return buffer on virtqueue. */
	len = virtqueue_get_buffer_length(rvdev->rvq, idx);
10005ba4:	697b      	ldr	r3, [r7, #20]
10005ba6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
10005ba8:	89fa      	ldrh	r2, [r7, #14]
10005baa:	4611      	mov	r1, r2
10005bac:	4618      	mov	r0, r3
10005bae:	f000 fc97 	bl	100064e0 <virtqueue_get_buffer_length>
10005bb2:	60b8      	str	r0, [r7, #8]
	rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
10005bb4:	89fb      	ldrh	r3, [r7, #14]
10005bb6:	68ba      	ldr	r2, [r7, #8]
10005bb8:	6939      	ldr	r1, [r7, #16]
10005bba:	6978      	ldr	r0, [r7, #20]
10005bbc:	f7ff ff40 	bl	10005a40 <rpmsg_virtio_return_buffer>
	metal_mutex_release(&rdev->lock);
10005bc0:	687b      	ldr	r3, [r7, #4]
10005bc2:	3358      	adds	r3, #88	@ 0x58
10005bc4:	4618      	mov	r0, r3
10005bc6:	f7ff fe8a 	bl	100058de <metal_mutex_release>
}
10005bca:	bf00      	nop
10005bcc:	3718      	adds	r7, #24
10005bce:	46bd      	mov	sp, r7
10005bd0:	bd80      	pop	{r7, pc}

10005bd2 <rpmsg_virtio_get_tx_payload_buffer>:

static void *rpmsg_virtio_get_tx_payload_buffer(struct rpmsg_device *rdev,
						uint32_t *len, int wait)
{
10005bd2:	b580      	push	{r7, lr}
10005bd4:	b08a      	sub	sp, #40	@ 0x28
10005bd6:	af00      	add	r7, sp, #0
10005bd8:	60f8      	str	r0, [r7, #12]
10005bda:	60b9      	str	r1, [r7, #8]
10005bdc:	607a      	str	r2, [r7, #4]
	uint16_t idx;
	int tick_count;
	int status;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
10005bde:	68fb      	ldr	r3, [r7, #12]
10005be0:	623b      	str	r3, [r7, #32]

	/* Validate device state */
	status = rpmsg_virtio_get_status(rvdev);
10005be2:	6a38      	ldr	r0, [r7, #32]
10005be4:	f7ff fea6 	bl	10005934 <rpmsg_virtio_get_status>
10005be8:	4603      	mov	r3, r0
10005bea:	61fb      	str	r3, [r7, #28]
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK))
10005bec:	69fb      	ldr	r3, [r7, #28]
10005bee:	f003 0304 	and.w	r3, r3, #4
10005bf2:	2b00      	cmp	r3, #0
10005bf4:	d101      	bne.n	10005bfa <rpmsg_virtio_get_tx_payload_buffer+0x28>
		return NULL;
10005bf6:	2300      	movs	r3, #0
10005bf8:	e039      	b.n	10005c6e <rpmsg_virtio_get_tx_payload_buffer+0x9c>

	if (wait)
10005bfa:	687b      	ldr	r3, [r7, #4]
10005bfc:	2b00      	cmp	r3, #0
10005bfe:	d003      	beq.n	10005c08 <rpmsg_virtio_get_tx_payload_buffer+0x36>
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
10005c00:	f643 2398 	movw	r3, #15000	@ 0x3a98
10005c04:	627b      	str	r3, [r7, #36]	@ 0x24
10005c06:	e001      	b.n	10005c0c <rpmsg_virtio_get_tx_payload_buffer+0x3a>
	else
		tick_count = 0;
10005c08:	2300      	movs	r3, #0
10005c0a:	627b      	str	r3, [r7, #36]	@ 0x24

	while (1) {
		/* Lock the device to enable exclusive access to virtqueues */
		metal_mutex_acquire(&rdev->lock);
10005c0c:	68fb      	ldr	r3, [r7, #12]
10005c0e:	3358      	adds	r3, #88	@ 0x58
10005c10:	4618      	mov	r0, r3
10005c12:	f7ff fe59 	bl	100058c8 <metal_mutex_acquire>
		rp_hdr = rpmsg_virtio_get_tx_buffer(rvdev, len, &idx);
10005c16:	f107 0316 	add.w	r3, r7, #22
10005c1a:	461a      	mov	r2, r3
10005c1c:	68b9      	ldr	r1, [r7, #8]
10005c1e:	6a38      	ldr	r0, [r7, #32]
10005c20:	f7ff ff44 	bl	10005aac <rpmsg_virtio_get_tx_buffer>
10005c24:	61b8      	str	r0, [r7, #24]
		metal_mutex_release(&rdev->lock);
10005c26:	68fb      	ldr	r3, [r7, #12]
10005c28:	3358      	adds	r3, #88	@ 0x58
10005c2a:	4618      	mov	r0, r3
10005c2c:	f7ff fe57 	bl	100058de <metal_mutex_release>
		if (rp_hdr || !tick_count)
10005c30:	69bb      	ldr	r3, [r7, #24]
10005c32:	2b00      	cmp	r3, #0
10005c34:	d10a      	bne.n	10005c4c <rpmsg_virtio_get_tx_payload_buffer+0x7a>
10005c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10005c38:	2b00      	cmp	r3, #0
10005c3a:	d007      	beq.n	10005c4c <rpmsg_virtio_get_tx_payload_buffer+0x7a>
			break;
		metal_sleep_usec(RPMSG_TICKS_PER_INTERVAL);
10005c3c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
10005c40:	f7ff fda7 	bl	10005792 <metal_sleep_usec>
		tick_count--;
10005c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10005c46:	3b01      	subs	r3, #1
10005c48:	627b      	str	r3, [r7, #36]	@ 0x24
		metal_mutex_acquire(&rdev->lock);
10005c4a:	e7df      	b.n	10005c0c <rpmsg_virtio_get_tx_payload_buffer+0x3a>
	}

	if (!rp_hdr)
10005c4c:	69bb      	ldr	r3, [r7, #24]
10005c4e:	2b00      	cmp	r3, #0
10005c50:	d101      	bne.n	10005c56 <rpmsg_virtio_get_tx_payload_buffer+0x84>
		return NULL;
10005c52:	2300      	movs	r3, #0
10005c54:	e00b      	b.n	10005c6e <rpmsg_virtio_get_tx_payload_buffer+0x9c>

	/* Store the index into the reserved field to be used when sending */
	rp_hdr->reserved = idx;
10005c56:	8afb      	ldrh	r3, [r7, #22]
10005c58:	461a      	mov	r2, r3
10005c5a:	69bb      	ldr	r3, [r7, #24]
10005c5c:	609a      	str	r2, [r3, #8]

	/* Actual data buffer size is vring buffer size minus header length */
	*len -= sizeof(struct rpmsg_hdr);
10005c5e:	68bb      	ldr	r3, [r7, #8]
10005c60:	681b      	ldr	r3, [r3, #0]
10005c62:	f1a3 0210 	sub.w	r2, r3, #16
10005c66:	68bb      	ldr	r3, [r7, #8]
10005c68:	601a      	str	r2, [r3, #0]
	return RPMSG_LOCATE_DATA(rp_hdr);
10005c6a:	69bb      	ldr	r3, [r7, #24]
10005c6c:	3310      	adds	r3, #16
}
10005c6e:	4618      	mov	r0, r3
10005c70:	3728      	adds	r7, #40	@ 0x28
10005c72:	46bd      	mov	sp, r7
10005c74:	bd80      	pop	{r7, pc}
	...

10005c78 <rpmsg_virtio_send_offchannel_nocopy>:

static int rpmsg_virtio_send_offchannel_nocopy(struct rpmsg_device *rdev,
					       uint32_t src, uint32_t dst,
					       const void *data, int len)
{
10005c78:	b580      	push	{r7, lr}
10005c7a:	b08e      	sub	sp, #56	@ 0x38
10005c7c:	af00      	add	r7, sp, #0
10005c7e:	60f8      	str	r0, [r7, #12]
10005c80:	60b9      	str	r1, [r7, #8]
10005c82:	607a      	str	r2, [r7, #4]
10005c84:	603b      	str	r3, [r7, #0]
	uint32_t buff_len;
	uint16_t idx;
	int status;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
10005c86:	68fb      	ldr	r3, [r7, #12]
10005c88:	637b      	str	r3, [r7, #52]	@ 0x34

	hdr = RPMSG_LOCATE_HDR(data);
10005c8a:	683b      	ldr	r3, [r7, #0]
10005c8c:	3b10      	subs	r3, #16
10005c8e:	633b      	str	r3, [r7, #48]	@ 0x30
	/* The reserved field contains buffer index */
	idx = hdr->reserved;
10005c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10005c92:	689b      	ldr	r3, [r3, #8]
10005c94:	85fb      	strh	r3, [r7, #46]	@ 0x2e

	/* Initialize RPMSG header. */
	rp_hdr.dst = dst;
10005c96:	687b      	ldr	r3, [r7, #4]
10005c98:	617b      	str	r3, [r7, #20]
	rp_hdr.src = src;
10005c9a:	68bb      	ldr	r3, [r7, #8]
10005c9c:	613b      	str	r3, [r7, #16]
	rp_hdr.len = len;
10005c9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
10005ca0:	b29b      	uxth	r3, r3
10005ca2:	83bb      	strh	r3, [r7, #28]
	rp_hdr.reserved = 0;
10005ca4:	2300      	movs	r3, #0
10005ca6:	61bb      	str	r3, [r7, #24]
	rp_hdr.flags = 0;
10005ca8:	2300      	movs	r3, #0
10005caa:	83fb      	strh	r3, [r7, #30]

	/* Copy data to rpmsg buffer. */
	io = rvdev->shbuf_io;
10005cac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10005cae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
10005cb2:	62bb      	str	r3, [r7, #40]	@ 0x28
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, hdr),
10005cb4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
10005cb6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
10005cb8:	f7ff fd87 	bl	100057ca <metal_io_virt_to_offset>
10005cbc:	4601      	mov	r1, r0
10005cbe:	f107 0210 	add.w	r2, r7, #16
10005cc2:	2310      	movs	r3, #16
10005cc4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
10005cc6:	f7ff f98b 	bl	10004fe0 <metal_io_block_write>
10005cca:	6278      	str	r0, [r7, #36]	@ 0x24
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");
10005ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10005cce:	2b10      	cmp	r3, #16
10005cd0:	d006      	beq.n	10005ce0 <rpmsg_virtio_send_offchannel_nocopy+0x68>
10005cd2:	4b1b      	ldr	r3, [pc, #108]	@ (10005d40 <rpmsg_virtio_send_offchannel_nocopy+0xc8>)
10005cd4:	4a1b      	ldr	r2, [pc, #108]	@ (10005d44 <rpmsg_virtio_send_offchannel_nocopy+0xcc>)
10005cd6:	f240 117d 	movw	r1, #381	@ 0x17d
10005cda:	481b      	ldr	r0, [pc, #108]	@ (10005d48 <rpmsg_virtio_send_offchannel_nocopy+0xd0>)
10005cdc:	f000 ff44 	bl	10006b68 <__assert_func>

	metal_mutex_acquire(&rdev->lock);
10005ce0:	68fb      	ldr	r3, [r7, #12]
10005ce2:	3358      	adds	r3, #88	@ 0x58
10005ce4:	4618      	mov	r0, r3
10005ce6:	f7ff fdef 	bl	100058c8 <metal_mutex_acquire>
#ifndef VIRTIO_SLAVE_ONLY
	if (rpmsg_virtio_get_role(rvdev) == RPMSG_MASTER)
		buff_len = RPMSG_BUFFER_SIZE;
	else
#endif /*!VIRTIO_SLAVE_ONLY*/
		buff_len = virtqueue_get_buffer_length(rvdev->svq, idx);
10005cea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10005cec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10005cf0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
10005cf2:	4611      	mov	r1, r2
10005cf4:	4618      	mov	r0, r3
10005cf6:	f000 fbf3 	bl	100064e0 <virtqueue_get_buffer_length>
10005cfa:	6238      	str	r0, [r7, #32]

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, hdr, buff_len, idx);
10005cfc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
10005cfe:	6a3a      	ldr	r2, [r7, #32]
10005d00:	6b39      	ldr	r1, [r7, #48]	@ 0x30
10005d02:	6b78      	ldr	r0, [r7, #52]	@ 0x34
10005d04:	f7ff feb5 	bl	10005a72 <rpmsg_virtio_enqueue_buffer>
10005d08:	6278      	str	r0, [r7, #36]	@ 0x24
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\r\n");
10005d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10005d0c:	2b00      	cmp	r3, #0
10005d0e:	d006      	beq.n	10005d1e <rpmsg_virtio_send_offchannel_nocopy+0xa6>
10005d10:	4b0e      	ldr	r3, [pc, #56]	@ (10005d4c <rpmsg_virtio_send_offchannel_nocopy+0xd4>)
10005d12:	4a0c      	ldr	r2, [pc, #48]	@ (10005d44 <rpmsg_virtio_send_offchannel_nocopy+0xcc>)
10005d14:	f44f 71c5 	mov.w	r1, #394	@ 0x18a
10005d18:	480b      	ldr	r0, [pc, #44]	@ (10005d48 <rpmsg_virtio_send_offchannel_nocopy+0xd0>)
10005d1a:	f000 ff25 	bl	10006b68 <__assert_func>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
10005d1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10005d20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10005d24:	4618      	mov	r0, r3
10005d26:	f000 fcaf 	bl	10006688 <virtqueue_kick>

	metal_mutex_release(&rdev->lock);
10005d2a:	68fb      	ldr	r3, [r7, #12]
10005d2c:	3358      	adds	r3, #88	@ 0x58
10005d2e:	4618      	mov	r0, r3
10005d30:	f7ff fdd5 	bl	100058de <metal_mutex_release>

	return len;
10005d34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
10005d36:	4618      	mov	r0, r3
10005d38:	3738      	adds	r7, #56	@ 0x38
10005d3a:	46bd      	mov	sp, r7
10005d3c:	bd80      	pop	{r7, pc}
10005d3e:	bf00      	nop
10005d40:	10007d3c 	.word	0x10007d3c
10005d44:	10007e84 	.word	0x10007e84
10005d48:	10007d58 	.word	0x10007d58
10005d4c:	10007dd8 	.word	0x10007dd8

10005d50 <rpmsg_virtio_send_offchannel_raw>:
 */
static int rpmsg_virtio_send_offchannel_raw(struct rpmsg_device *rdev,
					    uint32_t src, uint32_t dst,
					    const void *data,
					    int len, int wait)
{
10005d50:	b580      	push	{r7, lr}
10005d52:	b08c      	sub	sp, #48	@ 0x30
10005d54:	af02      	add	r7, sp, #8
10005d56:	60f8      	str	r0, [r7, #12]
10005d58:	60b9      	str	r1, [r7, #8]
10005d5a:	607a      	str	r2, [r7, #4]
10005d5c:	603b      	str	r3, [r7, #0]
	uint32_t buff_len;
	void *buffer;
	int status;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
10005d5e:	68fb      	ldr	r3, [r7, #12]
10005d60:	627b      	str	r3, [r7, #36]	@ 0x24

	/* Get the payload buffer. */
	buffer = rpmsg_virtio_get_tx_payload_buffer(rdev, &buff_len, wait);
10005d62:	f107 0314 	add.w	r3, r7, #20
10005d66:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
10005d68:	4619      	mov	r1, r3
10005d6a:	68f8      	ldr	r0, [r7, #12]
10005d6c:	f7ff ff31 	bl	10005bd2 <rpmsg_virtio_get_tx_payload_buffer>
10005d70:	6238      	str	r0, [r7, #32]
	if (!buffer)
10005d72:	6a3b      	ldr	r3, [r7, #32]
10005d74:	2b00      	cmp	r3, #0
10005d76:	d101      	bne.n	10005d7c <rpmsg_virtio_send_offchannel_raw+0x2c>
		return RPMSG_ERR_NO_BUFF;
10005d78:	4b17      	ldr	r3, [pc, #92]	@ (10005dd8 <rpmsg_virtio_send_offchannel_raw+0x88>)
10005d7a:	e029      	b.n	10005dd0 <rpmsg_virtio_send_offchannel_raw+0x80>

	/* Copy data to rpmsg buffer. */
	if (len > (int)buff_len)
10005d7c:	697b      	ldr	r3, [r7, #20]
10005d7e:	461a      	mov	r2, r3
10005d80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10005d82:	4293      	cmp	r3, r2
10005d84:	dd01      	ble.n	10005d8a <rpmsg_virtio_send_offchannel_raw+0x3a>
		len = buff_len;
10005d86:	697b      	ldr	r3, [r7, #20]
10005d88:	633b      	str	r3, [r7, #48]	@ 0x30
	io = rvdev->shbuf_io;
10005d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10005d8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
10005d90:	61fb      	str	r3, [r7, #28]
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
10005d92:	6a39      	ldr	r1, [r7, #32]
10005d94:	69f8      	ldr	r0, [r7, #28]
10005d96:	f7ff fd18 	bl	100057ca <metal_io_virt_to_offset>
10005d9a:	4601      	mov	r1, r0
10005d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10005d9e:	683a      	ldr	r2, [r7, #0]
10005da0:	69f8      	ldr	r0, [r7, #28]
10005da2:	f7ff f91d 	bl	10004fe0 <metal_io_block_write>
10005da6:	61b8      	str	r0, [r7, #24]
				      data, len);
	RPMSG_ASSERT(status == len, "failed to write buffer\r\n");
10005da8:	69ba      	ldr	r2, [r7, #24]
10005daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10005dac:	429a      	cmp	r2, r3
10005dae:	d006      	beq.n	10005dbe <rpmsg_virtio_send_offchannel_raw+0x6e>
10005db0:	4b0a      	ldr	r3, [pc, #40]	@ (10005ddc <rpmsg_virtio_send_offchannel_raw+0x8c>)
10005db2:	4a0b      	ldr	r2, [pc, #44]	@ (10005de0 <rpmsg_virtio_send_offchannel_raw+0x90>)
10005db4:	f44f 71dd 	mov.w	r1, #442	@ 0x1ba
10005db8:	480a      	ldr	r0, [pc, #40]	@ (10005de4 <rpmsg_virtio_send_offchannel_raw+0x94>)
10005dba:	f000 fed5 	bl	10006b68 <__assert_func>

	return rpmsg_virtio_send_offchannel_nocopy(rdev, src, dst, buffer, len);
10005dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10005dc0:	9300      	str	r3, [sp, #0]
10005dc2:	6a3b      	ldr	r3, [r7, #32]
10005dc4:	687a      	ldr	r2, [r7, #4]
10005dc6:	68b9      	ldr	r1, [r7, #8]
10005dc8:	68f8      	ldr	r0, [r7, #12]
10005dca:	f7ff ff55 	bl	10005c78 <rpmsg_virtio_send_offchannel_nocopy>
10005dce:	4603      	mov	r3, r0
}
10005dd0:	4618      	mov	r0, r3
10005dd2:	3728      	adds	r7, #40	@ 0x28
10005dd4:	46bd      	mov	sp, r7
10005dd6:	bd80      	pop	{r7, pc}
10005dd8:	fffff82e 	.word	0xfffff82e
10005ddc:	10007de4 	.word	0x10007de4
10005de0:	10007ea8 	.word	0x10007ea8
10005de4:	10007d58 	.word	0x10007d58

10005de8 <rpmsg_virtio_tx_callback>:
 * @param vq - pointer to virtqueue on which Tx is has been
 *             completed.
 *
 */
static void rpmsg_virtio_tx_callback(struct virtqueue *vq)
{
10005de8:	b480      	push	{r7}
10005dea:	b083      	sub	sp, #12
10005dec:	af00      	add	r7, sp, #0
10005dee:	6078      	str	r0, [r7, #4]
	(void)vq;
}
10005df0:	bf00      	nop
10005df2:	370c      	adds	r7, #12
10005df4:	46bd      	mov	sp, r7
10005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
10005dfa:	4770      	bx	lr

10005dfc <rpmsg_virtio_rx_callback>:
 *
 * @param vq - pointer to virtqueue on which messages is received
 *
 */
static void rpmsg_virtio_rx_callback(struct virtqueue *vq)
{
10005dfc:	b590      	push	{r4, r7, lr}
10005dfe:	b08d      	sub	sp, #52	@ 0x34
10005e00:	af02      	add	r7, sp, #8
10005e02:	6078      	str	r0, [r7, #4]
	struct virtio_device *vdev = vq->vq_dev;
10005e04:	687b      	ldr	r3, [r7, #4]
10005e06:	681b      	ldr	r3, [r3, #0]
10005e08:	623b      	str	r3, [r7, #32]
	struct rpmsg_virtio_device *rvdev = vdev->priv;
10005e0a:	6a3b      	ldr	r3, [r7, #32]
10005e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005e0e:	61fb      	str	r3, [r7, #28]
	struct rpmsg_device *rdev = &rvdev->rdev;
10005e10:	69fb      	ldr	r3, [r7, #28]
10005e12:	61bb      	str	r3, [r7, #24]
	struct rpmsg_hdr *rp_hdr;
	uint32_t len;
	uint16_t idx;
	int status;

	metal_mutex_acquire(&rdev->lock);
10005e14:	69bb      	ldr	r3, [r7, #24]
10005e16:	3358      	adds	r3, #88	@ 0x58
10005e18:	4618      	mov	r0, r3
10005e1a:	f7ff fd55 	bl	100058c8 <metal_mutex_acquire>

	/* Process the received data from remote node */
	rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
10005e1e:	f107 020a 	add.w	r2, r7, #10
10005e22:	f107 030c 	add.w	r3, r7, #12
10005e26:	4619      	mov	r1, r3
10005e28:	69f8      	ldr	r0, [r7, #28]
10005e2a:	f7ff fe5c 	bl	10005ae6 <rpmsg_virtio_get_rx_buffer>
10005e2e:	6278      	str	r0, [r7, #36]	@ 0x24

	metal_mutex_release(&rdev->lock);
10005e30:	69bb      	ldr	r3, [r7, #24]
10005e32:	3358      	adds	r3, #88	@ 0x58
10005e34:	4618      	mov	r0, r3
10005e36:	f7ff fd52 	bl	100058de <metal_mutex_release>

	while (rp_hdr) {
10005e3a:	e062      	b.n	10005f02 <rpmsg_virtio_rx_callback+0x106>
		rp_hdr->reserved = idx;
10005e3c:	897b      	ldrh	r3, [r7, #10]
10005e3e:	461a      	mov	r2, r3
10005e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10005e42:	609a      	str	r2, [r3, #8]

		/* Get the channel node from the remote device channels list. */
		metal_mutex_acquire(&rdev->lock);
10005e44:	69bb      	ldr	r3, [r7, #24]
10005e46:	3358      	adds	r3, #88	@ 0x58
10005e48:	4618      	mov	r0, r3
10005e4a:	f7ff fd3d 	bl	100058c8 <metal_mutex_acquire>
		ept = rpmsg_get_ept_from_addr(rdev, rp_hdr->dst);
10005e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10005e50:	685b      	ldr	r3, [r3, #4]
10005e52:	4619      	mov	r1, r3
10005e54:	69b8      	ldr	r0, [r7, #24]
10005e56:	f7ff fdc9 	bl	100059ec <rpmsg_get_ept_from_addr>
10005e5a:	6178      	str	r0, [r7, #20]
		metal_mutex_release(&rdev->lock);
10005e5c:	69bb      	ldr	r3, [r7, #24]
10005e5e:	3358      	adds	r3, #88	@ 0x58
10005e60:	4618      	mov	r0, r3
10005e62:	f7ff fd3c 	bl	100058de <metal_mutex_release>

		if (ept) {
10005e66:	697b      	ldr	r3, [r7, #20]
10005e68:	2b00      	cmp	r3, #0
10005e6a:	d025      	beq.n	10005eb8 <rpmsg_virtio_rx_callback+0xbc>
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
10005e6c:	697b      	ldr	r3, [r7, #20]
10005e6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10005e70:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
10005e74:	d103      	bne.n	10005e7e <rpmsg_virtio_rx_callback+0x82>
				/*
				 * First message received from the remote side,
				 * update channel destination address
				 */
				ept->dest_addr = rp_hdr->src;
10005e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10005e78:	681a      	ldr	r2, [r3, #0]
10005e7a:	697b      	ldr	r3, [r7, #20]
10005e7c:	629a      	str	r2, [r3, #40]	@ 0x28
			}
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
10005e7e:	697b      	ldr	r3, [r7, #20]
10005e80:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
10005e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10005e84:	f103 0110 	add.w	r1, r3, #16
					 rp_hdr->len, rp_hdr->src, ept->priv);
10005e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10005e8a:	899b      	ldrh	r3, [r3, #12]
10005e8c:	b29b      	uxth	r3, r3
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
10005e8e:	4618      	mov	r0, r3
10005e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10005e92:	681a      	ldr	r2, [r3, #0]
10005e94:	697b      	ldr	r3, [r7, #20]
10005e96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10005e98:	9300      	str	r3, [sp, #0]
10005e9a:	4613      	mov	r3, r2
10005e9c:	4602      	mov	r2, r0
10005e9e:	6978      	ldr	r0, [r7, #20]
10005ea0:	47a0      	blx	r4
10005ea2:	6138      	str	r0, [r7, #16]

			RPMSG_ASSERT(status >= 0,
10005ea4:	693b      	ldr	r3, [r7, #16]
10005ea6:	2b00      	cmp	r3, #0
10005ea8:	da06      	bge.n	10005eb8 <rpmsg_virtio_rx_callback+0xbc>
10005eaa:	4b1a      	ldr	r3, [pc, #104]	@ (10005f14 <rpmsg_virtio_rx_callback+0x118>)
10005eac:	4a1a      	ldr	r2, [pc, #104]	@ (10005f18 <rpmsg_virtio_rx_callback+0x11c>)
10005eae:	f44f 71fd 	mov.w	r1, #506	@ 0x1fa
10005eb2:	481a      	ldr	r0, [pc, #104]	@ (10005f1c <rpmsg_virtio_rx_callback+0x120>)
10005eb4:	f000 fe58 	bl	10006b68 <__assert_func>
				     "unexpected callback status\r\n");
		}

		metal_mutex_acquire(&rdev->lock);
10005eb8:	69bb      	ldr	r3, [r7, #24]
10005eba:	3358      	adds	r3, #88	@ 0x58
10005ebc:	4618      	mov	r0, r3
10005ebe:	f7ff fd03 	bl	100058c8 <metal_mutex_acquire>

		/* Check whether callback wants to hold buffer */
		if (!(rp_hdr->reserved & RPMSG_BUF_HELD)) {
10005ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10005ec4:	689b      	ldr	r3, [r3, #8]
10005ec6:	2b00      	cmp	r3, #0
10005ec8:	db05      	blt.n	10005ed6 <rpmsg_virtio_rx_callback+0xda>
			/* No, return used buffers. */
			rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
10005eca:	68fa      	ldr	r2, [r7, #12]
10005ecc:	897b      	ldrh	r3, [r7, #10]
10005ece:	6a79      	ldr	r1, [r7, #36]	@ 0x24
10005ed0:	69f8      	ldr	r0, [r7, #28]
10005ed2:	f7ff fdb5 	bl	10005a40 <rpmsg_virtio_return_buffer>
		}

		rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
10005ed6:	f107 020a 	add.w	r2, r7, #10
10005eda:	f107 030c 	add.w	r3, r7, #12
10005ede:	4619      	mov	r1, r3
10005ee0:	69f8      	ldr	r0, [r7, #28]
10005ee2:	f7ff fe00 	bl	10005ae6 <rpmsg_virtio_get_rx_buffer>
10005ee6:	6278      	str	r0, [r7, #36]	@ 0x24
		if (!rp_hdr) {
10005ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10005eea:	2b00      	cmp	r3, #0
10005eec:	d104      	bne.n	10005ef8 <rpmsg_virtio_rx_callback+0xfc>
			/* tell peer we return some rx buffer */
			virtqueue_kick(rvdev->rvq);
10005eee:	69fb      	ldr	r3, [r7, #28]
10005ef0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
10005ef2:	4618      	mov	r0, r3
10005ef4:	f000 fbc8 	bl	10006688 <virtqueue_kick>
		}
		metal_mutex_release(&rdev->lock);
10005ef8:	69bb      	ldr	r3, [r7, #24]
10005efa:	3358      	adds	r3, #88	@ 0x58
10005efc:	4618      	mov	r0, r3
10005efe:	f7ff fcee 	bl	100058de <metal_mutex_release>
	while (rp_hdr) {
10005f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10005f04:	2b00      	cmp	r3, #0
10005f06:	d199      	bne.n	10005e3c <rpmsg_virtio_rx_callback+0x40>
	}
}
10005f08:	bf00      	nop
10005f0a:	bf00      	nop
10005f0c:	372c      	adds	r7, #44	@ 0x2c
10005f0e:	46bd      	mov	sp, r7
10005f10:	bd90      	pop	{r4, r7, pc}
10005f12:	bf00      	nop
10005f14:	10007df4 	.word	0x10007df4
10005f18:	10007ecc 	.word	0x10007ecc
10005f1c:	10007d58 	.word	0x10007d58

10005f20 <rpmsg_virtio_ns_callback>:
 *
 * @return - rpmag endpoint callback handled
 */
static int rpmsg_virtio_ns_callback(struct rpmsg_endpoint *ept, void *data,
				    size_t len, uint32_t src, void *priv)
{
10005f20:	b580      	push	{r7, lr}
10005f22:	b092      	sub	sp, #72	@ 0x48
10005f24:	af00      	add	r7, sp, #0
10005f26:	60f8      	str	r0, [r7, #12]
10005f28:	60b9      	str	r1, [r7, #8]
10005f2a:	607a      	str	r2, [r7, #4]
10005f2c:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev = ept->rdev;
10005f2e:	68fb      	ldr	r3, [r7, #12]
10005f30:	6a1b      	ldr	r3, [r3, #32]
10005f32:	647b      	str	r3, [r7, #68]	@ 0x44
	struct rpmsg_virtio_device *rvdev = (struct rpmsg_virtio_device *)rdev;
10005f34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10005f36:	643b      	str	r3, [r7, #64]	@ 0x40
	struct metal_io_region *io = rvdev->shbuf_io;
10005f38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
10005f3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
10005f3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	char name[RPMSG_NAME_SIZE];

	(void)priv;
	(void)src;

	ns_msg = data;
10005f40:	68bb      	ldr	r3, [r7, #8]
10005f42:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (len != sizeof(*ns_msg))
10005f44:	687b      	ldr	r3, [r7, #4]
10005f46:	2b28      	cmp	r3, #40	@ 0x28
10005f48:	d001      	beq.n	10005f4e <rpmsg_virtio_ns_callback+0x2e>
		/* Returns as the message is corrupted */
		return RPMSG_SUCCESS;
10005f4a:	2300      	movs	r3, #0
10005f4c:	e057      	b.n	10005ffe <rpmsg_virtio_ns_callback+0xde>
	metal_io_block_read(io,
			    metal_io_virt_to_offset(io, ns_msg->name),
10005f4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
	metal_io_block_read(io,
10005f50:	4619      	mov	r1, r3
10005f52:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
10005f54:	f7ff fc39 	bl	100057ca <metal_io_virt_to_offset>
10005f58:	4601      	mov	r1, r0
10005f5a:	f107 0210 	add.w	r2, r7, #16
10005f5e:	2320      	movs	r3, #32
10005f60:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
10005f62:	f7fe ffc8 	bl	10004ef6 <metal_io_block_read>
			    &name, sizeof(name));
	dest = ns_msg->addr;
10005f66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10005f68:	6a1b      	ldr	r3, [r3, #32]
10005f6a:	637b      	str	r3, [r7, #52]	@ 0x34

	/* check if a Ept has been locally registered */
	metal_mutex_acquire(&rdev->lock);
10005f6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10005f6e:	3358      	adds	r3, #88	@ 0x58
10005f70:	4618      	mov	r0, r3
10005f72:	f7ff fca9 	bl	100058c8 <metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
10005f76:	f107 0110 	add.w	r1, r7, #16
10005f7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10005f7c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
10005f80:	6c78      	ldr	r0, [r7, #68]	@ 0x44
10005f82:	f7ff fb88 	bl	10005696 <rpmsg_get_endpoint>
10005f86:	6338      	str	r0, [r7, #48]	@ 0x30

	if (ns_msg->flags & RPMSG_NS_DESTROY) {
10005f88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10005f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005f8c:	f003 0301 	and.w	r3, r3, #1
10005f90:	2b00      	cmp	r3, #0
10005f92:	d017      	beq.n	10005fc4 <rpmsg_virtio_ns_callback+0xa4>
		if (_ept)
10005f94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10005f96:	2b00      	cmp	r3, #0
10005f98:	d003      	beq.n	10005fa2 <rpmsg_virtio_ns_callback+0x82>
			_ept->dest_addr = RPMSG_ADDR_ANY;
10005f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10005f9c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
10005fa0:	629a      	str	r2, [r3, #40]	@ 0x28
		metal_mutex_release(&rdev->lock);
10005fa2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10005fa4:	3358      	adds	r3, #88	@ 0x58
10005fa6:	4618      	mov	r0, r3
10005fa8:	f7ff fc99 	bl	100058de <metal_mutex_release>
		if (_ept && _ept->ns_unbind_cb)
10005fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10005fae:	2b00      	cmp	r3, #0
10005fb0:	d024      	beq.n	10005ffc <rpmsg_virtio_ns_callback+0xdc>
10005fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10005fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10005fb6:	2b00      	cmp	r3, #0
10005fb8:	d020      	beq.n	10005ffc <rpmsg_virtio_ns_callback+0xdc>
			_ept->ns_unbind_cb(_ept);
10005fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10005fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10005fbe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
10005fc0:	4798      	blx	r3
10005fc2:	e01b      	b.n	10005ffc <rpmsg_virtio_ns_callback+0xdc>
	} else {
		if (!_ept) {
10005fc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10005fc6:	2b00      	cmp	r3, #0
10005fc8:	d110      	bne.n	10005fec <rpmsg_virtio_ns_callback+0xcc>
			 * send callback to application, that can
			 * - create the associated endpoints.
			 * - store information for future use.
			 * - just ignore the request as service not supported.
			 */
			metal_mutex_release(&rdev->lock);
10005fca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10005fcc:	3358      	adds	r3, #88	@ 0x58
10005fce:	4618      	mov	r0, r3
10005fd0:	f7ff fc85 	bl	100058de <metal_mutex_release>
			if (rdev->ns_bind_cb)
10005fd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10005fd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
10005fd8:	2b00      	cmp	r3, #0
10005fda:	d00f      	beq.n	10005ffc <rpmsg_virtio_ns_callback+0xdc>
				rdev->ns_bind_cb(rdev, name, dest);
10005fdc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10005fde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
10005fe0:	f107 0110 	add.w	r1, r7, #16
10005fe4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
10005fe6:	6c78      	ldr	r0, [r7, #68]	@ 0x44
10005fe8:	4798      	blx	r3
10005fea:	e007      	b.n	10005ffc <rpmsg_virtio_ns_callback+0xdc>
		} else {
			_ept->dest_addr = dest;
10005fec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10005fee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
10005ff0:	629a      	str	r2, [r3, #40]	@ 0x28
			metal_mutex_release(&rdev->lock);
10005ff2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10005ff4:	3358      	adds	r3, #88	@ 0x58
10005ff6:	4618      	mov	r0, r3
10005ff8:	f7ff fc71 	bl	100058de <metal_mutex_release>
		}
	}

	return RPMSG_SUCCESS;
10005ffc:	2300      	movs	r3, #0
}
10005ffe:	4618      	mov	r0, r3
10006000:	3748      	adds	r7, #72	@ 0x48
10006002:	46bd      	mov	sp, r7
10006004:	bd80      	pop	{r7, pc}
	...

10006008 <rpmsg_init_vdev>:
int rpmsg_init_vdev(struct rpmsg_virtio_device *rvdev,
		    struct virtio_device *vdev,
		    rpmsg_ns_bind_cb ns_bind_cb,
		    struct metal_io_region *shm_io,
		    struct rpmsg_virtio_shm_pool *shpool)
{
10006008:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
1000600c:	b090      	sub	sp, #64	@ 0x40
1000600e:	af02      	add	r7, sp, #8
10006010:	60f8      	str	r0, [r7, #12]
10006012:	60b9      	str	r1, [r7, #8]
10006014:	607a      	str	r2, [r7, #4]
10006016:	603b      	str	r3, [r7, #0]
	const char *vq_names[RPMSG_NUM_VRINGS];
	vq_callback callback[RPMSG_NUM_VRINGS];
	int status;
	unsigned int i, role;

	rdev = &rvdev->rdev;
10006018:	68fb      	ldr	r3, [r7, #12]
1000601a:	633b      	str	r3, [r7, #48]	@ 0x30
	memset(rdev, 0, sizeof(*rdev));
1000601c:	2278      	movs	r2, #120	@ 0x78
1000601e:	2100      	movs	r1, #0
10006020:	6b38      	ldr	r0, [r7, #48]	@ 0x30
10006022:	f000 ff94 	bl	10006f4e <memset>
	metal_mutex_init(&rdev->lock);
10006026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10006028:	3358      	adds	r3, #88	@ 0x58
1000602a:	4618      	mov	r0, r3
1000602c:	f7ff fc41 	bl	100058b2 <metal_mutex_init>
	rvdev->vdev = vdev;
10006030:	68fb      	ldr	r3, [r7, #12]
10006032:	68ba      	ldr	r2, [r7, #8]
10006034:	679a      	str	r2, [r3, #120]	@ 0x78
	rdev->ns_bind_cb = ns_bind_cb;
10006036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10006038:	687a      	ldr	r2, [r7, #4]
1000603a:	65da      	str	r2, [r3, #92]	@ 0x5c
	vdev->priv = rvdev;
1000603c:	68bb      	ldr	r3, [r7, #8]
1000603e:	68fa      	ldr	r2, [r7, #12]
10006040:	625a      	str	r2, [r3, #36]	@ 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
10006042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10006044:	4a4d      	ldr	r2, [pc, #308]	@ (1000617c <rpmsg_init_vdev+0x174>)
10006046:	661a      	str	r2, [r3, #96]	@ 0x60
	rdev->ops.hold_rx_buffer = rpmsg_virtio_hold_rx_buffer;
10006048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1000604a:	4a4d      	ldr	r2, [pc, #308]	@ (10006180 <rpmsg_init_vdev+0x178>)
1000604c:	665a      	str	r2, [r3, #100]	@ 0x64
	rdev->ops.release_rx_buffer = rpmsg_virtio_release_rx_buffer;
1000604e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10006050:	4a4c      	ldr	r2, [pc, #304]	@ (10006184 <rpmsg_init_vdev+0x17c>)
10006052:	669a      	str	r2, [r3, #104]	@ 0x68
	rdev->ops.get_tx_payload_buffer = rpmsg_virtio_get_tx_payload_buffer;
10006054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10006056:	4a4c      	ldr	r2, [pc, #304]	@ (10006188 <rpmsg_init_vdev+0x180>)
10006058:	66da      	str	r2, [r3, #108]	@ 0x6c
	rdev->ops.send_offchannel_nocopy = rpmsg_virtio_send_offchannel_nocopy;
1000605a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1000605c:	4a4b      	ldr	r2, [pc, #300]	@ (1000618c <rpmsg_init_vdev+0x184>)
1000605e:	671a      	str	r2, [r3, #112]	@ 0x70
	role = rpmsg_virtio_get_role(rvdev);
10006060:	68f8      	ldr	r0, [r7, #12]
10006062:	f7ff fc47 	bl	100058f4 <rpmsg_virtio_get_role>
10006066:	62f8      	str	r0, [r7, #44]	@ 0x2c

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
10006068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1000606a:	2b01      	cmp	r3, #1
1000606c:	d102      	bne.n	10006074 <rpmsg_init_vdev+0x6c>
		/* wait synchro with the master */
		rpmsg_virtio_wait_remote_ready(rvdev);
1000606e:	68f8      	ldr	r0, [r7, #12]
10006070:	f7ff fd55 	bl	10005b1e <rpmsg_virtio_wait_remote_ready>
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	vdev->features = rpmsg_virtio_get_features(rvdev);
10006074:	68f8      	ldr	r0, [r7, #12]
10006076:	f7ff fc6e 	bl	10005956 <rpmsg_virtio_get_features>
1000607a:	4603      	mov	r3, r0
1000607c:	2200      	movs	r2, #0
1000607e:	4698      	mov	r8, r3
10006080:	4691      	mov	r9, r2
10006082:	68bb      	ldr	r3, [r7, #8]
10006084:	e9c3 8904 	strd	r8, r9, [r3, #16]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
10006088:	68bb      	ldr	r3, [r7, #8]
1000608a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
1000608e:	f002 0401 	and.w	r4, r2, #1
10006092:	2500      	movs	r5, #0
10006094:	ea44 0305 	orr.w	r3, r4, r5
10006098:	2b00      	cmp	r3, #0
1000609a:	bf14      	ite	ne
1000609c:	2301      	movne	r3, #1
1000609e:	2300      	moveq	r3, #0
100060a0:	b2da      	uxtb	r2, r3
100060a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100060a4:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	(void)shpool;
	if (role == RPMSG_REMOTE) {
100060a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
100060aa:	2b01      	cmp	r3, #1
100060ac:	d113      	bne.n	100060d6 <rpmsg_init_vdev+0xce>
		vq_names[0] = "tx_vq";
100060ae:	4b38      	ldr	r3, [pc, #224]	@ (10006190 <rpmsg_init_vdev+0x188>)
100060b0:	61fb      	str	r3, [r7, #28]
		vq_names[1] = "rx_vq";
100060b2:	4b38      	ldr	r3, [pc, #224]	@ (10006194 <rpmsg_init_vdev+0x18c>)
100060b4:	623b      	str	r3, [r7, #32]
		callback[0] = rpmsg_virtio_tx_callback;
100060b6:	4b38      	ldr	r3, [pc, #224]	@ (10006198 <rpmsg_init_vdev+0x190>)
100060b8:	617b      	str	r3, [r7, #20]
		callback[1] = rpmsg_virtio_rx_callback;
100060ba:	4b38      	ldr	r3, [pc, #224]	@ (1000619c <rpmsg_init_vdev+0x194>)
100060bc:	61bb      	str	r3, [r7, #24]
		rvdev->rvq  = vdev->vrings_info[1].vq;
100060be:	68bb      	ldr	r3, [r7, #8]
100060c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
100060c2:	3318      	adds	r3, #24
100060c4:	681a      	ldr	r2, [r3, #0]
100060c6:	68fb      	ldr	r3, [r7, #12]
100060c8:	67da      	str	r2, [r3, #124]	@ 0x7c
		rvdev->svq  = vdev->vrings_info[0].vq;
100060ca:	68bb      	ldr	r3, [r7, #8]
100060cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
100060ce:	681a      	ldr	r2, [r3, #0]
100060d0:	68fb      	ldr	r3, [r7, #12]
100060d2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	rvdev->shbuf_io = shm_io;
100060d6:	68fb      	ldr	r3, [r7, #12]
100060d8:	683a      	ldr	r2, [r7, #0]
100060da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

	/* Create virtqueues for remote device */
	status = rpmsg_virtio_create_virtqueues(rvdev, 0, RPMSG_NUM_VRINGS,
100060de:	f107 021c 	add.w	r2, r7, #28
100060e2:	f107 0314 	add.w	r3, r7, #20
100060e6:	9300      	str	r3, [sp, #0]
100060e8:	4613      	mov	r3, r2
100060ea:	2202      	movs	r2, #2
100060ec:	2100      	movs	r1, #0
100060ee:	68f8      	ldr	r0, [r7, #12]
100060f0:	f7ff fc42 	bl	10005978 <rpmsg_virtio_create_virtqueues>
100060f4:	62b8      	str	r0, [r7, #40]	@ 0x28
						vq_names, callback);
	if (status != RPMSG_SUCCESS)
100060f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
100060f8:	2b00      	cmp	r3, #0
100060fa:	d001      	beq.n	10006100 <rpmsg_init_vdev+0xf8>
		return status;
100060fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
100060fe:	e037      	b.n	10006170 <rpmsg_init_vdev+0x168>

	/*
	 * Suppress "tx-complete" interrupts
	 * since send method use busy loop when buffer pool exhaust
	 */
	virtqueue_disable_cb(rvdev->svq);
10006100:	68fb      	ldr	r3, [r7, #12]
10006102:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10006106:	4618      	mov	r0, r3
10006108:	f000 fa86 	bl	10006618 <virtqueue_disable_cb>

	/* TODO: can have a virtio function to set the shared memory I/O */
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
1000610c:	2300      	movs	r3, #0
1000610e:	637b      	str	r3, [r7, #52]	@ 0x34
10006110:	e00f      	b.n	10006132 <rpmsg_init_vdev+0x12a>
		struct virtqueue *vq;

		vq = vdev->vrings_info[i].vq;
10006112:	68bb      	ldr	r3, [r7, #8]
10006114:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
10006116:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
10006118:	4613      	mov	r3, r2
1000611a:	005b      	lsls	r3, r3, #1
1000611c:	4413      	add	r3, r2
1000611e:	00db      	lsls	r3, r3, #3
10006120:	440b      	add	r3, r1
10006122:	681b      	ldr	r3, [r3, #0]
10006124:	627b      	str	r3, [r7, #36]	@ 0x24
		vq->shm_io = shm_io;
10006126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10006128:	683a      	ldr	r2, [r7, #0]
1000612a:	629a      	str	r2, [r3, #40]	@ 0x28
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
1000612c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1000612e:	3301      	adds	r3, #1
10006130:	637b      	str	r3, [r7, #52]	@ 0x34
10006132:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10006134:	2b01      	cmp	r3, #1
10006136:	d9ec      	bls.n	10006112 <rpmsg_init_vdev+0x10a>
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

	/* Initialize channels and endpoints list */
	metal_list_init(&rdev->endpoints);
10006138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1000613a:	4618      	mov	r0, r3
1000613c:	f7ff fb35 	bl	100057aa <metal_list_init>

	/*
	 * Create name service announcement endpoint if device supports name
	 * service announcement feature.
	 */
	if (rdev->support_ns) {
10006140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10006142:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
10006146:	2b00      	cmp	r3, #0
10006148:	d011      	beq.n	1000616e <rpmsg_init_vdev+0x166>
		rpmsg_initialize_ept(&rdev->ns_ept, "NS",
1000614a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1000614c:	f103 0008 	add.w	r0, r3, #8
10006150:	2300      	movs	r3, #0
10006152:	9301      	str	r3, [sp, #4]
10006154:	4b12      	ldr	r3, [pc, #72]	@ (100061a0 <rpmsg_init_vdev+0x198>)
10006156:	9300      	str	r3, [sp, #0]
10006158:	2335      	movs	r3, #53	@ 0x35
1000615a:	2235      	movs	r2, #53	@ 0x35
1000615c:	4911      	ldr	r1, [pc, #68]	@ (100061a4 <rpmsg_init_vdev+0x19c>)
1000615e:	f7ff fc21 	bl	100059a4 <rpmsg_initialize_ept>
				     RPMSG_NS_EPT_ADDR, RPMSG_NS_EPT_ADDR,
				     rpmsg_virtio_ns_callback, NULL);
		rpmsg_register_endpoint(rdev, &rdev->ns_ept);
10006162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10006164:	3308      	adds	r3, #8
10006166:	4619      	mov	r1, r3
10006168:	6b38      	ldr	r0, [r7, #48]	@ 0x30
1000616a:	f7ff faf4 	bl	10005756 <rpmsg_register_endpoint>
#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER)
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
#endif /*!VIRTIO_SLAVE_ONLY*/

	return status;
1000616e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
10006170:	4618      	mov	r0, r3
10006172:	3738      	adds	r7, #56	@ 0x38
10006174:	46bd      	mov	sp, r7
10006176:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
1000617a:	bf00      	nop
1000617c:	10005d51 	.word	0x10005d51
10006180:	10005b59 	.word	0x10005b59
10006184:	10005b81 	.word	0x10005b81
10006188:	10005bd3 	.word	0x10005bd3
1000618c:	10005c79 	.word	0x10005c79
10006190:	10007e00 	.word	0x10007e00
10006194:	10007e08 	.word	0x10007e08
10006198:	10005de9 	.word	0x10005de9
1000619c:	10005dfd 	.word	0x10005dfd
100061a0:	10005f21 	.word	0x10005f21
100061a4:	10007e10 	.word	0x10007e10

100061a8 <metal_machine_cache_flush>:

	/* Add implementation here */
}

void metal_machine_cache_flush(void *addr, unsigned int len)
{
100061a8:	b480      	push	{r7}
100061aa:	b083      	sub	sp, #12
100061ac:	af00      	add	r7, sp, #0
100061ae:	6078      	str	r0, [r7, #4]
100061b0:	6039      	str	r1, [r7, #0]
	metal_unused(addr);
	metal_unused(len);

	/* Add implementation here */
}
100061b2:	bf00      	nop
100061b4:	370c      	adds	r7, #12
100061b6:	46bd      	mov	sp, r7
100061b8:	f85d 7b04 	ldr.w	r7, [sp], #4
100061bc:	4770      	bx	lr

100061be <metal_machine_cache_invalidate>:

void metal_machine_cache_invalidate(void *addr, unsigned int len)
{
100061be:	b480      	push	{r7}
100061c0:	b083      	sub	sp, #12
100061c2:	af00      	add	r7, sp, #0
100061c4:	6078      	str	r0, [r7, #4]
100061c6:	6039      	str	r1, [r7, #0]
	metal_unused(addr);
	metal_unused(len);

	/* Add implementation here */
}
100061c8:	bf00      	nop
100061ca:	370c      	adds	r7, #12
100061cc:	46bd      	mov	sp, r7
100061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
100061d2:	4770      	bx	lr

100061d4 <metal_machine_io_mem_map>:
	/* Add implementation here */
}

void *metal_machine_io_mem_map(void *va, metal_phys_addr_t pa,
			       size_t size, unsigned int flags)
{
100061d4:	b480      	push	{r7}
100061d6:	b085      	sub	sp, #20
100061d8:	af00      	add	r7, sp, #0
100061da:	60f8      	str	r0, [r7, #12]
100061dc:	60b9      	str	r1, [r7, #8]
100061de:	607a      	str	r2, [r7, #4]
100061e0:	603b      	str	r3, [r7, #0]
	metal_unused(size);
	metal_unused(flags);

	/* Add implementation here */

	return va;
100061e2:	68fb      	ldr	r3, [r7, #12]
}
100061e4:	4618      	mov	r0, r3
100061e6:	3714      	adds	r7, #20
100061e8:	46bd      	mov	sp, r7
100061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
100061ee:	4770      	bx	lr

100061f0 <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback callbacks[])
{
100061f0:	b590      	push	{r4, r7, lr}
100061f2:	b08f      	sub	sp, #60	@ 0x3c
100061f4:	af04      	add	r7, sp, #16
100061f6:	60f8      	str	r0, [r7, #12]
100061f8:	60b9      	str	r1, [r7, #8]
100061fa:	607a      	str	r2, [r7, #4]
100061fc:	603b      	str	r3, [r7, #0]
	struct vring_alloc_info *vring_alloc;
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
100061fe:	68fb      	ldr	r3, [r7, #12]
10006200:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10006202:	623b      	str	r3, [r7, #32]
	if (nvqs > num_vrings)
10006204:	687a      	ldr	r2, [r7, #4]
10006206:	6a3b      	ldr	r3, [r7, #32]
10006208:	429a      	cmp	r2, r3
1000620a:	d901      	bls.n	10006210 <virtio_create_virtqueues+0x20>
		return ERROR_VQUEUE_INVLD_PARAM;
1000620c:	4b1e      	ldr	r3, [pc, #120]	@ (10006288 <virtio_create_virtqueues+0x98>)
1000620e:	e036      	b.n	1000627e <virtio_create_virtqueues+0x8e>
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
10006210:	2300      	movs	r3, #0
10006212:	627b      	str	r3, [r7, #36]	@ 0x24
10006214:	e02e      	b.n	10006274 <virtio_create_virtqueues+0x84>
		vring_info = &vdev->vrings_info[i];
10006216:	68fb      	ldr	r3, [r7, #12]
10006218:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
1000621a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
1000621c:	4613      	mov	r3, r2
1000621e:	005b      	lsls	r3, r3, #1
10006220:	4413      	add	r3, r2
10006222:	00db      	lsls	r3, r3, #3
10006224:	440b      	add	r3, r1
10006226:	61fb      	str	r3, [r7, #28]

		vring_alloc = &vring_info->info;
10006228:	69fb      	ldr	r3, [r7, #28]
1000622a:	3304      	adds	r3, #4
1000622c:	61bb      	str	r3, [r7, #24]
			metal_io_block_set(io, offset, 0,
					   vring_size(vring_alloc->num_descs,
						      vring_alloc->align));
		}
#endif
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
1000622e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10006230:	b298      	uxth	r0, r3
10006232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10006234:	009b      	lsls	r3, r3, #2
10006236:	683a      	ldr	r2, [r7, #0]
10006238:	4413      	add	r3, r2
1000623a:	681c      	ldr	r4, [r3, #0]
				       callbacks[i], vdev->func->notify,
1000623c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1000623e:	009b      	lsls	r3, r3, #2
10006240:	6bba      	ldr	r2, [r7, #56]	@ 0x38
10006242:	4413      	add	r3, r2
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
10006244:	681b      	ldr	r3, [r3, #0]
				       callbacks[i], vdev->func->notify,
10006246:	68fa      	ldr	r2, [r7, #12]
10006248:	6a12      	ldr	r2, [r2, #32]
1000624a:	6a12      	ldr	r2, [r2, #32]
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
1000624c:	69f9      	ldr	r1, [r7, #28]
1000624e:	6809      	ldr	r1, [r1, #0]
10006250:	9102      	str	r1, [sp, #8]
10006252:	9201      	str	r2, [sp, #4]
10006254:	9300      	str	r3, [sp, #0]
10006256:	69bb      	ldr	r3, [r7, #24]
10006258:	4622      	mov	r2, r4
1000625a:	4601      	mov	r1, r0
1000625c:	68f8      	ldr	r0, [r7, #12]
1000625e:	f000 f90e 	bl	1000647e <virtqueue_create>
10006262:	6178      	str	r0, [r7, #20]
				       vring_info->vq);
		if (ret)
10006264:	697b      	ldr	r3, [r7, #20]
10006266:	2b00      	cmp	r3, #0
10006268:	d001      	beq.n	1000626e <virtio_create_virtqueues+0x7e>
			return ret;
1000626a:	697b      	ldr	r3, [r7, #20]
1000626c:	e007      	b.n	1000627e <virtio_create_virtqueues+0x8e>
	for (i = 0; i < nvqs; i++) {
1000626e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10006270:	3301      	adds	r3, #1
10006272:	627b      	str	r3, [r7, #36]	@ 0x24
10006274:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10006276:	687b      	ldr	r3, [r7, #4]
10006278:	429a      	cmp	r2, r3
1000627a:	d3cc      	bcc.n	10006216 <virtio_create_virtqueues+0x26>
	}
	return 0;
1000627c:	2300      	movs	r3, #0
}
1000627e:	4618      	mov	r0, r3
10006280:	372c      	adds	r7, #44	@ 0x2c
10006282:	46bd      	mov	sp, r7
10006284:	bd90      	pop	{r4, r7, pc}
10006286:	bf00      	nop
10006288:	fffff440 	.word	0xfffff440

1000628c <vring_init>:
	return size;
}

static inline void
vring_init(struct vring *vr, unsigned int num, uint8_t *p, unsigned long align)
{
1000628c:	b480      	push	{r7}
1000628e:	b085      	sub	sp, #20
10006290:	af00      	add	r7, sp, #0
10006292:	60f8      	str	r0, [r7, #12]
10006294:	60b9      	str	r1, [r7, #8]
10006296:	607a      	str	r2, [r7, #4]
10006298:	603b      	str	r3, [r7, #0]
	vr->num = num;
1000629a:	68fb      	ldr	r3, [r7, #12]
1000629c:	68ba      	ldr	r2, [r7, #8]
1000629e:	601a      	str	r2, [r3, #0]
	vr->desc = (struct vring_desc *)p;
100062a0:	68fb      	ldr	r3, [r7, #12]
100062a2:	687a      	ldr	r2, [r7, #4]
100062a4:	605a      	str	r2, [r3, #4]
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
100062a6:	68bb      	ldr	r3, [r7, #8]
100062a8:	011b      	lsls	r3, r3, #4
100062aa:	687a      	ldr	r2, [r7, #4]
100062ac:	441a      	add	r2, r3
100062ae:	68fb      	ldr	r3, [r7, #12]
100062b0:	609a      	str	r2, [r3, #8]
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
100062b2:	68fb      	ldr	r3, [r7, #12]
100062b4:	689a      	ldr	r2, [r3, #8]
100062b6:	68bb      	ldr	r3, [r7, #8]
100062b8:	005b      	lsls	r3, r3, #1
100062ba:	4413      	add	r3, r2
100062bc:	3304      	adds	r3, #4
100062be:	461a      	mov	r2, r3
100062c0:	683b      	ldr	r3, [r7, #0]
100062c2:	4413      	add	r3, r2
	      align - 1) & ~(align - 1));
100062c4:	1c5a      	adds	r2, r3, #1
100062c6:	683b      	ldr	r3, [r7, #0]
100062c8:	425b      	negs	r3, r3
100062ca:	4013      	ands	r3, r2
	vr->used = (struct vring_used *)
100062cc:	461a      	mov	r2, r3
100062ce:	68fb      	ldr	r3, [r7, #12]
100062d0:	60da      	str	r2, [r3, #12]
}
100062d2:	bf00      	nop
100062d4:	3714      	adds	r7, #20
100062d6:	46bd      	mov	sp, r7
100062d8:	f85d 7b04 	ldr.w	r7, [sp], #4
100062dc:	4770      	bx	lr

100062de <vring_need_event>:
 * just incremented index from old to new_idx, should we trigger an
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
100062de:	b480      	push	{r7}
100062e0:	b083      	sub	sp, #12
100062e2:	af00      	add	r7, sp, #0
100062e4:	4603      	mov	r3, r0
100062e6:	80fb      	strh	r3, [r7, #6]
100062e8:	460b      	mov	r3, r1
100062ea:	80bb      	strh	r3, [r7, #4]
100062ec:	4613      	mov	r3, r2
100062ee:	807b      	strh	r3, [r7, #2]
	return (uint16_t)(new_idx - event_idx - 1) <
100062f0:	88ba      	ldrh	r2, [r7, #4]
100062f2:	88fb      	ldrh	r3, [r7, #6]
100062f4:	1ad3      	subs	r3, r2, r3
100062f6:	b29b      	uxth	r3, r3
100062f8:	3b01      	subs	r3, #1
100062fa:	b29a      	uxth	r2, r3
	    (uint16_t)(new_idx - old);
100062fc:	88b9      	ldrh	r1, [r7, #4]
100062fe:	887b      	ldrh	r3, [r7, #2]
10006300:	1acb      	subs	r3, r1, r3
10006302:	b29b      	uxth	r3, r3
	return (uint16_t)(new_idx - event_idx - 1) <
10006304:	429a      	cmp	r2, r3
10006306:	bf34      	ite	cc
10006308:	2301      	movcc	r3, #1
1000630a:	2300      	movcs	r3, #0
1000630c:	b2db      	uxtb	r3, r3
}
1000630e:	4618      	mov	r0, r3
10006310:	370c      	adds	r7, #12
10006312:	46bd      	mov	sp, r7
10006314:	f85d 7b04 	ldr.w	r7, [sp], #4
10006318:	4770      	bx	lr

1000631a <metal_io_virt>:
{
1000631a:	b480      	push	{r7}
1000631c:	b083      	sub	sp, #12
1000631e:	af00      	add	r7, sp, #0
10006320:	6078      	str	r0, [r7, #4]
10006322:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset < io->size
10006324:	687b      	ldr	r3, [r7, #4]
10006326:	681b      	ldr	r3, [r3, #0]
		: NULL);
10006328:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
1000632c:	d00a      	beq.n	10006344 <metal_io_virt+0x2a>
	return (io->virt != METAL_BAD_VA && offset < io->size
1000632e:	687b      	ldr	r3, [r7, #4]
10006330:	689b      	ldr	r3, [r3, #8]
10006332:	683a      	ldr	r2, [r7, #0]
10006334:	429a      	cmp	r2, r3
10006336:	d205      	bcs.n	10006344 <metal_io_virt+0x2a>
		? (void *)((uintptr_t)io->virt + offset)
10006338:	687b      	ldr	r3, [r7, #4]
1000633a:	681b      	ldr	r3, [r3, #0]
1000633c:	461a      	mov	r2, r3
1000633e:	683b      	ldr	r3, [r7, #0]
10006340:	4413      	add	r3, r2
		: NULL);
10006342:	e000      	b.n	10006346 <metal_io_virt+0x2c>
10006344:	2300      	movs	r3, #0
}
10006346:	4618      	mov	r0, r3
10006348:	370c      	adds	r7, #12
1000634a:	46bd      	mov	sp, r7
1000634c:	f85d 7b04 	ldr.w	r7, [sp], #4
10006350:	4770      	bx	lr

10006352 <metal_io_phys>:
{
10006352:	b580      	push	{r7, lr}
10006354:	b084      	sub	sp, #16
10006356:	af00      	add	r7, sp, #0
10006358:	6078      	str	r0, [r7, #4]
1000635a:	6039      	str	r1, [r7, #0]
	if (!io->ops.offset_to_phys) {
1000635c:	687b      	ldr	r3, [r7, #4]
1000635e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10006360:	2b00      	cmp	r3, #0
10006362:	d123      	bne.n	100063ac <metal_io_phys+0x5a>
		unsigned long page = (io->page_shift >=
10006364:	687b      	ldr	r3, [r7, #4]
10006366:	68db      	ldr	r3, [r3, #12]
				     0 : offset >> io->page_shift);
10006368:	2b1f      	cmp	r3, #31
1000636a:	d805      	bhi.n	10006378 <metal_io_phys+0x26>
1000636c:	687b      	ldr	r3, [r7, #4]
1000636e:	68db      	ldr	r3, [r3, #12]
10006370:	683a      	ldr	r2, [r7, #0]
10006372:	fa22 f303 	lsr.w	r3, r2, r3
10006376:	e000      	b.n	1000637a <metal_io_phys+0x28>
10006378:	2300      	movs	r3, #0
		unsigned long page = (io->page_shift >=
1000637a:	60fb      	str	r3, [r7, #12]
		return (io->physmap && offset < io->size
1000637c:	687b      	ldr	r3, [r7, #4]
1000637e:	685b      	ldr	r3, [r3, #4]
			: METAL_BAD_PHYS);
10006380:	2b00      	cmp	r3, #0
10006382:	d010      	beq.n	100063a6 <metal_io_phys+0x54>
		return (io->physmap && offset < io->size
10006384:	687b      	ldr	r3, [r7, #4]
10006386:	689b      	ldr	r3, [r3, #8]
10006388:	683a      	ldr	r2, [r7, #0]
1000638a:	429a      	cmp	r2, r3
1000638c:	d20b      	bcs.n	100063a6 <metal_io_phys+0x54>
			? io->physmap[page] + (offset & io->page_mask)
1000638e:	687b      	ldr	r3, [r7, #4]
10006390:	685a      	ldr	r2, [r3, #4]
10006392:	68fb      	ldr	r3, [r7, #12]
10006394:	009b      	lsls	r3, r3, #2
10006396:	4413      	add	r3, r2
10006398:	681a      	ldr	r2, [r3, #0]
1000639a:	687b      	ldr	r3, [r7, #4]
1000639c:	6919      	ldr	r1, [r3, #16]
1000639e:	683b      	ldr	r3, [r7, #0]
100063a0:	400b      	ands	r3, r1
			: METAL_BAD_PHYS);
100063a2:	4413      	add	r3, r2
100063a4:	e008      	b.n	100063b8 <metal_io_phys+0x66>
100063a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
100063aa:	e005      	b.n	100063b8 <metal_io_phys+0x66>
	return io->ops.offset_to_phys(io, offset);
100063ac:	687b      	ldr	r3, [r7, #4]
100063ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
100063b0:	6839      	ldr	r1, [r7, #0]
100063b2:	6878      	ldr	r0, [r7, #4]
100063b4:	4798      	blx	r3
100063b6:	4603      	mov	r3, r0
}
100063b8:	4618      	mov	r0, r3
100063ba:	3710      	adds	r7, #16
100063bc:	46bd      	mov	sp, r7
100063be:	bd80      	pop	{r7, pc}

100063c0 <metal_io_phys_to_offset>:
{
100063c0:	b580      	push	{r7, lr}
100063c2:	b084      	sub	sp, #16
100063c4:	af00      	add	r7, sp, #0
100063c6:	6078      	str	r0, [r7, #4]
100063c8:	6039      	str	r1, [r7, #0]
	if (!io->ops.phys_to_offset) {
100063ca:	687b      	ldr	r3, [r7, #4]
100063cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
100063ce:	2b00      	cmp	r3, #0
100063d0:	d127      	bne.n	10006422 <metal_io_phys_to_offset+0x62>
			(io->page_mask == (metal_phys_addr_t)(-1) ?
100063d2:	687b      	ldr	r3, [r7, #4]
100063d4:	691b      	ldr	r3, [r3, #16]
			phys - io->physmap[0] :  phys & io->page_mask);
100063d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
100063da:	d105      	bne.n	100063e8 <metal_io_phys_to_offset+0x28>
100063dc:	687b      	ldr	r3, [r7, #4]
100063de:	685b      	ldr	r3, [r3, #4]
100063e0:	681b      	ldr	r3, [r3, #0]
100063e2:	683a      	ldr	r2, [r7, #0]
100063e4:	1ad3      	subs	r3, r2, r3
100063e6:	e003      	b.n	100063f0 <metal_io_phys_to_offset+0x30>
100063e8:	687b      	ldr	r3, [r7, #4]
100063ea:	691a      	ldr	r2, [r3, #16]
100063ec:	683b      	ldr	r3, [r7, #0]
100063ee:	4013      	ands	r3, r2
		unsigned long offset =
100063f0:	60fb      	str	r3, [r7, #12]
			if (metal_io_phys(io, offset) == phys)
100063f2:	68f9      	ldr	r1, [r7, #12]
100063f4:	6878      	ldr	r0, [r7, #4]
100063f6:	f7ff ffac 	bl	10006352 <metal_io_phys>
100063fa:	4602      	mov	r2, r0
100063fc:	683b      	ldr	r3, [r7, #0]
100063fe:	4293      	cmp	r3, r2
10006400:	d101      	bne.n	10006406 <metal_io_phys_to_offset+0x46>
				return offset;
10006402:	68fb      	ldr	r3, [r7, #12]
10006404:	e013      	b.n	1000642e <metal_io_phys_to_offset+0x6e>
			offset += io->page_mask + 1;
10006406:	687b      	ldr	r3, [r7, #4]
10006408:	691a      	ldr	r2, [r3, #16]
1000640a:	68fb      	ldr	r3, [r7, #12]
1000640c:	4413      	add	r3, r2
1000640e:	3301      	adds	r3, #1
10006410:	60fb      	str	r3, [r7, #12]
		} while (offset < io->size);
10006412:	687b      	ldr	r3, [r7, #4]
10006414:	689b      	ldr	r3, [r3, #8]
10006416:	68fa      	ldr	r2, [r7, #12]
10006418:	429a      	cmp	r2, r3
1000641a:	d3ea      	bcc.n	100063f2 <metal_io_phys_to_offset+0x32>
		return METAL_BAD_OFFSET;
1000641c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
10006420:	e005      	b.n	1000642e <metal_io_phys_to_offset+0x6e>
	return (*io->ops.phys_to_offset)(io, phys);
10006422:	687b      	ldr	r3, [r7, #4]
10006424:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
10006426:	6839      	ldr	r1, [r7, #0]
10006428:	6878      	ldr	r0, [r7, #4]
1000642a:	4798      	blx	r3
1000642c:	4603      	mov	r3, r0
}
1000642e:	4618      	mov	r0, r3
10006430:	3710      	adds	r7, #16
10006432:	46bd      	mov	sp, r7
10006434:	bd80      	pop	{r7, pc}

10006436 <metal_io_phys_to_virt>:
{
10006436:	b580      	push	{r7, lr}
10006438:	b082      	sub	sp, #8
1000643a:	af00      	add	r7, sp, #0
1000643c:	6078      	str	r0, [r7, #4]
1000643e:	6039      	str	r1, [r7, #0]
	return metal_io_virt(io, metal_io_phys_to_offset(io, phys));
10006440:	6839      	ldr	r1, [r7, #0]
10006442:	6878      	ldr	r0, [r7, #4]
10006444:	f7ff ffbc 	bl	100063c0 <metal_io_phys_to_offset>
10006448:	4603      	mov	r3, r0
1000644a:	4619      	mov	r1, r3
1000644c:	6878      	ldr	r0, [r7, #4]
1000644e:	f7ff ff64 	bl	1000631a <metal_io_virt>
10006452:	4603      	mov	r3, r0
}
10006454:	4618      	mov	r0, r3
10006456:	3708      	adds	r7, #8
10006458:	46bd      	mov	sp, r7
1000645a:	bd80      	pop	{r7, pc}

1000645c <virtqueue_phys_to_virt>:
#endif /* VIRTIO_CACHED_VRINGS */

/* Default implementation of P2V based on libmetal */
static inline void *virtqueue_phys_to_virt(struct virtqueue *vq,
					   metal_phys_addr_t phys)
{
1000645c:	b580      	push	{r7, lr}
1000645e:	b084      	sub	sp, #16
10006460:	af00      	add	r7, sp, #0
10006462:	6078      	str	r0, [r7, #4]
10006464:	6039      	str	r1, [r7, #0]
	struct metal_io_region *io = vq->shm_io;
10006466:	687b      	ldr	r3, [r7, #4]
10006468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1000646a:	60fb      	str	r3, [r7, #12]

	return metal_io_phys_to_virt(io, phys);
1000646c:	6839      	ldr	r1, [r7, #0]
1000646e:	68f8      	ldr	r0, [r7, #12]
10006470:	f7ff ffe1 	bl	10006436 <metal_io_phys_to_virt>
10006474:	4603      	mov	r3, r0
}
10006476:	4618      	mov	r0, r3
10006478:	3710      	adds	r7, #16
1000647a:	46bd      	mov	sp, r7
1000647c:	bd80      	pop	{r7, pc}

1000647e <virtqueue_create>:
int virtqueue_create(struct virtio_device *virt_dev, unsigned short id,
		     const char *name, struct vring_alloc_info *ring,
		     void (*callback)(struct virtqueue *vq),
		     void (*notify)(struct virtqueue *vq),
		     struct virtqueue *vq)
{
1000647e:	b580      	push	{r7, lr}
10006480:	b086      	sub	sp, #24
10006482:	af00      	add	r7, sp, #0
10006484:	60f8      	str	r0, [r7, #12]
10006486:	607a      	str	r2, [r7, #4]
10006488:	603b      	str	r3, [r7, #0]
1000648a:	460b      	mov	r3, r1
1000648c:	817b      	strh	r3, [r7, #10]
	int status = VQUEUE_SUCCESS;
1000648e:	2300      	movs	r3, #0
10006490:	617b      	str	r3, [r7, #20]
	VQ_PARAM_CHK(ring->num_descs == 0, status, ERROR_VQUEUE_INVLD_PARAM);
	VQ_PARAM_CHK(ring->num_descs & (ring->num_descs - 1), status,
		     ERROR_VRING_ALIGN);
	VQ_PARAM_CHK(vq == NULL, status, ERROR_NO_MEM);

	if (status == VQUEUE_SUCCESS) {
10006492:	697b      	ldr	r3, [r7, #20]
10006494:	2b00      	cmp	r3, #0
10006496:	d11e      	bne.n	100064d6 <virtqueue_create+0x58>
		vq->vq_dev = virt_dev;
10006498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1000649a:	68fa      	ldr	r2, [r7, #12]
1000649c:	601a      	str	r2, [r3, #0]
		vq->vq_name = name;
1000649e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
100064a0:	687a      	ldr	r2, [r7, #4]
100064a2:	605a      	str	r2, [r3, #4]
		vq->vq_queue_index = id;
100064a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
100064a6:	897a      	ldrh	r2, [r7, #10]
100064a8:	811a      	strh	r2, [r3, #8]
		vq->vq_nentries = ring->num_descs;
100064aa:	683b      	ldr	r3, [r7, #0]
100064ac:	891a      	ldrh	r2, [r3, #8]
100064ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
100064b0:	815a      	strh	r2, [r3, #10]
		vq->vq_free_cnt = vq->vq_nentries;
100064b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
100064b4:	895a      	ldrh	r2, [r3, #10]
100064b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
100064b8:	849a      	strh	r2, [r3, #36]	@ 0x24
		vq->callback = callback;
100064ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
100064bc:	6a3a      	ldr	r2, [r7, #32]
100064be:	60da      	str	r2, [r3, #12]
		vq->notify = notify;
100064c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
100064c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
100064c4:	611a      	str	r2, [r3, #16]

		/* Initialize vring control block in virtqueue. */
		vq_ring_init(vq, ring->vaddr, ring->align);
100064c6:	683b      	ldr	r3, [r7, #0]
100064c8:	6819      	ldr	r1, [r3, #0]
100064ca:	683b      	ldr	r3, [r7, #0]
100064cc:	685b      	ldr	r3, [r3, #4]
100064ce:	461a      	mov	r2, r3
100064d0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
100064d2:	f000 f8ef 	bl	100066b4 <vq_ring_init>
	/*
	 * CACHE: nothing to be done here. Only desc.next is setup at this
	 * stage but that is only written by master, so no need to flush it.
	 */

	return status;
100064d6:	697b      	ldr	r3, [r7, #20]
}
100064d8:	4618      	mov	r0, r3
100064da:	3718      	adds	r7, #24
100064dc:	46bd      	mov	sp, r7
100064de:	bd80      	pop	{r7, pc}

100064e0 <virtqueue_get_buffer_length>:

	return cookie;
}

uint32_t virtqueue_get_buffer_length(struct virtqueue *vq, uint16_t idx)
{
100064e0:	b480      	push	{r7}
100064e2:	b083      	sub	sp, #12
100064e4:	af00      	add	r7, sp, #0
100064e6:	6078      	str	r0, [r7, #4]
100064e8:	460b      	mov	r3, r1
100064ea:	807b      	strh	r3, [r7, #2]
	VRING_INVALIDATE(vq->vq_ring.desc[idx].len);
	return vq->vq_ring.desc[idx].len;
100064ec:	687b      	ldr	r3, [r7, #4]
100064ee:	699a      	ldr	r2, [r3, #24]
100064f0:	887b      	ldrh	r3, [r7, #2]
100064f2:	011b      	lsls	r3, r3, #4
100064f4:	4413      	add	r3, r2
100064f6:	689b      	ldr	r3, [r3, #8]
}
100064f8:	4618      	mov	r0, r3
100064fa:	370c      	adds	r7, #12
100064fc:	46bd      	mov	sp, r7
100064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
10006502:	4770      	bx	lr

10006504 <virtqueue_get_available_buffer>:
 *
 * @return                          - Pointer to available buffer
 */
void *virtqueue_get_available_buffer(struct virtqueue *vq, uint16_t *avail_idx,
				     uint32_t *len)
{
10006504:	b580      	push	{r7, lr}
10006506:	b086      	sub	sp, #24
10006508:	af00      	add	r7, sp, #0
1000650a:	60f8      	str	r0, [r7, #12]
1000650c:	60b9      	str	r1, [r7, #8]
1000650e:	607a      	str	r2, [r7, #4]
	uint16_t head_idx = 0;
10006510:	2300      	movs	r3, #0
10006512:	82fb      	strh	r3, [r7, #22]
	void *buffer;

	atomic_thread_fence(memory_order_seq_cst);
10006514:	f3bf 8f5b 	dmb	ish

	/* Avail.idx is updated by master, invalidate it */
	VRING_INVALIDATE(vq->vq_ring.avail->idx);
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
10006518:	68fb      	ldr	r3, [r7, #12]
1000651a:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
1000651c:	68fb      	ldr	r3, [r7, #12]
1000651e:	69db      	ldr	r3, [r3, #28]
10006520:	885b      	ldrh	r3, [r3, #2]
10006522:	b29b      	uxth	r3, r3
10006524:	429a      	cmp	r2, r3
10006526:	d101      	bne.n	1000652c <virtqueue_get_available_buffer+0x28>
		return NULL;
10006528:	2300      	movs	r3, #0
1000652a:	e02f      	b.n	1000658c <virtqueue_get_available_buffer+0x88>
	VQUEUE_BUSY(vq);

	/* Avail.ring is updated by master, invalidate it */
	VRING_INVALIDATE(vq->vq_ring.avail->ring[head_idx]);

	head_idx = vq->vq_available_idx++ & (vq->vq_nentries - 1);
1000652c:	68fb      	ldr	r3, [r7, #12]
1000652e:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
10006530:	1c5a      	adds	r2, r3, #1
10006532:	b291      	uxth	r1, r2
10006534:	68fa      	ldr	r2, [r7, #12]
10006536:	8611      	strh	r1, [r2, #48]	@ 0x30
10006538:	b21a      	sxth	r2, r3
1000653a:	68fb      	ldr	r3, [r7, #12]
1000653c:	895b      	ldrh	r3, [r3, #10]
1000653e:	3b01      	subs	r3, #1
10006540:	b29b      	uxth	r3, r3
10006542:	b21b      	sxth	r3, r3
10006544:	4013      	ands	r3, r2
10006546:	b21b      	sxth	r3, r3
10006548:	82fb      	strh	r3, [r7, #22]
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
1000654a:	68fb      	ldr	r3, [r7, #12]
1000654c:	69da      	ldr	r2, [r3, #28]
1000654e:	8afb      	ldrh	r3, [r7, #22]
10006550:	005b      	lsls	r3, r3, #1
10006552:	4413      	add	r3, r2
10006554:	889b      	ldrh	r3, [r3, #4]
10006556:	b29a      	uxth	r2, r3
10006558:	68bb      	ldr	r3, [r7, #8]
1000655a:	801a      	strh	r2, [r3, #0]

	/* Invalidate the desc entry written by master before accessing it */
	VRING_INVALIDATE(vq->vq_ring.desc[*avail_idx]);
	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
1000655c:	68fb      	ldr	r3, [r7, #12]
1000655e:	699a      	ldr	r2, [r3, #24]
10006560:	68bb      	ldr	r3, [r7, #8]
10006562:	881b      	ldrh	r3, [r3, #0]
10006564:	011b      	lsls	r3, r3, #4
10006566:	18d1      	adds	r1, r2, r3
10006568:	680a      	ldr	r2, [r1, #0]
1000656a:	684b      	ldr	r3, [r1, #4]
1000656c:	4613      	mov	r3, r2
1000656e:	4619      	mov	r1, r3
10006570:	68f8      	ldr	r0, [r7, #12]
10006572:	f7ff ff73 	bl	1000645c <virtqueue_phys_to_virt>
10006576:	6138      	str	r0, [r7, #16]
	*len = vq->vq_ring.desc[*avail_idx].len;
10006578:	68fb      	ldr	r3, [r7, #12]
1000657a:	699a      	ldr	r2, [r3, #24]
1000657c:	68bb      	ldr	r3, [r7, #8]
1000657e:	881b      	ldrh	r3, [r3, #0]
10006580:	011b      	lsls	r3, r3, #4
10006582:	4413      	add	r3, r2
10006584:	689a      	ldr	r2, [r3, #8]
10006586:	687b      	ldr	r3, [r7, #4]
10006588:	601a      	str	r2, [r3, #0]

	VQUEUE_IDLE(vq);

	return buffer;
1000658a:	693b      	ldr	r3, [r7, #16]
}
1000658c:	4618      	mov	r0, r3
1000658e:	3718      	adds	r7, #24
10006590:	46bd      	mov	sp, r7
10006592:	bd80      	pop	{r7, pc}

10006594 <virtqueue_add_consumed_buffer>:
 *
 * @return                       - Function status
 */
int virtqueue_add_consumed_buffer(struct virtqueue *vq, uint16_t head_idx,
				  uint32_t len)
{
10006594:	b480      	push	{r7}
10006596:	b087      	sub	sp, #28
10006598:	af00      	add	r7, sp, #0
1000659a:	60f8      	str	r0, [r7, #12]
1000659c:	460b      	mov	r3, r1
1000659e:	607a      	str	r2, [r7, #4]
100065a0:	817b      	strh	r3, [r7, #10]
	struct vring_used_elem *used_desc = NULL;
100065a2:	2300      	movs	r3, #0
100065a4:	617b      	str	r3, [r7, #20]
	uint16_t used_idx;

	if (head_idx > vq->vq_nentries) {
100065a6:	68fb      	ldr	r3, [r7, #12]
100065a8:	895b      	ldrh	r3, [r3, #10]
100065aa:	897a      	ldrh	r2, [r7, #10]
100065ac:	429a      	cmp	r2, r3
100065ae:	d901      	bls.n	100065b4 <virtqueue_add_consumed_buffer+0x20>
		return ERROR_VRING_NO_BUFF;
100065b0:	4b18      	ldr	r3, [pc, #96]	@ (10006614 <virtqueue_add_consumed_buffer+0x80>)
100065b2:	e029      	b.n	10006608 <virtqueue_add_consumed_buffer+0x74>
	}

	VQUEUE_BUSY(vq);

	/* CACHE: used is never written by master, so it's safe to directly access it */
	used_idx = vq->vq_ring.used->idx & (vq->vq_nentries - 1);
100065b4:	68fb      	ldr	r3, [r7, #12]
100065b6:	6a1b      	ldr	r3, [r3, #32]
100065b8:	885b      	ldrh	r3, [r3, #2]
100065ba:	b29b      	uxth	r3, r3
100065bc:	b21a      	sxth	r2, r3
100065be:	68fb      	ldr	r3, [r7, #12]
100065c0:	895b      	ldrh	r3, [r3, #10]
100065c2:	3b01      	subs	r3, #1
100065c4:	b29b      	uxth	r3, r3
100065c6:	b21b      	sxth	r3, r3
100065c8:	4013      	ands	r3, r2
100065ca:	b21b      	sxth	r3, r3
100065cc:	827b      	strh	r3, [r7, #18]
	used_desc = &vq->vq_ring.used->ring[used_idx];
100065ce:	68fb      	ldr	r3, [r7, #12]
100065d0:	6a1a      	ldr	r2, [r3, #32]
100065d2:	8a7b      	ldrh	r3, [r7, #18]
100065d4:	00db      	lsls	r3, r3, #3
100065d6:	4413      	add	r3, r2
100065d8:	3304      	adds	r3, #4
100065da:	617b      	str	r3, [r7, #20]
	used_desc->id = head_idx;
100065dc:	897a      	ldrh	r2, [r7, #10]
100065de:	697b      	ldr	r3, [r7, #20]
100065e0:	601a      	str	r2, [r3, #0]
	used_desc->len = len;
100065e2:	697b      	ldr	r3, [r7, #20]
100065e4:	687a      	ldr	r2, [r7, #4]
100065e6:	605a      	str	r2, [r3, #4]

	/* We still need to flush it because this is read by master */
	VRING_FLUSH(vq->vq_ring.used->ring[used_idx]);

	atomic_thread_fence(memory_order_seq_cst);
100065e8:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.used->idx++;
100065ec:	68fb      	ldr	r3, [r7, #12]
100065ee:	6a1b      	ldr	r3, [r3, #32]
100065f0:	885a      	ldrh	r2, [r3, #2]
100065f2:	b292      	uxth	r2, r2
100065f4:	3201      	adds	r2, #1
100065f6:	b292      	uxth	r2, r2
100065f8:	805a      	strh	r2, [r3, #2]

	/* Used.idx is read by master, so we need to flush it */
	VRING_FLUSH(vq->vq_ring.used->idx);

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
100065fa:	68fb      	ldr	r3, [r7, #12]
100065fc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
100065fe:	3301      	adds	r3, #1
10006600:	b29a      	uxth	r2, r3
10006602:	68fb      	ldr	r3, [r7, #12]
10006604:	84da      	strh	r2, [r3, #38]	@ 0x26

	VQUEUE_IDLE(vq);

	return VQUEUE_SUCCESS;
10006606:	2300      	movs	r3, #0
}
10006608:	4618      	mov	r0, r3
1000660a:	371c      	adds	r7, #28
1000660c:	46bd      	mov	sp, r7
1000660e:	f85d 7b04 	ldr.w	r7, [sp], #4
10006612:	4770      	bx	lr
10006614:	fffff441 	.word	0xfffff441

10006618 <virtqueue_disable_cb>:
 *
 * @param vq           - Pointer to VirtIO queue control block
 *
 */
void virtqueue_disable_cb(struct virtqueue *vq)
{
10006618:	b480      	push	{r7}
1000661a:	b083      	sub	sp, #12
1000661c:	af00      	add	r7, sp, #0
1000661e:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
10006620:	6879      	ldr	r1, [r7, #4]
10006622:	6809      	ldr	r1, [r1, #0]
10006624:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
10006628:	f000 5200 	and.w	r2, r0, #536870912	@ 0x20000000
1000662c:	2300      	movs	r3, #0
1000662e:	4313      	orrs	r3, r2
10006630:	d015      	beq.n	1000665e <virtqueue_disable_cb+0x46>
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
			VRING_FLUSH(vring_used_event(&vq->vq_ring));
		}
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
10006632:	687b      	ldr	r3, [r7, #4]
10006634:	681b      	ldr	r3, [r3, #0]
10006636:	699b      	ldr	r3, [r3, #24]
10006638:	2b01      	cmp	r3, #1
1000663a:	d11f      	bne.n	1000667c <virtqueue_disable_cb+0x64>
			vring_avail_event(&vq->vq_ring) =
			    vq->vq_available_idx - vq->vq_nentries - 1;
1000663c:	687b      	ldr	r3, [r7, #4]
1000663e:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
10006640:	687b      	ldr	r3, [r7, #4]
10006642:	895b      	ldrh	r3, [r3, #10]
10006644:	1ad3      	subs	r3, r2, r3
10006646:	b299      	uxth	r1, r3
			vring_avail_event(&vq->vq_ring) =
10006648:	687b      	ldr	r3, [r7, #4]
1000664a:	6a1a      	ldr	r2, [r3, #32]
1000664c:	687b      	ldr	r3, [r7, #4]
1000664e:	695b      	ldr	r3, [r3, #20]
			    vq->vq_available_idx - vq->vq_nentries - 1;
10006650:	3901      	subs	r1, #1
10006652:	b289      	uxth	r1, r1
			vring_avail_event(&vq->vq_ring) =
10006654:	00db      	lsls	r3, r3, #3
10006656:	4413      	add	r3, r2
10006658:	460a      	mov	r2, r1
1000665a:	809a      	strh	r2, [r3, #4]
		}
#endif /*VIRTIO_MASTER_ONLY*/
	}

	VQUEUE_IDLE(vq);
}
1000665c:	e00e      	b.n	1000667c <virtqueue_disable_cb+0x64>
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
1000665e:	687b      	ldr	r3, [r7, #4]
10006660:	681b      	ldr	r3, [r3, #0]
10006662:	699b      	ldr	r3, [r3, #24]
10006664:	2b01      	cmp	r3, #1
10006666:	d109      	bne.n	1000667c <virtqueue_disable_cb+0x64>
			vq->vq_ring.used->flags |= VRING_USED_F_NO_NOTIFY;
10006668:	687b      	ldr	r3, [r7, #4]
1000666a:	6a1b      	ldr	r3, [r3, #32]
1000666c:	881b      	ldrh	r3, [r3, #0]
1000666e:	b29a      	uxth	r2, r3
10006670:	687b      	ldr	r3, [r7, #4]
10006672:	6a1b      	ldr	r3, [r3, #32]
10006674:	f042 0201 	orr.w	r2, r2, #1
10006678:	b292      	uxth	r2, r2
1000667a:	801a      	strh	r2, [r3, #0]
}
1000667c:	bf00      	nop
1000667e:	370c      	adds	r7, #12
10006680:	46bd      	mov	sp, r7
10006682:	f85d 7b04 	ldr.w	r7, [sp], #4
10006686:	4770      	bx	lr

10006688 <virtqueue_kick>:
 * virtqueue_kick - Notifies other side that there is buffer available for it.
 *
 * @param vq      - Pointer to VirtIO queue control block
 */
void virtqueue_kick(struct virtqueue *vq)
{
10006688:	b580      	push	{r7, lr}
1000668a:	b082      	sub	sp, #8
1000668c:	af00      	add	r7, sp, #0
1000668e:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	/* Ensure updated avail->idx is visible to host. */
	atomic_thread_fence(memory_order_seq_cst);
10006690:	f3bf 8f5b 	dmb	ish

	if (vq_ring_must_notify(vq))
10006694:	6878      	ldr	r0, [r7, #4]
10006696:	f000 f823 	bl	100066e0 <vq_ring_must_notify>
1000669a:	4603      	mov	r3, r0
1000669c:	2b00      	cmp	r3, #0
1000669e:	d002      	beq.n	100066a6 <virtqueue_kick+0x1e>
		vq_ring_notify(vq);
100066a0:	6878      	ldr	r0, [r7, #4]
100066a2:	f000 f86b 	bl	1000677c <vq_ring_notify>

	vq->vq_queued_cnt = 0;
100066a6:	687b      	ldr	r3, [r7, #4]
100066a8:	2200      	movs	r2, #0
100066aa:	84da      	strh	r2, [r3, #38]	@ 0x26

	VQUEUE_IDLE(vq);
}
100066ac:	bf00      	nop
100066ae:	3708      	adds	r7, #8
100066b0:	46bd      	mov	sp, r7
100066b2:	bd80      	pop	{r7, pc}

100066b4 <vq_ring_init>:
 *
 * vq_ring_init
 *
 */
static void vq_ring_init(struct virtqueue *vq, void *ring_mem, int alignment)
{
100066b4:	b580      	push	{r7, lr}
100066b6:	b086      	sub	sp, #24
100066b8:	af00      	add	r7, sp, #0
100066ba:	60f8      	str	r0, [r7, #12]
100066bc:	60b9      	str	r1, [r7, #8]
100066be:	607a      	str	r2, [r7, #4]
	struct vring *vr;
	int size;

	size = vq->vq_nentries;
100066c0:	68fb      	ldr	r3, [r7, #12]
100066c2:	895b      	ldrh	r3, [r3, #10]
100066c4:	617b      	str	r3, [r7, #20]
	vr = &vq->vq_ring;
100066c6:	68fb      	ldr	r3, [r7, #12]
100066c8:	3314      	adds	r3, #20
100066ca:	613b      	str	r3, [r7, #16]

	vring_init(vr, size, ring_mem, alignment);
100066cc:	6979      	ldr	r1, [r7, #20]
100066ce:	687b      	ldr	r3, [r7, #4]
100066d0:	68ba      	ldr	r2, [r7, #8]
100066d2:	6938      	ldr	r0, [r7, #16]
100066d4:	f7ff fdda 	bl	1000628c <vring_init>
		for (i = 0; i < size - 1; i++)
			vr->desc[i].next = i + 1;
		vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
	}
#endif /*VIRTIO_SLAVE_ONLY*/
}
100066d8:	bf00      	nop
100066da:	3718      	adds	r7, #24
100066dc:	46bd      	mov	sp, r7
100066de:	bd80      	pop	{r7, pc}

100066e0 <vq_ring_must_notify>:
 *
 * vq_ring_must_notify
 *
 */
static int vq_ring_must_notify(struct virtqueue *vq)
{
100066e0:	b580      	push	{r7, lr}
100066e2:	b084      	sub	sp, #16
100066e4:	af00      	add	r7, sp, #0
100066e6:	6078      	str	r0, [r7, #4]
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
100066e8:	6879      	ldr	r1, [r7, #4]
100066ea:	6809      	ldr	r1, [r1, #0]
100066ec:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
100066f0:	f000 5200 	and.w	r2, r0, #536870912	@ 0x20000000
100066f4:	2300      	movs	r3, #0
100066f6:	4313      	orrs	r3, r2
100066f8:	d02a      	beq.n	10006750 <vq_ring_must_notify+0x70>
			return vring_need_event(event_idx, new_idx,
						prev_idx) != 0;
		}
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
100066fa:	687b      	ldr	r3, [r7, #4]
100066fc:	681b      	ldr	r3, [r3, #0]
100066fe:	699b      	ldr	r3, [r3, #24]
10006700:	2b01      	cmp	r3, #1
10006702:	d136      	bne.n	10006772 <vq_ring_must_notify+0x92>
			/* CACHE: no need to invalidate used */
			new_idx = vq->vq_ring.used->idx;
10006704:	687b      	ldr	r3, [r7, #4]
10006706:	6a1b      	ldr	r3, [r3, #32]
10006708:	789a      	ldrb	r2, [r3, #2]
1000670a:	78db      	ldrb	r3, [r3, #3]
1000670c:	021b      	lsls	r3, r3, #8
1000670e:	4313      	orrs	r3, r2
10006710:	81fb      	strh	r3, [r7, #14]
			prev_idx = new_idx - vq->vq_queued_cnt;
10006712:	687b      	ldr	r3, [r7, #4]
10006714:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
10006716:	89fa      	ldrh	r2, [r7, #14]
10006718:	1ad3      	subs	r3, r2, r3
1000671a:	81bb      	strh	r3, [r7, #12]
			VRING_INVALIDATE(vring_used_event(&vq->vq_ring));
			event_idx = vring_used_event(&vq->vq_ring);
1000671c:	687b      	ldr	r3, [r7, #4]
1000671e:	69da      	ldr	r2, [r3, #28]
10006720:	687b      	ldr	r3, [r7, #4]
10006722:	6959      	ldr	r1, [r3, #20]
10006724:	004b      	lsls	r3, r1, #1
10006726:	4413      	add	r3, r2
10006728:	7918      	ldrb	r0, [r3, #4]
1000672a:	004b      	lsls	r3, r1, #1
1000672c:	4413      	add	r3, r2
1000672e:	795b      	ldrb	r3, [r3, #5]
10006730:	021b      	lsls	r3, r3, #8
10006732:	4303      	orrs	r3, r0
10006734:	817b      	strh	r3, [r7, #10]
			return vring_need_event(event_idx, new_idx,
10006736:	89ba      	ldrh	r2, [r7, #12]
10006738:	89f9      	ldrh	r1, [r7, #14]
1000673a:	897b      	ldrh	r3, [r7, #10]
1000673c:	4618      	mov	r0, r3
1000673e:	f7ff fdce 	bl	100062de <vring_need_event>
10006742:	4603      	mov	r3, r0
						prev_idx) != 0;
10006744:	2b00      	cmp	r3, #0
10006746:	bf14      	ite	ne
10006748:	2301      	movne	r3, #1
1000674a:	2300      	moveq	r3, #0
1000674c:	b2db      	uxtb	r3, r3
1000674e:	e011      	b.n	10006774 <vq_ring_must_notify+0x94>
			return (vq->vq_ring.used->flags &
				VRING_USED_F_NO_NOTIFY) == 0;
		}
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
10006750:	687b      	ldr	r3, [r7, #4]
10006752:	681b      	ldr	r3, [r3, #0]
10006754:	699b      	ldr	r3, [r3, #24]
10006756:	2b01      	cmp	r3, #1
10006758:	d10b      	bne.n	10006772 <vq_ring_must_notify+0x92>
			VRING_INVALIDATE(vq->vq_ring.avail->flags);
			return (vq->vq_ring.avail->flags &
1000675a:	687b      	ldr	r3, [r7, #4]
1000675c:	69db      	ldr	r3, [r3, #28]
1000675e:	881b      	ldrh	r3, [r3, #0]
10006760:	b29b      	uxth	r3, r3
10006762:	f003 0301 	and.w	r3, r3, #1
				VRING_AVAIL_F_NO_INTERRUPT) == 0;
10006766:	2b00      	cmp	r3, #0
10006768:	bf0c      	ite	eq
1000676a:	2301      	moveq	r3, #1
1000676c:	2300      	movne	r3, #0
1000676e:	b2db      	uxtb	r3, r3
10006770:	e000      	b.n	10006774 <vq_ring_must_notify+0x94>
		}
#endif /*VIRTIO_MASTER_ONLY*/
	}

	return 0;
10006772:	2300      	movs	r3, #0
}
10006774:	4618      	mov	r0, r3
10006776:	3710      	adds	r7, #16
10006778:	46bd      	mov	sp, r7
1000677a:	bd80      	pop	{r7, pc}

1000677c <vq_ring_notify>:
 *
 * vq_ring_notify
 *
 */
static void vq_ring_notify(struct virtqueue *vq)
{
1000677c:	b580      	push	{r7, lr}
1000677e:	b082      	sub	sp, #8
10006780:	af00      	add	r7, sp, #0
10006782:	6078      	str	r0, [r7, #4]
	if (vq->notify)
10006784:	687b      	ldr	r3, [r7, #4]
10006786:	691b      	ldr	r3, [r3, #16]
10006788:	2b00      	cmp	r3, #0
1000678a:	d003      	beq.n	10006794 <vq_ring_notify+0x18>
		vq->notify(vq);
1000678c:	687b      	ldr	r3, [r7, #4]
1000678e:	691b      	ldr	r3, [r3, #16]
10006790:	6878      	ldr	r0, [r7, #4]
10006792:	4798      	blx	r3
}
10006794:	bf00      	nop
10006796:	3708      	adds	r7, #8
10006798:	46bd      	mov	sp, r7
1000679a:	bd80      	pop	{r7, pc}

1000679c <MAILBOX_Init>:
  * @brief  Initialize MAILBOX with IPCC peripheral
  * @param  None
  * @retval : Operation result
  */
int MAILBOX_Init(void)
{
1000679c:	b580      	push	{r7, lr}
1000679e:	af00      	add	r7, sp, #0

   /* USER CODE BEGIN PRE_MAILBOX_INIT */

   /* USER CODE END  PRE_MAILBOX_INIT */

  if (HAL_IPCC_ActivateNotification(&hipcc, IPCC_CHANNEL_1, IPCC_CHANNEL_DIR_RX,
100067a0:	4b0d      	ldr	r3, [pc, #52]	@ (100067d8 <MAILBOX_Init+0x3c>)
100067a2:	2201      	movs	r2, #1
100067a4:	2100      	movs	r1, #0
100067a6:	480d      	ldr	r0, [pc, #52]	@ (100067dc <MAILBOX_Init+0x40>)
100067a8:	f7fa f9f4 	bl	10000b94 <HAL_IPCC_ActivateNotification>
100067ac:	4603      	mov	r3, r0
100067ae:	2b00      	cmp	r3, #0
100067b0:	d002      	beq.n	100067b8 <MAILBOX_Init+0x1c>
          IPCC_channel1_callback) != HAL_OK) {
	  OPENAMP_log_err("%s: ch_1 RX fail\n", __func__);
    return -1;
100067b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
100067b6:	e00c      	b.n	100067d2 <MAILBOX_Init+0x36>
  }

  if (HAL_IPCC_ActivateNotification(&hipcc, IPCC_CHANNEL_2, IPCC_CHANNEL_DIR_RX,
100067b8:	4b09      	ldr	r3, [pc, #36]	@ (100067e0 <MAILBOX_Init+0x44>)
100067ba:	2201      	movs	r2, #1
100067bc:	2101      	movs	r1, #1
100067be:	4807      	ldr	r0, [pc, #28]	@ (100067dc <MAILBOX_Init+0x40>)
100067c0:	f7fa f9e8 	bl	10000b94 <HAL_IPCC_ActivateNotification>
100067c4:	4603      	mov	r3, r0
100067c6:	2b00      	cmp	r3, #0
100067c8:	d002      	beq.n	100067d0 <MAILBOX_Init+0x34>
          IPCC_channel2_callback) != HAL_OK) {
	  OPENAMP_log_err("%s: ch_2 RX fail\n", __func__);
    return -1;
100067ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
100067ce:	e000      	b.n	100067d2 <MAILBOX_Init+0x36>
  }

  /* USER CODE BEGIN POST_MAILBOX_INIT */

  /* USER CODE END  POST_MAILBOX_INIT */
  return 0;
100067d0:	2300      	movs	r3, #0
}
100067d2:	4618      	mov	r0, r3
100067d4:	bd80      	pop	{r7, pc}
100067d6:	bf00      	nop
100067d8:	10006849 	.word	0x10006849
100067dc:	100201c8 	.word	0x100201c8
100067e0:	10006875 	.word	0x10006875

100067e4 <MAILBOX_Notify>:
  * @brief  Callback function called by OpenAMP MW to notify message processing
  * @param  VRING id
  * @retval Operation result
  */
int MAILBOX_Notify(void *priv, uint32_t id)
{
100067e4:	b580      	push	{r7, lr}
100067e6:	b084      	sub	sp, #16
100067e8:	af00      	add	r7, sp, #0
100067ea:	6078      	str	r0, [r7, #4]
100067ec:	6039      	str	r1, [r7, #0]
   /* USER CODE BEGIN PRE_MAILBOX_NOTIFY */

   /* USER CODE END  PRE_MAILBOX_NOTIFY */

  /* Called after virtqueue processing: time to inform the remote */
  if (id == VRING0_ID) {
100067ee:	683b      	ldr	r3, [r7, #0]
100067f0:	2b00      	cmp	r3, #0
100067f2:	d102      	bne.n	100067fa <MAILBOX_Notify+0x16>
    channel = IPCC_CHANNEL_1;
100067f4:	2300      	movs	r3, #0
100067f6:	60fb      	str	r3, [r7, #12]
100067f8:	e008      	b.n	1000680c <MAILBOX_Notify+0x28>
    OPENAMP_log_dbg("Send msg on ch_1\r\n");
  }
  else if (id == VRING1_ID) {
100067fa:	683b      	ldr	r3, [r7, #0]
100067fc:	2b01      	cmp	r3, #1
100067fe:	d102      	bne.n	10006806 <MAILBOX_Notify+0x22>
    /* Note: the OpenAMP framework never notifies this */
    channel = IPCC_CHANNEL_2;
10006800:	2301      	movs	r3, #1
10006802:	60fb      	str	r3, [r7, #12]
10006804:	e002      	b.n	1000680c <MAILBOX_Notify+0x28>
    OPENAMP_log_dbg("Send 'buff free' on ch_2\r\n");
  }
  else {
    OPENAMP_log_err("invalid vring (%d)\r\n", (int)id);
    return -1;
10006806:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
1000680a:	e016      	b.n	1000683a <MAILBOX_Notify+0x56>
  }

  /* Check that the channel is free (otherwise wait until it is) */
  if (HAL_IPCC_GetChannelStatus(&hipcc, channel, IPCC_CHANNEL_DIR_TX) == IPCC_CHANNEL_STATUS_OCCUPIED) {
1000680c:	2200      	movs	r2, #0
1000680e:	68f9      	ldr	r1, [r7, #12]
10006810:	480c      	ldr	r0, [pc, #48]	@ (10006844 <MAILBOX_Notify+0x60>)
10006812:	f7fa fa0d 	bl	10000c30 <HAL_IPCC_GetChannelStatus>
10006816:	4603      	mov	r3, r0
10006818:	2b01      	cmp	r3, #1
1000681a:	d108      	bne.n	1000682e <MAILBOX_Notify+0x4a>
    OPENAMP_log_dbg("Waiting for channel to be freed\r\n");
    while (HAL_IPCC_GetChannelStatus(&hipcc, channel, IPCC_CHANNEL_DIR_TX) == IPCC_CHANNEL_STATUS_OCCUPIED)
1000681c:	bf00      	nop
1000681e:	2200      	movs	r2, #0
10006820:	68f9      	ldr	r1, [r7, #12]
10006822:	4808      	ldr	r0, [pc, #32]	@ (10006844 <MAILBOX_Notify+0x60>)
10006824:	f7fa fa04 	bl	10000c30 <HAL_IPCC_GetChannelStatus>
10006828:	4603      	mov	r3, r0
1000682a:	2b01      	cmp	r3, #1
1000682c:	d0f7      	beq.n	1000681e <MAILBOX_Notify+0x3a>
      ;
  }

  /* Inform A7 (either new message, or buf free) */
  HAL_IPCC_NotifyCPU(&hipcc, channel, IPCC_CHANNEL_DIR_TX);
1000682e:	2200      	movs	r2, #0
10006830:	68f9      	ldr	r1, [r7, #12]
10006832:	4804      	ldr	r0, [pc, #16]	@ (10006844 <MAILBOX_Notify+0x60>)
10006834:	f7fa fa30 	bl	10000c98 <HAL_IPCC_NotifyCPU>

 /* USER CODE BEGIN POST_MAILBOX_NOTIFY */

 /* USER CODE END  POST_MAILBOX_NOTIFY */

  return 0;
10006838:	2300      	movs	r3, #0
}
1000683a:	4618      	mov	r0, r3
1000683c:	3710      	adds	r7, #16
1000683e:	46bd      	mov	sp, r7
10006840:	bd80      	pop	{r7, pc}
10006842:	bf00      	nop
10006844:	100201c8 	.word	0x100201c8

10006848 <IPCC_channel1_callback>:

/* USER CODE END 0 */
/* Callback from IPCC Interrupt Handler: Master Processor informs that there are some free buffers */
void IPCC_channel1_callback(IPCC_HandleTypeDef * hipcc,
         uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
10006848:	b580      	push	{r7, lr}
1000684a:	b084      	sub	sp, #16
1000684c:	af00      	add	r7, sp, #0
1000684e:	60f8      	str	r0, [r7, #12]
10006850:	60b9      	str	r1, [r7, #8]
10006852:	4613      	mov	r3, r2
10006854:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END  PRE_MAILBOX_CHANNEL1_CALLBACK */

  if (msg_received_ch1 != MBOX_NO_MSG)
    OPENAMP_log_dbg("IPCC_channel1_callback: previous IRQ not treated (status = %d)\r\n", msg_received_ch1);

  msg_received_ch1 = MBOX_BUF_FREE;
10006856:	4b06      	ldr	r3, [pc, #24]	@ (10006870 <IPCC_channel1_callback+0x28>)
10006858:	2202      	movs	r2, #2
1000685a:	601a      	str	r2, [r3, #0]

  /* Inform A7 that we have received the 'buff free' msg */
  OPENAMP_log_dbg("Ack 'buff free' message on ch1\r\n");
  HAL_IPCC_NotifyCPU(hipcc, ChannelIndex, IPCC_CHANNEL_DIR_RX);
1000685c:	2201      	movs	r2, #1
1000685e:	68b9      	ldr	r1, [r7, #8]
10006860:	68f8      	ldr	r0, [r7, #12]
10006862:	f7fa fa19 	bl	10000c98 <HAL_IPCC_NotifyCPU>

  /* USER CODE BEGIN POST_MAILBOX_CHANNEL1_CALLBACK */

  /* USER CODE END  POST_MAILBOX_CHANNEL1_CALLBACK */
}
10006866:	bf00      	nop
10006868:	3710      	adds	r7, #16
1000686a:	46bd      	mov	sp, r7
1000686c:	bd80      	pop	{r7, pc}
1000686e:	bf00      	nop
10006870:	1002022c 	.word	0x1002022c

10006874 <IPCC_channel2_callback>:

/* Callback from IPCC Interrupt Handler: new message received from Master Processor */
void IPCC_channel2_callback(IPCC_HandleTypeDef * hipcc,
         uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
10006874:	b580      	push	{r7, lr}
10006876:	b084      	sub	sp, #16
10006878:	af00      	add	r7, sp, #0
1000687a:	60f8      	str	r0, [r7, #12]
1000687c:	60b9      	str	r1, [r7, #8]
1000687e:	4613      	mov	r3, r2
10006880:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END  PRE_MAILBOX_CHANNEL2_CALLBACK */

  if (msg_received_ch2 != MBOX_NO_MSG)
    OPENAMP_log_dbg("IPCC_channel2_callback: previous IRQ not treated (status = %d)\r\n", msg_received_ch2);

  msg_received_ch2 = MBOX_NEW_MSG;
10006882:	4b06      	ldr	r3, [pc, #24]	@ (1000689c <IPCC_channel2_callback+0x28>)
10006884:	2201      	movs	r2, #1
10006886:	601a      	str	r2, [r3, #0]

  /* Inform A7 that we have received the new msg */
  OPENAMP_log_dbg("Ack new message on ch2\r\n");
  HAL_IPCC_NotifyCPU(hipcc, ChannelIndex, IPCC_CHANNEL_DIR_RX);
10006888:	2201      	movs	r2, #1
1000688a:	68b9      	ldr	r1, [r7, #8]
1000688c:	68f8      	ldr	r0, [r7, #12]
1000688e:	f7fa fa03 	bl	10000c98 <HAL_IPCC_NotifyCPU>

  /* USER CODE BEGIN POST_MAILBOX_CHANNEL2_CALLBACK */

  /* USER CODE END  POST_MAILBOX_CHANNEL2_CALLBACK */
}
10006892:	bf00      	nop
10006894:	3710      	adds	r7, #16
10006896:	46bd      	mov	sp, r7
10006898:	bd80      	pop	{r7, pc}
1000689a:	bf00      	nop
1000689c:	10020230 	.word	0x10020230

100068a0 <metal_device_io_region>:
 * @param[in]	index		Region index.
 * @return I/O accessor handle, or NULL on failure.
 */
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned int index)
{
100068a0:	b480      	push	{r7}
100068a2:	b083      	sub	sp, #12
100068a4:	af00      	add	r7, sp, #0
100068a6:	6078      	str	r0, [r7, #4]
100068a8:	6039      	str	r1, [r7, #0]
	return (index < device->num_regions
100068aa:	687b      	ldr	r3, [r7, #4]
100068ac:	689b      	ldr	r3, [r3, #8]
		? &device->regions[index]
		: NULL);
100068ae:	683a      	ldr	r2, [r7, #0]
100068b0:	429a      	cmp	r2, r3
100068b2:	d209      	bcs.n	100068c8 <metal_device_io_region+0x28>
100068b4:	683a      	ldr	r2, [r7, #0]
100068b6:	4613      	mov	r3, r2
100068b8:	00db      	lsls	r3, r3, #3
100068ba:	1a9b      	subs	r3, r3, r2
100068bc:	00db      	lsls	r3, r3, #3
100068be:	3308      	adds	r3, #8
100068c0:	687a      	ldr	r2, [r7, #4]
100068c2:	4413      	add	r3, r2
100068c4:	3304      	adds	r3, #4
100068c6:	e000      	b.n	100068ca <metal_device_io_region+0x2a>
100068c8:	2300      	movs	r3, #0
}
100068ca:	4618      	mov	r0, r3
100068cc:	370c      	adds	r7, #12
100068ce:	46bd      	mov	sp, r7
100068d0:	f85d 7b04 	ldr.w	r7, [sp], #4
100068d4:	4770      	bx	lr
	...

100068d8 <OPENAMP_shmem_init>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

static int OPENAMP_shmem_init(int RPMsgRole)
{
100068d8:	b590      	push	{r4, r7, lr}
100068da:	b08d      	sub	sp, #52	@ 0x34
100068dc:	af04      	add	r7, sp, #16
100068de:	6078      	str	r0, [r7, #4]
  int status = 0;
100068e0:	2300      	movs	r3, #0
100068e2:	61fb      	str	r3, [r7, #28]
  struct metal_device *device = NULL;
100068e4:	2300      	movs	r3, #0
100068e6:	61bb      	str	r3, [r7, #24]
  struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
100068e8:	4a41      	ldr	r2, [pc, #260]	@ (100069f0 <OPENAMP_shmem_init+0x118>)
100068ea:	f107 0310 	add.w	r3, r7, #16
100068ee:	e892 0003 	ldmia.w	r2, {r0, r1}
100068f2:	e883 0003 	stmia.w	r3, {r0, r1}
  void* rsc_tab_addr = NULL;
100068f6:	2300      	movs	r3, #0
100068f8:	60fb      	str	r3, [r7, #12]
  int rsc_size = 0;
100068fa:	2300      	movs	r3, #0
100068fc:	60bb      	str	r3, [r7, #8]

  /* USER CODE BEGIN PRE_LIB_METAL_INIT */

  /* USER CODE END  PRE_LIB_METAL_INIT */
  metal_init(&metal_params);
100068fe:	f107 0310 	add.w	r3, r7, #16
10006902:	4618      	mov	r0, r3
10006904:	f7fe fa5c 	bl	10004dc0 <metal_init>

  status = metal_register_generic_device(&shm_device);
10006908:	483a      	ldr	r0, [pc, #232]	@ (100069f4 <OPENAMP_shmem_init+0x11c>)
1000690a:	f7fe f903 	bl	10004b14 <metal_register_generic_device>
1000690e:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
10006910:	69fb      	ldr	r3, [r7, #28]
10006912:	2b00      	cmp	r3, #0
10006914:	d001      	beq.n	1000691a <OPENAMP_shmem_init+0x42>
    return status;
10006916:	69fb      	ldr	r3, [r7, #28]
10006918:	e066      	b.n	100069e8 <OPENAMP_shmem_init+0x110>
  }

  status = metal_device_open("generic", SHM_DEVICE_NAME, &device);
1000691a:	f107 0318 	add.w	r3, r7, #24
1000691e:	461a      	mov	r2, r3
10006920:	4935      	ldr	r1, [pc, #212]	@ (100069f8 <OPENAMP_shmem_init+0x120>)
10006922:	4836      	ldr	r0, [pc, #216]	@ (100069fc <OPENAMP_shmem_init+0x124>)
10006924:	f7fe f8b8 	bl	10004a98 <metal_device_open>
10006928:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
1000692a:	69fb      	ldr	r3, [r7, #28]
1000692c:	2b00      	cmp	r3, #0
1000692e:	d001      	beq.n	10006934 <OPENAMP_shmem_init+0x5c>
    return status;
10006930:	69fb      	ldr	r3, [r7, #28]
10006932:	e059      	b.n	100069e8 <OPENAMP_shmem_init+0x110>
  }

  shm_physmap = SHM_START_ADDRESS;
10006934:	4a32      	ldr	r2, [pc, #200]	@ (10006a00 <OPENAMP_shmem_init+0x128>)
10006936:	4b33      	ldr	r3, [pc, #204]	@ (10006a04 <OPENAMP_shmem_init+0x12c>)
10006938:	601a      	str	r2, [r3, #0]
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
1000693a:	69bb      	ldr	r3, [r7, #24]
1000693c:	f103 000c 	add.w	r0, r3, #12
                SHM_SIZE, (unsigned int)-1, 0, NULL);
10006940:	4a31      	ldr	r2, [pc, #196]	@ (10006a08 <OPENAMP_shmem_init+0x130>)
10006942:	4b2f      	ldr	r3, [pc, #188]	@ (10006a00 <OPENAMP_shmem_init+0x128>)
10006944:	1ad3      	subs	r3, r2, r3
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
10006946:	461a      	mov	r2, r3
10006948:	2300      	movs	r3, #0
1000694a:	9302      	str	r3, [sp, #8]
1000694c:	2300      	movs	r3, #0
1000694e:	9301      	str	r3, [sp, #4]
10006950:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
10006954:	9300      	str	r3, [sp, #0]
10006956:	4613      	mov	r3, r2
10006958:	4a2a      	ldr	r2, [pc, #168]	@ (10006a04 <OPENAMP_shmem_init+0x12c>)
1000695a:	4929      	ldr	r1, [pc, #164]	@ (10006a00 <OPENAMP_shmem_init+0x128>)
1000695c:	f7fe fa7e 	bl	10004e5c <metal_io_init>

  /* USER CODE BEGIN PRE_SHM_IO_INIT */

  /* USER CODE END PRE_SHM_IO_INIT */
  shm_io = metal_device_io_region(device, 0);
10006960:	69bb      	ldr	r3, [r7, #24]
10006962:	2100      	movs	r1, #0
10006964:	4618      	mov	r0, r3
10006966:	f7ff ff9b 	bl	100068a0 <metal_device_io_region>
1000696a:	4603      	mov	r3, r0
1000696c:	4a27      	ldr	r2, [pc, #156]	@ (10006a0c <OPENAMP_shmem_init+0x134>)
1000696e:	6013      	str	r3, [r2, #0]
  if (shm_io == NULL) {
10006970:	4b26      	ldr	r3, [pc, #152]	@ (10006a0c <OPENAMP_shmem_init+0x134>)
10006972:	681b      	ldr	r3, [r3, #0]
10006974:	2b00      	cmp	r3, #0
10006976:	d102      	bne.n	1000697e <OPENAMP_shmem_init+0xa6>
    return -1;
10006978:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
1000697c:	e034      	b.n	100069e8 <OPENAMP_shmem_init+0x110>
  /* USER CODE BEGIN POST_SHM_IO_INIT */

  /* USER CODE END POST_SHM_IO_INIT */

  /* Initialize resources table variables */
  resource_table_init(RPMsgRole, &rsc_tab_addr, &rsc_size);
1000697e:	f107 0208 	add.w	r2, r7, #8
10006982:	f107 030c 	add.w	r3, r7, #12
10006986:	4619      	mov	r1, r3
10006988:	6878      	ldr	r0, [r7, #4]
1000698a:	f000 f8d9 	bl	10006b40 <resource_table_init>
  rsc_table = (struct shared_resource_table *)rsc_tab_addr;
1000698e:	68fb      	ldr	r3, [r7, #12]
10006990:	4a1f      	ldr	r2, [pc, #124]	@ (10006a10 <OPENAMP_shmem_init+0x138>)
10006992:	6013      	str	r3, [r2, #0]
  if (!rsc_table)
10006994:	4b1e      	ldr	r3, [pc, #120]	@ (10006a10 <OPENAMP_shmem_init+0x138>)
10006996:	681b      	ldr	r3, [r3, #0]
10006998:	2b00      	cmp	r3, #0
1000699a:	d102      	bne.n	100069a2 <OPENAMP_shmem_init+0xca>
  {
    return -1;
1000699c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
100069a0:	e022      	b.n	100069e8 <OPENAMP_shmem_init+0x110>

  /* USER CODE BEGIN POST_RSC_TABLE_INIT */

  /* USER CODE END  POST_RSC_TABLE_INIT */

  metal_io_init(&device->regions[1], rsc_table,
100069a2:	69bb      	ldr	r3, [r7, #24]
100069a4:	f103 0044 	add.w	r0, r3, #68	@ 0x44
100069a8:	4b19      	ldr	r3, [pc, #100]	@ (10006a10 <OPENAMP_shmem_init+0x138>)
100069aa:	6819      	ldr	r1, [r3, #0]
100069ac:	4b18      	ldr	r3, [pc, #96]	@ (10006a10 <OPENAMP_shmem_init+0x138>)
100069ae:	681a      	ldr	r2, [r3, #0]
100069b0:	68bb      	ldr	r3, [r7, #8]
100069b2:	461c      	mov	r4, r3
100069b4:	2300      	movs	r3, #0
100069b6:	9302      	str	r3, [sp, #8]
100069b8:	2300      	movs	r3, #0
100069ba:	9301      	str	r3, [sp, #4]
100069bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
100069c0:	9300      	str	r3, [sp, #0]
100069c2:	4623      	mov	r3, r4
100069c4:	f7fe fa4a 	bl	10004e5c <metal_io_init>
               (metal_phys_addr_t *)rsc_table, rsc_size, -1U, 0, NULL);

  /* USER CODE BEGIN POST_METAL_IO_INIT */

  /* USER CODE END  POST_METAL_IO_INIT */
  rsc_io = metal_device_io_region(device, 1);
100069c8:	69bb      	ldr	r3, [r7, #24]
100069ca:	2101      	movs	r1, #1
100069cc:	4618      	mov	r0, r3
100069ce:	f7ff ff67 	bl	100068a0 <metal_device_io_region>
100069d2:	4603      	mov	r3, r0
100069d4:	4a0f      	ldr	r2, [pc, #60]	@ (10006a14 <OPENAMP_shmem_init+0x13c>)
100069d6:	6013      	str	r3, [r2, #0]
  if (rsc_io == NULL) {
100069d8:	4b0e      	ldr	r3, [pc, #56]	@ (10006a14 <OPENAMP_shmem_init+0x13c>)
100069da:	681b      	ldr	r3, [r3, #0]
100069dc:	2b00      	cmp	r3, #0
100069de:	d102      	bne.n	100069e6 <OPENAMP_shmem_init+0x10e>
    return -1;
100069e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
100069e4:	e000      	b.n	100069e8 <OPENAMP_shmem_init+0x110>
  }

  /* USER CODE BEGIN POST_RSC_IO_INIT */

  /* USER CODE END  POST_RSC_IO_INIT */
  return 0;
100069e6:	2300      	movs	r3, #0
}
100069e8:	4618      	mov	r0, r3
100069ea:	3724      	adds	r7, #36	@ 0x24
100069ec:	46bd      	mov	sp, r7
100069ee:	bd90      	pop	{r4, r7, pc}
100069f0:	10007e28 	.word	0x10007e28
100069f4:	10020038 	.word	0x10020038
100069f8:	10007e14 	.word	0x10007e14
100069fc:	10007e20 	.word	0x10007e20
10006a00:	10040000 	.word	0x10040000
10006a04:	100202d8 	.word	0x100202d8
10006a08:	10050000 	.word	0x10050000
10006a0c:	10020234 	.word	0x10020234
10006a10:	1002023c 	.word	0x1002023c
10006a14:	10020238 	.word	0x10020238

10006a18 <MX_OPENAMP_Init>:

int MX_OPENAMP_Init(int RPMsgRole, rpmsg_ns_bind_cb ns_bind_cb)
{
10006a18:	b590      	push	{r4, r7, lr}
10006a1a:	b08b      	sub	sp, #44	@ 0x2c
10006a1c:	af04      	add	r7, sp, #16
10006a1e:	6078      	str	r0, [r7, #4]
10006a20:	6039      	str	r1, [r7, #0]
  struct fw_rsc_vdev_vring *vring_rsc = NULL;
10006a22:	2300      	movs	r3, #0
10006a24:	617b      	str	r3, [r7, #20]
  struct virtio_device *vdev = NULL;
10006a26:	2300      	movs	r3, #0
10006a28:	613b      	str	r3, [r7, #16]
  int status = 0;
10006a2a:	2300      	movs	r3, #0
10006a2c:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN MAILBOX_Init */

  /* USER CODE END MAIL_BOX_Init */

  MAILBOX_Init();
10006a2e:	f7ff feb5 	bl	1000679c <MAILBOX_Init>

  /* Libmetal Initilalization */
  status = OPENAMP_shmem_init(RPMsgRole);
10006a32:	6878      	ldr	r0, [r7, #4]
10006a34:	f7ff ff50 	bl	100068d8 <OPENAMP_shmem_init>
10006a38:	60f8      	str	r0, [r7, #12]
  if(status)
10006a3a:	68fb      	ldr	r3, [r7, #12]
10006a3c:	2b00      	cmp	r3, #0
10006a3e:	d001      	beq.n	10006a44 <MX_OPENAMP_Init+0x2c>
  {
    return status;
10006a40:	68fb      	ldr	r3, [r7, #12]
10006a42:	e068      	b.n	10006b16 <MX_OPENAMP_Init+0xfe>
  }

  /* USER CODE BEGIN  PRE_VIRTIO_INIT */

  /* USER CODE END PRE_VIRTIO_INIT */
  vdev = rproc_virtio_create_vdev(RPMsgRole, VDEV_ID, &rsc_table->vdev,
10006a44:	6878      	ldr	r0, [r7, #4]
10006a46:	4b36      	ldr	r3, [pc, #216]	@ (10006b20 <MX_OPENAMP_Init+0x108>)
10006a48:	681b      	ldr	r3, [r3, #0]
10006a4a:	f103 0218 	add.w	r2, r3, #24
10006a4e:	4b35      	ldr	r3, [pc, #212]	@ (10006b24 <MX_OPENAMP_Init+0x10c>)
10006a50:	681b      	ldr	r3, [r3, #0]
10006a52:	2100      	movs	r1, #0
10006a54:	9102      	str	r1, [sp, #8]
10006a56:	4934      	ldr	r1, [pc, #208]	@ (10006b28 <MX_OPENAMP_Init+0x110>)
10006a58:	9101      	str	r1, [sp, #4]
10006a5a:	2100      	movs	r1, #0
10006a5c:	9100      	str	r1, [sp, #0]
10006a5e:	21ff      	movs	r1, #255	@ 0xff
10006a60:	f7fe fcfa 	bl	10005458 <rproc_virtio_create_vdev>
10006a64:	6138      	str	r0, [r7, #16]
                                  rsc_io, NULL, MAILBOX_Notify, NULL);
  if (vdev == NULL)
10006a66:	693b      	ldr	r3, [r7, #16]
10006a68:	2b00      	cmp	r3, #0
10006a6a:	d102      	bne.n	10006a72 <MX_OPENAMP_Init+0x5a>
  {
    return -1;
10006a6c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
10006a70:	e051      	b.n	10006b16 <MX_OPENAMP_Init+0xfe>
  }

  rproc_virtio_wait_remote_ready(vdev);
10006a72:	6938      	ldr	r0, [r7, #16]
10006a74:	f7fe fdcf 	bl	10005616 <rproc_virtio_wait_remote_ready>

  /* USER CODE BEGIN  POST_VIRTIO_INIT */

  /* USER CODE END POST_VIRTIO_INIT */
  vring_rsc = &rsc_table->vring0;
10006a78:	4b29      	ldr	r3, [pc, #164]	@ (10006b20 <MX_OPENAMP_Init+0x108>)
10006a7a:	681b      	ldr	r3, [r3, #0]
10006a7c:	3334      	adds	r3, #52	@ 0x34
10006a7e:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
10006a80:	697b      	ldr	r3, [r7, #20]
10006a82:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
10006a84:	697b      	ldr	r3, [r7, #20]
10006a86:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
10006a88:	461c      	mov	r4, r3
10006a8a:	4b28      	ldr	r3, [pc, #160]	@ (10006b2c <MX_OPENAMP_Init+0x114>)
10006a8c:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
10006a8e:	697a      	ldr	r2, [r7, #20]
10006a90:	6892      	ldr	r2, [r2, #8]
10006a92:	6979      	ldr	r1, [r7, #20]
10006a94:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
10006a96:	9102      	str	r1, [sp, #8]
10006a98:	9201      	str	r2, [sp, #4]
10006a9a:	9300      	str	r3, [sp, #0]
10006a9c:	4623      	mov	r3, r4
10006a9e:	4602      	mov	r2, r0
10006aa0:	2100      	movs	r1, #0
10006aa2:	6938      	ldr	r0, [r7, #16]
10006aa4:	f7fe fd86 	bl	100055b4 <rproc_virtio_init_vring>
10006aa8:	60f8      	str	r0, [r7, #12]
  if (status != 0)
10006aaa:	68fb      	ldr	r3, [r7, #12]
10006aac:	2b00      	cmp	r3, #0
10006aae:	d001      	beq.n	10006ab4 <MX_OPENAMP_Init+0x9c>
  {
    return status;
10006ab0:	68fb      	ldr	r3, [r7, #12]
10006ab2:	e030      	b.n	10006b16 <MX_OPENAMP_Init+0xfe>
  }

  /* USER CODE BEGIN  POST_VRING0_INIT */

  /* USER CODE END POST_VRING0_INIT */
  vring_rsc = &rsc_table->vring1;
10006ab4:	4b1a      	ldr	r3, [pc, #104]	@ (10006b20 <MX_OPENAMP_Init+0x108>)
10006ab6:	681b      	ldr	r3, [r3, #0]
10006ab8:	3348      	adds	r3, #72	@ 0x48
10006aba:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
10006abc:	697b      	ldr	r3, [r7, #20]
10006abe:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
10006ac0:	697b      	ldr	r3, [r7, #20]
10006ac2:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
10006ac4:	461c      	mov	r4, r3
10006ac6:	4b19      	ldr	r3, [pc, #100]	@ (10006b2c <MX_OPENAMP_Init+0x114>)
10006ac8:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
10006aca:	697a      	ldr	r2, [r7, #20]
10006acc:	6892      	ldr	r2, [r2, #8]
10006ace:	6979      	ldr	r1, [r7, #20]
10006ad0:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
10006ad2:	9102      	str	r1, [sp, #8]
10006ad4:	9201      	str	r2, [sp, #4]
10006ad6:	9300      	str	r3, [sp, #0]
10006ad8:	4623      	mov	r3, r4
10006ada:	4602      	mov	r2, r0
10006adc:	2101      	movs	r1, #1
10006ade:	6938      	ldr	r0, [r7, #16]
10006ae0:	f7fe fd68 	bl	100055b4 <rproc_virtio_init_vring>
10006ae4:	60f8      	str	r0, [r7, #12]
  if (status != 0)
10006ae6:	68fb      	ldr	r3, [r7, #12]
10006ae8:	2b00      	cmp	r3, #0
10006aea:	d001      	beq.n	10006af0 <MX_OPENAMP_Init+0xd8>
  {
    return status;
10006aec:	68fb      	ldr	r3, [r7, #12]
10006aee:	e012      	b.n	10006b16 <MX_OPENAMP_Init+0xfe>
  /* USER CODE BEGIN  POST_VRING1_INIT */

  /* USER CODE END POST_VRING1_INIT */

  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
                             (size_t)SHM_SIZE);
10006af0:	4a0f      	ldr	r2, [pc, #60]	@ (10006b30 <MX_OPENAMP_Init+0x118>)
10006af2:	4b10      	ldr	r3, [pc, #64]	@ (10006b34 <MX_OPENAMP_Init+0x11c>)
10006af4:	1ad3      	subs	r3, r2, r3
  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
10006af6:	461a      	mov	r2, r3
10006af8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
10006afc:	480e      	ldr	r0, [pc, #56]	@ (10006b38 <MX_OPENAMP_Init+0x120>)
10006afe:	f7fe ff86 	bl	10005a0e <rpmsg_virtio_init_shm_pool>
  rpmsg_init_vdev(&rvdev, vdev, ns_bind_cb, shm_io, &shpool);
10006b02:	4b0a      	ldr	r3, [pc, #40]	@ (10006b2c <MX_OPENAMP_Init+0x114>)
10006b04:	681b      	ldr	r3, [r3, #0]
10006b06:	4a0c      	ldr	r2, [pc, #48]	@ (10006b38 <MX_OPENAMP_Init+0x120>)
10006b08:	9200      	str	r2, [sp, #0]
10006b0a:	683a      	ldr	r2, [r7, #0]
10006b0c:	6939      	ldr	r1, [r7, #16]
10006b0e:	480b      	ldr	r0, [pc, #44]	@ (10006b3c <MX_OPENAMP_Init+0x124>)
10006b10:	f7ff fa7a 	bl	10006008 <rpmsg_init_vdev>

  /* USER CODE BEGIN POST_RPMSG_INIT */

  /* USER CODE END POST_RPMSG_INIT */

  return 0;
10006b14:	2300      	movs	r3, #0
}
10006b16:	4618      	mov	r0, r3
10006b18:	371c      	adds	r7, #28
10006b1a:	46bd      	mov	sp, r7
10006b1c:	bd90      	pop	{r4, r7, pc}
10006b1e:	bf00      	nop
10006b20:	1002023c 	.word	0x1002023c
10006b24:	10020238 	.word	0x10020238
10006b28:	100067e5 	.word	0x100067e5
10006b2c:	10020234 	.word	0x10020234
10006b30:	10050000 	.word	0x10050000
10006b34:	10040000 	.word	0x10040000
10006b38:	10020240 	.word	0x10020240
10006b3c:	1002024c 	.word	0x1002024c

10006b40 <resource_table_init>:
#endif
} ;
#endif

void resource_table_init(int RPMsgRole, void **table_ptr, int *length)
{
10006b40:	b480      	push	{r7}
10006b42:	b085      	sub	sp, #20
10006b44:	af00      	add	r7, sp, #0
10006b46:	60f8      	str	r0, [r7, #12]
10006b48:	60b9      	str	r1, [r7, #8]
10006b4a:	607a      	str	r2, [r7, #4]
#endif
#endif
#endif

  (void)RPMsgRole;
  *length = sizeof(resource_table);
10006b4c:	687b      	ldr	r3, [r7, #4]
10006b4e:	228c      	movs	r2, #140	@ 0x8c
10006b50:	601a      	str	r2, [r3, #0]
  *table_ptr = (void *)&resource_table;
10006b52:	68bb      	ldr	r3, [r7, #8]
10006b54:	4a03      	ldr	r2, [pc, #12]	@ (10006b64 <resource_table_init+0x24>)
10006b56:	601a      	str	r2, [r3, #0]
}
10006b58:	bf00      	nop
10006b5a:	3714      	adds	r7, #20
10006b5c:	46bd      	mov	sp, r7
10006b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
10006b62:	4770      	bx	lr
10006b64:	10020120 	.word	0x10020120

10006b68 <__assert_func>:
10006b68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10006b6a:	4614      	mov	r4, r2
10006b6c:	461a      	mov	r2, r3
10006b6e:	4b09      	ldr	r3, [pc, #36]	@ (10006b94 <__assert_func+0x2c>)
10006b70:	681b      	ldr	r3, [r3, #0]
10006b72:	4605      	mov	r5, r0
10006b74:	68d8      	ldr	r0, [r3, #12]
10006b76:	b954      	cbnz	r4, 10006b8e <__assert_func+0x26>
10006b78:	4b07      	ldr	r3, [pc, #28]	@ (10006b98 <__assert_func+0x30>)
10006b7a:	461c      	mov	r4, r3
10006b7c:	e9cd 3401 	strd	r3, r4, [sp, #4]
10006b80:	9100      	str	r1, [sp, #0]
10006b82:	462b      	mov	r3, r5
10006b84:	4905      	ldr	r1, [pc, #20]	@ (10006b9c <__assert_func+0x34>)
10006b86:	f000 f96f 	bl	10006e68 <fiprintf>
10006b8a:	f000 fa9e 	bl	100070ca <abort>
10006b8e:	4b04      	ldr	r3, [pc, #16]	@ (10006ba0 <__assert_func+0x38>)
10006b90:	e7f4      	b.n	10006b7c <__assert_func+0x14>
10006b92:	bf00      	nop
10006b94:	100200d0 	.word	0x100200d0
10006b98:	10007f20 	.word	0x10007f20
10006b9c:	10007ef2 	.word	0x10007ef2
10006ba0:	10007ee5 	.word	0x10007ee5

10006ba4 <malloc>:
10006ba4:	4b02      	ldr	r3, [pc, #8]	@ (10006bb0 <malloc+0xc>)
10006ba6:	4601      	mov	r1, r0
10006ba8:	6818      	ldr	r0, [r3, #0]
10006baa:	f000 b82d 	b.w	10006c08 <_malloc_r>
10006bae:	bf00      	nop
10006bb0:	100200d0 	.word	0x100200d0

10006bb4 <free>:
10006bb4:	4b02      	ldr	r3, [pc, #8]	@ (10006bc0 <free+0xc>)
10006bb6:	4601      	mov	r1, r0
10006bb8:	6818      	ldr	r0, [r3, #0]
10006bba:	f000 ba8d 	b.w	100070d8 <_free_r>
10006bbe:	bf00      	nop
10006bc0:	100200d0 	.word	0x100200d0

10006bc4 <sbrk_aligned>:
10006bc4:	b570      	push	{r4, r5, r6, lr}
10006bc6:	4e0f      	ldr	r6, [pc, #60]	@ (10006c04 <sbrk_aligned+0x40>)
10006bc8:	460c      	mov	r4, r1
10006bca:	6831      	ldr	r1, [r6, #0]
10006bcc:	4605      	mov	r5, r0
10006bce:	b911      	cbnz	r1, 10006bd6 <sbrk_aligned+0x12>
10006bd0:	f000 fa1e 	bl	10007010 <_sbrk_r>
10006bd4:	6030      	str	r0, [r6, #0]
10006bd6:	4621      	mov	r1, r4
10006bd8:	4628      	mov	r0, r5
10006bda:	f000 fa19 	bl	10007010 <_sbrk_r>
10006bde:	1c43      	adds	r3, r0, #1
10006be0:	d103      	bne.n	10006bea <sbrk_aligned+0x26>
10006be2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
10006be6:	4620      	mov	r0, r4
10006be8:	bd70      	pop	{r4, r5, r6, pc}
10006bea:	1cc4      	adds	r4, r0, #3
10006bec:	f024 0403 	bic.w	r4, r4, #3
10006bf0:	42a0      	cmp	r0, r4
10006bf2:	d0f8      	beq.n	10006be6 <sbrk_aligned+0x22>
10006bf4:	1a21      	subs	r1, r4, r0
10006bf6:	4628      	mov	r0, r5
10006bf8:	f000 fa0a 	bl	10007010 <_sbrk_r>
10006bfc:	3001      	adds	r0, #1
10006bfe:	d1f2      	bne.n	10006be6 <sbrk_aligned+0x22>
10006c00:	e7ef      	b.n	10006be2 <sbrk_aligned+0x1e>
10006c02:	bf00      	nop
10006c04:	100202dc 	.word	0x100202dc

10006c08 <_malloc_r>:
10006c08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
10006c0c:	1ccd      	adds	r5, r1, #3
10006c0e:	f025 0503 	bic.w	r5, r5, #3
10006c12:	3508      	adds	r5, #8
10006c14:	2d0c      	cmp	r5, #12
10006c16:	bf38      	it	cc
10006c18:	250c      	movcc	r5, #12
10006c1a:	2d00      	cmp	r5, #0
10006c1c:	4606      	mov	r6, r0
10006c1e:	db01      	blt.n	10006c24 <_malloc_r+0x1c>
10006c20:	42a9      	cmp	r1, r5
10006c22:	d904      	bls.n	10006c2e <_malloc_r+0x26>
10006c24:	230c      	movs	r3, #12
10006c26:	6033      	str	r3, [r6, #0]
10006c28:	2000      	movs	r0, #0
10006c2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
10006c2e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 10006d04 <_malloc_r+0xfc>
10006c32:	f000 f869 	bl	10006d08 <__malloc_lock>
10006c36:	f8d8 3000 	ldr.w	r3, [r8]
10006c3a:	461c      	mov	r4, r3
10006c3c:	bb44      	cbnz	r4, 10006c90 <_malloc_r+0x88>
10006c3e:	4629      	mov	r1, r5
10006c40:	4630      	mov	r0, r6
10006c42:	f7ff ffbf 	bl	10006bc4 <sbrk_aligned>
10006c46:	1c43      	adds	r3, r0, #1
10006c48:	4604      	mov	r4, r0
10006c4a:	d158      	bne.n	10006cfe <_malloc_r+0xf6>
10006c4c:	f8d8 4000 	ldr.w	r4, [r8]
10006c50:	4627      	mov	r7, r4
10006c52:	2f00      	cmp	r7, #0
10006c54:	d143      	bne.n	10006cde <_malloc_r+0xd6>
10006c56:	2c00      	cmp	r4, #0
10006c58:	d04b      	beq.n	10006cf2 <_malloc_r+0xea>
10006c5a:	6823      	ldr	r3, [r4, #0]
10006c5c:	4639      	mov	r1, r7
10006c5e:	4630      	mov	r0, r6
10006c60:	eb04 0903 	add.w	r9, r4, r3
10006c64:	f000 f9d4 	bl	10007010 <_sbrk_r>
10006c68:	4581      	cmp	r9, r0
10006c6a:	d142      	bne.n	10006cf2 <_malloc_r+0xea>
10006c6c:	6821      	ldr	r1, [r4, #0]
10006c6e:	1a6d      	subs	r5, r5, r1
10006c70:	4629      	mov	r1, r5
10006c72:	4630      	mov	r0, r6
10006c74:	f7ff ffa6 	bl	10006bc4 <sbrk_aligned>
10006c78:	3001      	adds	r0, #1
10006c7a:	d03a      	beq.n	10006cf2 <_malloc_r+0xea>
10006c7c:	6823      	ldr	r3, [r4, #0]
10006c7e:	442b      	add	r3, r5
10006c80:	6023      	str	r3, [r4, #0]
10006c82:	f8d8 3000 	ldr.w	r3, [r8]
10006c86:	685a      	ldr	r2, [r3, #4]
10006c88:	bb62      	cbnz	r2, 10006ce4 <_malloc_r+0xdc>
10006c8a:	f8c8 7000 	str.w	r7, [r8]
10006c8e:	e00f      	b.n	10006cb0 <_malloc_r+0xa8>
10006c90:	6822      	ldr	r2, [r4, #0]
10006c92:	1b52      	subs	r2, r2, r5
10006c94:	d420      	bmi.n	10006cd8 <_malloc_r+0xd0>
10006c96:	2a0b      	cmp	r2, #11
10006c98:	d917      	bls.n	10006cca <_malloc_r+0xc2>
10006c9a:	1961      	adds	r1, r4, r5
10006c9c:	42a3      	cmp	r3, r4
10006c9e:	6025      	str	r5, [r4, #0]
10006ca0:	bf18      	it	ne
10006ca2:	6059      	strne	r1, [r3, #4]
10006ca4:	6863      	ldr	r3, [r4, #4]
10006ca6:	bf08      	it	eq
10006ca8:	f8c8 1000 	streq.w	r1, [r8]
10006cac:	5162      	str	r2, [r4, r5]
10006cae:	604b      	str	r3, [r1, #4]
10006cb0:	4630      	mov	r0, r6
10006cb2:	f000 f82f 	bl	10006d14 <__malloc_unlock>
10006cb6:	f104 000b 	add.w	r0, r4, #11
10006cba:	1d23      	adds	r3, r4, #4
10006cbc:	f020 0007 	bic.w	r0, r0, #7
10006cc0:	1ac2      	subs	r2, r0, r3
10006cc2:	bf1c      	itt	ne
10006cc4:	1a1b      	subne	r3, r3, r0
10006cc6:	50a3      	strne	r3, [r4, r2]
10006cc8:	e7af      	b.n	10006c2a <_malloc_r+0x22>
10006cca:	6862      	ldr	r2, [r4, #4]
10006ccc:	42a3      	cmp	r3, r4
10006cce:	bf0c      	ite	eq
10006cd0:	f8c8 2000 	streq.w	r2, [r8]
10006cd4:	605a      	strne	r2, [r3, #4]
10006cd6:	e7eb      	b.n	10006cb0 <_malloc_r+0xa8>
10006cd8:	4623      	mov	r3, r4
10006cda:	6864      	ldr	r4, [r4, #4]
10006cdc:	e7ae      	b.n	10006c3c <_malloc_r+0x34>
10006cde:	463c      	mov	r4, r7
10006ce0:	687f      	ldr	r7, [r7, #4]
10006ce2:	e7b6      	b.n	10006c52 <_malloc_r+0x4a>
10006ce4:	461a      	mov	r2, r3
10006ce6:	685b      	ldr	r3, [r3, #4]
10006ce8:	42a3      	cmp	r3, r4
10006cea:	d1fb      	bne.n	10006ce4 <_malloc_r+0xdc>
10006cec:	2300      	movs	r3, #0
10006cee:	6053      	str	r3, [r2, #4]
10006cf0:	e7de      	b.n	10006cb0 <_malloc_r+0xa8>
10006cf2:	230c      	movs	r3, #12
10006cf4:	6033      	str	r3, [r6, #0]
10006cf6:	4630      	mov	r0, r6
10006cf8:	f000 f80c 	bl	10006d14 <__malloc_unlock>
10006cfc:	e794      	b.n	10006c28 <_malloc_r+0x20>
10006cfe:	6005      	str	r5, [r0, #0]
10006d00:	e7d6      	b.n	10006cb0 <_malloc_r+0xa8>
10006d02:	bf00      	nop
10006d04:	100202e0 	.word	0x100202e0

10006d08 <__malloc_lock>:
10006d08:	4801      	ldr	r0, [pc, #4]	@ (10006d10 <__malloc_lock+0x8>)
10006d0a:	f000 b9ce 	b.w	100070aa <__retarget_lock_acquire_recursive>
10006d0e:	bf00      	nop
10006d10:	10020424 	.word	0x10020424

10006d14 <__malloc_unlock>:
10006d14:	4801      	ldr	r0, [pc, #4]	@ (10006d1c <__malloc_unlock+0x8>)
10006d16:	f000 b9c9 	b.w	100070ac <__retarget_lock_release_recursive>
10006d1a:	bf00      	nop
10006d1c:	10020424 	.word	0x10020424

10006d20 <std>:
10006d20:	2300      	movs	r3, #0
10006d22:	b510      	push	{r4, lr}
10006d24:	4604      	mov	r4, r0
10006d26:	e9c0 3300 	strd	r3, r3, [r0]
10006d2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
10006d2e:	6083      	str	r3, [r0, #8]
10006d30:	8181      	strh	r1, [r0, #12]
10006d32:	6643      	str	r3, [r0, #100]	@ 0x64
10006d34:	81c2      	strh	r2, [r0, #14]
10006d36:	6183      	str	r3, [r0, #24]
10006d38:	4619      	mov	r1, r3
10006d3a:	2208      	movs	r2, #8
10006d3c:	305c      	adds	r0, #92	@ 0x5c
10006d3e:	f000 f906 	bl	10006f4e <memset>
10006d42:	4b0d      	ldr	r3, [pc, #52]	@ (10006d78 <std+0x58>)
10006d44:	6263      	str	r3, [r4, #36]	@ 0x24
10006d46:	4b0d      	ldr	r3, [pc, #52]	@ (10006d7c <std+0x5c>)
10006d48:	62a3      	str	r3, [r4, #40]	@ 0x28
10006d4a:	4b0d      	ldr	r3, [pc, #52]	@ (10006d80 <std+0x60>)
10006d4c:	62e3      	str	r3, [r4, #44]	@ 0x2c
10006d4e:	4b0d      	ldr	r3, [pc, #52]	@ (10006d84 <std+0x64>)
10006d50:	6323      	str	r3, [r4, #48]	@ 0x30
10006d52:	4b0d      	ldr	r3, [pc, #52]	@ (10006d88 <std+0x68>)
10006d54:	6224      	str	r4, [r4, #32]
10006d56:	429c      	cmp	r4, r3
10006d58:	d006      	beq.n	10006d68 <std+0x48>
10006d5a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
10006d5e:	4294      	cmp	r4, r2
10006d60:	d002      	beq.n	10006d68 <std+0x48>
10006d62:	33d0      	adds	r3, #208	@ 0xd0
10006d64:	429c      	cmp	r4, r3
10006d66:	d105      	bne.n	10006d74 <std+0x54>
10006d68:	f104 0058 	add.w	r0, r4, #88	@ 0x58
10006d6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
10006d70:	f000 b99a 	b.w	100070a8 <__retarget_lock_init_recursive>
10006d74:	bd10      	pop	{r4, pc}
10006d76:	bf00      	nop
10006d78:	10006ec9 	.word	0x10006ec9
10006d7c:	10006eeb 	.word	0x10006eeb
10006d80:	10006f23 	.word	0x10006f23
10006d84:	10006f47 	.word	0x10006f47
10006d88:	100202e4 	.word	0x100202e4

10006d8c <stdio_exit_handler>:
10006d8c:	4a02      	ldr	r2, [pc, #8]	@ (10006d98 <stdio_exit_handler+0xc>)
10006d8e:	4903      	ldr	r1, [pc, #12]	@ (10006d9c <stdio_exit_handler+0x10>)
10006d90:	4803      	ldr	r0, [pc, #12]	@ (10006da0 <stdio_exit_handler+0x14>)
10006d92:	f000 b87b 	b.w	10006e8c <_fwalk_sglue>
10006d96:	bf00      	nop
10006d98:	100200c4 	.word	0x100200c4
10006d9c:	10007815 	.word	0x10007815
10006da0:	100200d4 	.word	0x100200d4

10006da4 <cleanup_stdio>:
10006da4:	6841      	ldr	r1, [r0, #4]
10006da6:	4b0c      	ldr	r3, [pc, #48]	@ (10006dd8 <cleanup_stdio+0x34>)
10006da8:	4299      	cmp	r1, r3
10006daa:	b510      	push	{r4, lr}
10006dac:	4604      	mov	r4, r0
10006dae:	d001      	beq.n	10006db4 <cleanup_stdio+0x10>
10006db0:	f000 fd30 	bl	10007814 <_fflush_r>
10006db4:	68a1      	ldr	r1, [r4, #8]
10006db6:	4b09      	ldr	r3, [pc, #36]	@ (10006ddc <cleanup_stdio+0x38>)
10006db8:	4299      	cmp	r1, r3
10006dba:	d002      	beq.n	10006dc2 <cleanup_stdio+0x1e>
10006dbc:	4620      	mov	r0, r4
10006dbe:	f000 fd29 	bl	10007814 <_fflush_r>
10006dc2:	68e1      	ldr	r1, [r4, #12]
10006dc4:	4b06      	ldr	r3, [pc, #24]	@ (10006de0 <cleanup_stdio+0x3c>)
10006dc6:	4299      	cmp	r1, r3
10006dc8:	d004      	beq.n	10006dd4 <cleanup_stdio+0x30>
10006dca:	4620      	mov	r0, r4
10006dcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
10006dd0:	f000 bd20 	b.w	10007814 <_fflush_r>
10006dd4:	bd10      	pop	{r4, pc}
10006dd6:	bf00      	nop
10006dd8:	100202e4 	.word	0x100202e4
10006ddc:	1002034c 	.word	0x1002034c
10006de0:	100203b4 	.word	0x100203b4

10006de4 <global_stdio_init.part.0>:
10006de4:	b510      	push	{r4, lr}
10006de6:	4b0b      	ldr	r3, [pc, #44]	@ (10006e14 <global_stdio_init.part.0+0x30>)
10006de8:	4c0b      	ldr	r4, [pc, #44]	@ (10006e18 <global_stdio_init.part.0+0x34>)
10006dea:	4a0c      	ldr	r2, [pc, #48]	@ (10006e1c <global_stdio_init.part.0+0x38>)
10006dec:	601a      	str	r2, [r3, #0]
10006dee:	4620      	mov	r0, r4
10006df0:	2200      	movs	r2, #0
10006df2:	2104      	movs	r1, #4
10006df4:	f7ff ff94 	bl	10006d20 <std>
10006df8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
10006dfc:	2201      	movs	r2, #1
10006dfe:	2109      	movs	r1, #9
10006e00:	f7ff ff8e 	bl	10006d20 <std>
10006e04:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
10006e08:	2202      	movs	r2, #2
10006e0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
10006e0e:	2112      	movs	r1, #18
10006e10:	f7ff bf86 	b.w	10006d20 <std>
10006e14:	1002041c 	.word	0x1002041c
10006e18:	100202e4 	.word	0x100202e4
10006e1c:	10006d8d 	.word	0x10006d8d

10006e20 <__sfp_lock_acquire>:
10006e20:	4801      	ldr	r0, [pc, #4]	@ (10006e28 <__sfp_lock_acquire+0x8>)
10006e22:	f000 b942 	b.w	100070aa <__retarget_lock_acquire_recursive>
10006e26:	bf00      	nop
10006e28:	10020425 	.word	0x10020425

10006e2c <__sfp_lock_release>:
10006e2c:	4801      	ldr	r0, [pc, #4]	@ (10006e34 <__sfp_lock_release+0x8>)
10006e2e:	f000 b93d 	b.w	100070ac <__retarget_lock_release_recursive>
10006e32:	bf00      	nop
10006e34:	10020425 	.word	0x10020425

10006e38 <__sinit>:
10006e38:	b510      	push	{r4, lr}
10006e3a:	4604      	mov	r4, r0
10006e3c:	f7ff fff0 	bl	10006e20 <__sfp_lock_acquire>
10006e40:	6a23      	ldr	r3, [r4, #32]
10006e42:	b11b      	cbz	r3, 10006e4c <__sinit+0x14>
10006e44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
10006e48:	f7ff bff0 	b.w	10006e2c <__sfp_lock_release>
10006e4c:	4b04      	ldr	r3, [pc, #16]	@ (10006e60 <__sinit+0x28>)
10006e4e:	6223      	str	r3, [r4, #32]
10006e50:	4b04      	ldr	r3, [pc, #16]	@ (10006e64 <__sinit+0x2c>)
10006e52:	681b      	ldr	r3, [r3, #0]
10006e54:	2b00      	cmp	r3, #0
10006e56:	d1f5      	bne.n	10006e44 <__sinit+0xc>
10006e58:	f7ff ffc4 	bl	10006de4 <global_stdio_init.part.0>
10006e5c:	e7f2      	b.n	10006e44 <__sinit+0xc>
10006e5e:	bf00      	nop
10006e60:	10006da5 	.word	0x10006da5
10006e64:	1002041c 	.word	0x1002041c

10006e68 <fiprintf>:
10006e68:	b40e      	push	{r1, r2, r3}
10006e6a:	b503      	push	{r0, r1, lr}
10006e6c:	4601      	mov	r1, r0
10006e6e:	ab03      	add	r3, sp, #12
10006e70:	4805      	ldr	r0, [pc, #20]	@ (10006e88 <fiprintf+0x20>)
10006e72:	f853 2b04 	ldr.w	r2, [r3], #4
10006e76:	6800      	ldr	r0, [r0, #0]
10006e78:	9301      	str	r3, [sp, #4]
10006e7a:	f000 f9a1 	bl	100071c0 <_vfiprintf_r>
10006e7e:	b002      	add	sp, #8
10006e80:	f85d eb04 	ldr.w	lr, [sp], #4
10006e84:	b003      	add	sp, #12
10006e86:	4770      	bx	lr
10006e88:	100200d0 	.word	0x100200d0

10006e8c <_fwalk_sglue>:
10006e8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
10006e90:	4607      	mov	r7, r0
10006e92:	4688      	mov	r8, r1
10006e94:	4614      	mov	r4, r2
10006e96:	2600      	movs	r6, #0
10006e98:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
10006e9c:	f1b9 0901 	subs.w	r9, r9, #1
10006ea0:	d505      	bpl.n	10006eae <_fwalk_sglue+0x22>
10006ea2:	6824      	ldr	r4, [r4, #0]
10006ea4:	2c00      	cmp	r4, #0
10006ea6:	d1f7      	bne.n	10006e98 <_fwalk_sglue+0xc>
10006ea8:	4630      	mov	r0, r6
10006eaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
10006eae:	89ab      	ldrh	r3, [r5, #12]
10006eb0:	2b01      	cmp	r3, #1
10006eb2:	d907      	bls.n	10006ec4 <_fwalk_sglue+0x38>
10006eb4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
10006eb8:	3301      	adds	r3, #1
10006eba:	d003      	beq.n	10006ec4 <_fwalk_sglue+0x38>
10006ebc:	4629      	mov	r1, r5
10006ebe:	4638      	mov	r0, r7
10006ec0:	47c0      	blx	r8
10006ec2:	4306      	orrs	r6, r0
10006ec4:	3568      	adds	r5, #104	@ 0x68
10006ec6:	e7e9      	b.n	10006e9c <_fwalk_sglue+0x10>

10006ec8 <__sread>:
10006ec8:	b510      	push	{r4, lr}
10006eca:	460c      	mov	r4, r1
10006ecc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
10006ed0:	f000 f88c 	bl	10006fec <_read_r>
10006ed4:	2800      	cmp	r0, #0
10006ed6:	bfab      	itete	ge
10006ed8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
10006eda:	89a3      	ldrhlt	r3, [r4, #12]
10006edc:	181b      	addge	r3, r3, r0
10006ede:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
10006ee2:	bfac      	ite	ge
10006ee4:	6563      	strge	r3, [r4, #84]	@ 0x54
10006ee6:	81a3      	strhlt	r3, [r4, #12]
10006ee8:	bd10      	pop	{r4, pc}

10006eea <__swrite>:
10006eea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
10006eee:	461f      	mov	r7, r3
10006ef0:	898b      	ldrh	r3, [r1, #12]
10006ef2:	05db      	lsls	r3, r3, #23
10006ef4:	4605      	mov	r5, r0
10006ef6:	460c      	mov	r4, r1
10006ef8:	4616      	mov	r6, r2
10006efa:	d505      	bpl.n	10006f08 <__swrite+0x1e>
10006efc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
10006f00:	2302      	movs	r3, #2
10006f02:	2200      	movs	r2, #0
10006f04:	f000 f860 	bl	10006fc8 <_lseek_r>
10006f08:	89a3      	ldrh	r3, [r4, #12]
10006f0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
10006f0e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
10006f12:	81a3      	strh	r3, [r4, #12]
10006f14:	4632      	mov	r2, r6
10006f16:	463b      	mov	r3, r7
10006f18:	4628      	mov	r0, r5
10006f1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
10006f1e:	f000 b887 	b.w	10007030 <_write_r>

10006f22 <__sseek>:
10006f22:	b510      	push	{r4, lr}
10006f24:	460c      	mov	r4, r1
10006f26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
10006f2a:	f000 f84d 	bl	10006fc8 <_lseek_r>
10006f2e:	1c43      	adds	r3, r0, #1
10006f30:	89a3      	ldrh	r3, [r4, #12]
10006f32:	bf15      	itete	ne
10006f34:	6560      	strne	r0, [r4, #84]	@ 0x54
10006f36:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
10006f3a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
10006f3e:	81a3      	strheq	r3, [r4, #12]
10006f40:	bf18      	it	ne
10006f42:	81a3      	strhne	r3, [r4, #12]
10006f44:	bd10      	pop	{r4, pc}

10006f46 <__sclose>:
10006f46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
10006f4a:	f000 b82d 	b.w	10006fa8 <_close_r>

10006f4e <memset>:
10006f4e:	4402      	add	r2, r0
10006f50:	4603      	mov	r3, r0
10006f52:	4293      	cmp	r3, r2
10006f54:	d100      	bne.n	10006f58 <memset+0xa>
10006f56:	4770      	bx	lr
10006f58:	f803 1b01 	strb.w	r1, [r3], #1
10006f5c:	e7f9      	b.n	10006f52 <memset+0x4>

10006f5e <strncmp>:
10006f5e:	b510      	push	{r4, lr}
10006f60:	b16a      	cbz	r2, 10006f7e <strncmp+0x20>
10006f62:	3901      	subs	r1, #1
10006f64:	1884      	adds	r4, r0, r2
10006f66:	f810 2b01 	ldrb.w	r2, [r0], #1
10006f6a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
10006f6e:	429a      	cmp	r2, r3
10006f70:	d103      	bne.n	10006f7a <strncmp+0x1c>
10006f72:	42a0      	cmp	r0, r4
10006f74:	d001      	beq.n	10006f7a <strncmp+0x1c>
10006f76:	2a00      	cmp	r2, #0
10006f78:	d1f5      	bne.n	10006f66 <strncmp+0x8>
10006f7a:	1ad0      	subs	r0, r2, r3
10006f7c:	bd10      	pop	{r4, pc}
10006f7e:	4610      	mov	r0, r2
10006f80:	e7fc      	b.n	10006f7c <strncmp+0x1e>

10006f82 <strncpy>:
10006f82:	b510      	push	{r4, lr}
10006f84:	3901      	subs	r1, #1
10006f86:	4603      	mov	r3, r0
10006f88:	b132      	cbz	r2, 10006f98 <strncpy+0x16>
10006f8a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
10006f8e:	f803 4b01 	strb.w	r4, [r3], #1
10006f92:	3a01      	subs	r2, #1
10006f94:	2c00      	cmp	r4, #0
10006f96:	d1f7      	bne.n	10006f88 <strncpy+0x6>
10006f98:	441a      	add	r2, r3
10006f9a:	2100      	movs	r1, #0
10006f9c:	4293      	cmp	r3, r2
10006f9e:	d100      	bne.n	10006fa2 <strncpy+0x20>
10006fa0:	bd10      	pop	{r4, pc}
10006fa2:	f803 1b01 	strb.w	r1, [r3], #1
10006fa6:	e7f9      	b.n	10006f9c <strncpy+0x1a>

10006fa8 <_close_r>:
10006fa8:	b538      	push	{r3, r4, r5, lr}
10006faa:	4d06      	ldr	r5, [pc, #24]	@ (10006fc4 <_close_r+0x1c>)
10006fac:	2300      	movs	r3, #0
10006fae:	4604      	mov	r4, r0
10006fb0:	4608      	mov	r0, r1
10006fb2:	602b      	str	r3, [r5, #0]
10006fb4:	f7f9 fbce 	bl	10000754 <_close>
10006fb8:	1c43      	adds	r3, r0, #1
10006fba:	d102      	bne.n	10006fc2 <_close_r+0x1a>
10006fbc:	682b      	ldr	r3, [r5, #0]
10006fbe:	b103      	cbz	r3, 10006fc2 <_close_r+0x1a>
10006fc0:	6023      	str	r3, [r4, #0]
10006fc2:	bd38      	pop	{r3, r4, r5, pc}
10006fc4:	10020420 	.word	0x10020420

10006fc8 <_lseek_r>:
10006fc8:	b538      	push	{r3, r4, r5, lr}
10006fca:	4d07      	ldr	r5, [pc, #28]	@ (10006fe8 <_lseek_r+0x20>)
10006fcc:	4604      	mov	r4, r0
10006fce:	4608      	mov	r0, r1
10006fd0:	4611      	mov	r1, r2
10006fd2:	2200      	movs	r2, #0
10006fd4:	602a      	str	r2, [r5, #0]
10006fd6:	461a      	mov	r2, r3
10006fd8:	f7f9 fbe3 	bl	100007a2 <_lseek>
10006fdc:	1c43      	adds	r3, r0, #1
10006fde:	d102      	bne.n	10006fe6 <_lseek_r+0x1e>
10006fe0:	682b      	ldr	r3, [r5, #0]
10006fe2:	b103      	cbz	r3, 10006fe6 <_lseek_r+0x1e>
10006fe4:	6023      	str	r3, [r4, #0]
10006fe6:	bd38      	pop	{r3, r4, r5, pc}
10006fe8:	10020420 	.word	0x10020420

10006fec <_read_r>:
10006fec:	b538      	push	{r3, r4, r5, lr}
10006fee:	4d07      	ldr	r5, [pc, #28]	@ (1000700c <_read_r+0x20>)
10006ff0:	4604      	mov	r4, r0
10006ff2:	4608      	mov	r0, r1
10006ff4:	4611      	mov	r1, r2
10006ff6:	2200      	movs	r2, #0
10006ff8:	602a      	str	r2, [r5, #0]
10006ffa:	461a      	mov	r2, r3
10006ffc:	f7f9 fb71 	bl	100006e2 <_read>
10007000:	1c43      	adds	r3, r0, #1
10007002:	d102      	bne.n	1000700a <_read_r+0x1e>
10007004:	682b      	ldr	r3, [r5, #0]
10007006:	b103      	cbz	r3, 1000700a <_read_r+0x1e>
10007008:	6023      	str	r3, [r4, #0]
1000700a:	bd38      	pop	{r3, r4, r5, pc}
1000700c:	10020420 	.word	0x10020420

10007010 <_sbrk_r>:
10007010:	b538      	push	{r3, r4, r5, lr}
10007012:	4d06      	ldr	r5, [pc, #24]	@ (1000702c <_sbrk_r+0x1c>)
10007014:	2300      	movs	r3, #0
10007016:	4604      	mov	r4, r0
10007018:	4608      	mov	r0, r1
1000701a:	602b      	str	r3, [r5, #0]
1000701c:	f7f9 fbce 	bl	100007bc <_sbrk>
10007020:	1c43      	adds	r3, r0, #1
10007022:	d102      	bne.n	1000702a <_sbrk_r+0x1a>
10007024:	682b      	ldr	r3, [r5, #0]
10007026:	b103      	cbz	r3, 1000702a <_sbrk_r+0x1a>
10007028:	6023      	str	r3, [r4, #0]
1000702a:	bd38      	pop	{r3, r4, r5, pc}
1000702c:	10020420 	.word	0x10020420

10007030 <_write_r>:
10007030:	b538      	push	{r3, r4, r5, lr}
10007032:	4d07      	ldr	r5, [pc, #28]	@ (10007050 <_write_r+0x20>)
10007034:	4604      	mov	r4, r0
10007036:	4608      	mov	r0, r1
10007038:	4611      	mov	r1, r2
1000703a:	2200      	movs	r2, #0
1000703c:	602a      	str	r2, [r5, #0]
1000703e:	461a      	mov	r2, r3
10007040:	f7f9 fb6c 	bl	1000071c <_write>
10007044:	1c43      	adds	r3, r0, #1
10007046:	d102      	bne.n	1000704e <_write_r+0x1e>
10007048:	682b      	ldr	r3, [r5, #0]
1000704a:	b103      	cbz	r3, 1000704e <_write_r+0x1e>
1000704c:	6023      	str	r3, [r4, #0]
1000704e:	bd38      	pop	{r3, r4, r5, pc}
10007050:	10020420 	.word	0x10020420

10007054 <__errno>:
10007054:	4b01      	ldr	r3, [pc, #4]	@ (1000705c <__errno+0x8>)
10007056:	6818      	ldr	r0, [r3, #0]
10007058:	4770      	bx	lr
1000705a:	bf00      	nop
1000705c:	100200d0 	.word	0x100200d0

10007060 <__libc_init_array>:
10007060:	b570      	push	{r4, r5, r6, lr}
10007062:	4d0d      	ldr	r5, [pc, #52]	@ (10007098 <__libc_init_array+0x38>)
10007064:	4c0d      	ldr	r4, [pc, #52]	@ (1000709c <__libc_init_array+0x3c>)
10007066:	1b64      	subs	r4, r4, r5
10007068:	10a4      	asrs	r4, r4, #2
1000706a:	2600      	movs	r6, #0
1000706c:	42a6      	cmp	r6, r4
1000706e:	d109      	bne.n	10007084 <__libc_init_array+0x24>
10007070:	4d0b      	ldr	r5, [pc, #44]	@ (100070a0 <__libc_init_array+0x40>)
10007072:	4c0c      	ldr	r4, [pc, #48]	@ (100070a4 <__libc_init_array+0x44>)
10007074:	f000 fd52 	bl	10007b1c <_init>
10007078:	1b64      	subs	r4, r4, r5
1000707a:	10a4      	asrs	r4, r4, #2
1000707c:	2600      	movs	r6, #0
1000707e:	42a6      	cmp	r6, r4
10007080:	d105      	bne.n	1000708e <__libc_init_array+0x2e>
10007082:	bd70      	pop	{r4, r5, r6, pc}
10007084:	f855 3b04 	ldr.w	r3, [r5], #4
10007088:	4798      	blx	r3
1000708a:	3601      	adds	r6, #1
1000708c:	e7ee      	b.n	1000706c <__libc_init_array+0xc>
1000708e:	f855 3b04 	ldr.w	r3, [r5], #4
10007092:	4798      	blx	r3
10007094:	3601      	adds	r6, #1
10007096:	e7f2      	b.n	1000707e <__libc_init_array+0x1e>
10007098:	10007f5c 	.word	0x10007f5c
1000709c:	10007f5c 	.word	0x10007f5c
100070a0:	10007f5c 	.word	0x10007f5c
100070a4:	10007f60 	.word	0x10007f60

100070a8 <__retarget_lock_init_recursive>:
100070a8:	4770      	bx	lr

100070aa <__retarget_lock_acquire_recursive>:
100070aa:	4770      	bx	lr

100070ac <__retarget_lock_release_recursive>:
100070ac:	4770      	bx	lr

100070ae <memcpy>:
100070ae:	440a      	add	r2, r1
100070b0:	4291      	cmp	r1, r2
100070b2:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
100070b6:	d100      	bne.n	100070ba <memcpy+0xc>
100070b8:	4770      	bx	lr
100070ba:	b510      	push	{r4, lr}
100070bc:	f811 4b01 	ldrb.w	r4, [r1], #1
100070c0:	f803 4f01 	strb.w	r4, [r3, #1]!
100070c4:	4291      	cmp	r1, r2
100070c6:	d1f9      	bne.n	100070bc <memcpy+0xe>
100070c8:	bd10      	pop	{r4, pc}

100070ca <abort>:
100070ca:	b508      	push	{r3, lr}
100070cc:	2006      	movs	r0, #6
100070ce:	f000 fc85 	bl	100079dc <raise>
100070d2:	2001      	movs	r0, #1
100070d4:	f7f9 fafa 	bl	100006cc <_exit>

100070d8 <_free_r>:
100070d8:	b538      	push	{r3, r4, r5, lr}
100070da:	4605      	mov	r5, r0
100070dc:	2900      	cmp	r1, #0
100070de:	d041      	beq.n	10007164 <_free_r+0x8c>
100070e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
100070e4:	1f0c      	subs	r4, r1, #4
100070e6:	2b00      	cmp	r3, #0
100070e8:	bfb8      	it	lt
100070ea:	18e4      	addlt	r4, r4, r3
100070ec:	f7ff fe0c 	bl	10006d08 <__malloc_lock>
100070f0:	4a1d      	ldr	r2, [pc, #116]	@ (10007168 <_free_r+0x90>)
100070f2:	6813      	ldr	r3, [r2, #0]
100070f4:	b933      	cbnz	r3, 10007104 <_free_r+0x2c>
100070f6:	6063      	str	r3, [r4, #4]
100070f8:	6014      	str	r4, [r2, #0]
100070fa:	4628      	mov	r0, r5
100070fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
10007100:	f7ff be08 	b.w	10006d14 <__malloc_unlock>
10007104:	42a3      	cmp	r3, r4
10007106:	d908      	bls.n	1000711a <_free_r+0x42>
10007108:	6820      	ldr	r0, [r4, #0]
1000710a:	1821      	adds	r1, r4, r0
1000710c:	428b      	cmp	r3, r1
1000710e:	bf01      	itttt	eq
10007110:	6819      	ldreq	r1, [r3, #0]
10007112:	685b      	ldreq	r3, [r3, #4]
10007114:	1809      	addeq	r1, r1, r0
10007116:	6021      	streq	r1, [r4, #0]
10007118:	e7ed      	b.n	100070f6 <_free_r+0x1e>
1000711a:	461a      	mov	r2, r3
1000711c:	685b      	ldr	r3, [r3, #4]
1000711e:	b10b      	cbz	r3, 10007124 <_free_r+0x4c>
10007120:	42a3      	cmp	r3, r4
10007122:	d9fa      	bls.n	1000711a <_free_r+0x42>
10007124:	6811      	ldr	r1, [r2, #0]
10007126:	1850      	adds	r0, r2, r1
10007128:	42a0      	cmp	r0, r4
1000712a:	d10b      	bne.n	10007144 <_free_r+0x6c>
1000712c:	6820      	ldr	r0, [r4, #0]
1000712e:	4401      	add	r1, r0
10007130:	1850      	adds	r0, r2, r1
10007132:	4283      	cmp	r3, r0
10007134:	6011      	str	r1, [r2, #0]
10007136:	d1e0      	bne.n	100070fa <_free_r+0x22>
10007138:	6818      	ldr	r0, [r3, #0]
1000713a:	685b      	ldr	r3, [r3, #4]
1000713c:	6053      	str	r3, [r2, #4]
1000713e:	4408      	add	r0, r1
10007140:	6010      	str	r0, [r2, #0]
10007142:	e7da      	b.n	100070fa <_free_r+0x22>
10007144:	d902      	bls.n	1000714c <_free_r+0x74>
10007146:	230c      	movs	r3, #12
10007148:	602b      	str	r3, [r5, #0]
1000714a:	e7d6      	b.n	100070fa <_free_r+0x22>
1000714c:	6820      	ldr	r0, [r4, #0]
1000714e:	1821      	adds	r1, r4, r0
10007150:	428b      	cmp	r3, r1
10007152:	bf04      	itt	eq
10007154:	6819      	ldreq	r1, [r3, #0]
10007156:	685b      	ldreq	r3, [r3, #4]
10007158:	6063      	str	r3, [r4, #4]
1000715a:	bf04      	itt	eq
1000715c:	1809      	addeq	r1, r1, r0
1000715e:	6021      	streq	r1, [r4, #0]
10007160:	6054      	str	r4, [r2, #4]
10007162:	e7ca      	b.n	100070fa <_free_r+0x22>
10007164:	bd38      	pop	{r3, r4, r5, pc}
10007166:	bf00      	nop
10007168:	100202e0 	.word	0x100202e0

1000716c <__sfputc_r>:
1000716c:	6893      	ldr	r3, [r2, #8]
1000716e:	3b01      	subs	r3, #1
10007170:	2b00      	cmp	r3, #0
10007172:	b410      	push	{r4}
10007174:	6093      	str	r3, [r2, #8]
10007176:	da08      	bge.n	1000718a <__sfputc_r+0x1e>
10007178:	6994      	ldr	r4, [r2, #24]
1000717a:	42a3      	cmp	r3, r4
1000717c:	db01      	blt.n	10007182 <__sfputc_r+0x16>
1000717e:	290a      	cmp	r1, #10
10007180:	d103      	bne.n	1000718a <__sfputc_r+0x1e>
10007182:	f85d 4b04 	ldr.w	r4, [sp], #4
10007186:	f000 bb6d 	b.w	10007864 <__swbuf_r>
1000718a:	6813      	ldr	r3, [r2, #0]
1000718c:	1c58      	adds	r0, r3, #1
1000718e:	6010      	str	r0, [r2, #0]
10007190:	7019      	strb	r1, [r3, #0]
10007192:	4608      	mov	r0, r1
10007194:	f85d 4b04 	ldr.w	r4, [sp], #4
10007198:	4770      	bx	lr

1000719a <__sfputs_r>:
1000719a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000719c:	4606      	mov	r6, r0
1000719e:	460f      	mov	r7, r1
100071a0:	4614      	mov	r4, r2
100071a2:	18d5      	adds	r5, r2, r3
100071a4:	42ac      	cmp	r4, r5
100071a6:	d101      	bne.n	100071ac <__sfputs_r+0x12>
100071a8:	2000      	movs	r0, #0
100071aa:	e007      	b.n	100071bc <__sfputs_r+0x22>
100071ac:	f814 1b01 	ldrb.w	r1, [r4], #1
100071b0:	463a      	mov	r2, r7
100071b2:	4630      	mov	r0, r6
100071b4:	f7ff ffda 	bl	1000716c <__sfputc_r>
100071b8:	1c43      	adds	r3, r0, #1
100071ba:	d1f3      	bne.n	100071a4 <__sfputs_r+0xa>
100071bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

100071c0 <_vfiprintf_r>:
100071c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
100071c4:	460d      	mov	r5, r1
100071c6:	b09d      	sub	sp, #116	@ 0x74
100071c8:	4614      	mov	r4, r2
100071ca:	4698      	mov	r8, r3
100071cc:	4606      	mov	r6, r0
100071ce:	b118      	cbz	r0, 100071d8 <_vfiprintf_r+0x18>
100071d0:	6a03      	ldr	r3, [r0, #32]
100071d2:	b90b      	cbnz	r3, 100071d8 <_vfiprintf_r+0x18>
100071d4:	f7ff fe30 	bl	10006e38 <__sinit>
100071d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
100071da:	07d9      	lsls	r1, r3, #31
100071dc:	d405      	bmi.n	100071ea <_vfiprintf_r+0x2a>
100071de:	89ab      	ldrh	r3, [r5, #12]
100071e0:	059a      	lsls	r2, r3, #22
100071e2:	d402      	bmi.n	100071ea <_vfiprintf_r+0x2a>
100071e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
100071e6:	f7ff ff60 	bl	100070aa <__retarget_lock_acquire_recursive>
100071ea:	89ab      	ldrh	r3, [r5, #12]
100071ec:	071b      	lsls	r3, r3, #28
100071ee:	d501      	bpl.n	100071f4 <_vfiprintf_r+0x34>
100071f0:	692b      	ldr	r3, [r5, #16]
100071f2:	b99b      	cbnz	r3, 1000721c <_vfiprintf_r+0x5c>
100071f4:	4629      	mov	r1, r5
100071f6:	4630      	mov	r0, r6
100071f8:	f000 fb72 	bl	100078e0 <__swsetup_r>
100071fc:	b170      	cbz	r0, 1000721c <_vfiprintf_r+0x5c>
100071fe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
10007200:	07dc      	lsls	r4, r3, #31
10007202:	d504      	bpl.n	1000720e <_vfiprintf_r+0x4e>
10007204:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
10007208:	b01d      	add	sp, #116	@ 0x74
1000720a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1000720e:	89ab      	ldrh	r3, [r5, #12]
10007210:	0598      	lsls	r0, r3, #22
10007212:	d4f7      	bmi.n	10007204 <_vfiprintf_r+0x44>
10007214:	6da8      	ldr	r0, [r5, #88]	@ 0x58
10007216:	f7ff ff49 	bl	100070ac <__retarget_lock_release_recursive>
1000721a:	e7f3      	b.n	10007204 <_vfiprintf_r+0x44>
1000721c:	2300      	movs	r3, #0
1000721e:	9309      	str	r3, [sp, #36]	@ 0x24
10007220:	2320      	movs	r3, #32
10007222:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
10007226:	f8cd 800c 	str.w	r8, [sp, #12]
1000722a:	2330      	movs	r3, #48	@ 0x30
1000722c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 100073dc <_vfiprintf_r+0x21c>
10007230:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
10007234:	f04f 0901 	mov.w	r9, #1
10007238:	4623      	mov	r3, r4
1000723a:	469a      	mov	sl, r3
1000723c:	f813 2b01 	ldrb.w	r2, [r3], #1
10007240:	b10a      	cbz	r2, 10007246 <_vfiprintf_r+0x86>
10007242:	2a25      	cmp	r2, #37	@ 0x25
10007244:	d1f9      	bne.n	1000723a <_vfiprintf_r+0x7a>
10007246:	ebba 0b04 	subs.w	fp, sl, r4
1000724a:	d00b      	beq.n	10007264 <_vfiprintf_r+0xa4>
1000724c:	465b      	mov	r3, fp
1000724e:	4622      	mov	r2, r4
10007250:	4629      	mov	r1, r5
10007252:	4630      	mov	r0, r6
10007254:	f7ff ffa1 	bl	1000719a <__sfputs_r>
10007258:	3001      	adds	r0, #1
1000725a:	f000 80a7 	beq.w	100073ac <_vfiprintf_r+0x1ec>
1000725e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
10007260:	445a      	add	r2, fp
10007262:	9209      	str	r2, [sp, #36]	@ 0x24
10007264:	f89a 3000 	ldrb.w	r3, [sl]
10007268:	2b00      	cmp	r3, #0
1000726a:	f000 809f 	beq.w	100073ac <_vfiprintf_r+0x1ec>
1000726e:	2300      	movs	r3, #0
10007270:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
10007274:	e9cd 2305 	strd	r2, r3, [sp, #20]
10007278:	f10a 0a01 	add.w	sl, sl, #1
1000727c:	9304      	str	r3, [sp, #16]
1000727e:	9307      	str	r3, [sp, #28]
10007280:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
10007284:	931a      	str	r3, [sp, #104]	@ 0x68
10007286:	4654      	mov	r4, sl
10007288:	2205      	movs	r2, #5
1000728a:	f814 1b01 	ldrb.w	r1, [r4], #1
1000728e:	4853      	ldr	r0, [pc, #332]	@ (100073dc <_vfiprintf_r+0x21c>)
10007290:	f7f8 fee6 	bl	10000060 <memchr>
10007294:	9a04      	ldr	r2, [sp, #16]
10007296:	b9d8      	cbnz	r0, 100072d0 <_vfiprintf_r+0x110>
10007298:	06d1      	lsls	r1, r2, #27
1000729a:	bf44      	itt	mi
1000729c:	2320      	movmi	r3, #32
1000729e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
100072a2:	0713      	lsls	r3, r2, #28
100072a4:	bf44      	itt	mi
100072a6:	232b      	movmi	r3, #43	@ 0x2b
100072a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
100072ac:	f89a 3000 	ldrb.w	r3, [sl]
100072b0:	2b2a      	cmp	r3, #42	@ 0x2a
100072b2:	d015      	beq.n	100072e0 <_vfiprintf_r+0x120>
100072b4:	9a07      	ldr	r2, [sp, #28]
100072b6:	4654      	mov	r4, sl
100072b8:	2000      	movs	r0, #0
100072ba:	f04f 0c0a 	mov.w	ip, #10
100072be:	4621      	mov	r1, r4
100072c0:	f811 3b01 	ldrb.w	r3, [r1], #1
100072c4:	3b30      	subs	r3, #48	@ 0x30
100072c6:	2b09      	cmp	r3, #9
100072c8:	d94b      	bls.n	10007362 <_vfiprintf_r+0x1a2>
100072ca:	b1b0      	cbz	r0, 100072fa <_vfiprintf_r+0x13a>
100072cc:	9207      	str	r2, [sp, #28]
100072ce:	e014      	b.n	100072fa <_vfiprintf_r+0x13a>
100072d0:	eba0 0308 	sub.w	r3, r0, r8
100072d4:	fa09 f303 	lsl.w	r3, r9, r3
100072d8:	4313      	orrs	r3, r2
100072da:	9304      	str	r3, [sp, #16]
100072dc:	46a2      	mov	sl, r4
100072de:	e7d2      	b.n	10007286 <_vfiprintf_r+0xc6>
100072e0:	9b03      	ldr	r3, [sp, #12]
100072e2:	1d19      	adds	r1, r3, #4
100072e4:	681b      	ldr	r3, [r3, #0]
100072e6:	9103      	str	r1, [sp, #12]
100072e8:	2b00      	cmp	r3, #0
100072ea:	bfbb      	ittet	lt
100072ec:	425b      	neglt	r3, r3
100072ee:	f042 0202 	orrlt.w	r2, r2, #2
100072f2:	9307      	strge	r3, [sp, #28]
100072f4:	9307      	strlt	r3, [sp, #28]
100072f6:	bfb8      	it	lt
100072f8:	9204      	strlt	r2, [sp, #16]
100072fa:	7823      	ldrb	r3, [r4, #0]
100072fc:	2b2e      	cmp	r3, #46	@ 0x2e
100072fe:	d10a      	bne.n	10007316 <_vfiprintf_r+0x156>
10007300:	7863      	ldrb	r3, [r4, #1]
10007302:	2b2a      	cmp	r3, #42	@ 0x2a
10007304:	d132      	bne.n	1000736c <_vfiprintf_r+0x1ac>
10007306:	9b03      	ldr	r3, [sp, #12]
10007308:	1d1a      	adds	r2, r3, #4
1000730a:	681b      	ldr	r3, [r3, #0]
1000730c:	9203      	str	r2, [sp, #12]
1000730e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
10007312:	3402      	adds	r4, #2
10007314:	9305      	str	r3, [sp, #20]
10007316:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 100073ec <_vfiprintf_r+0x22c>
1000731a:	7821      	ldrb	r1, [r4, #0]
1000731c:	2203      	movs	r2, #3
1000731e:	4650      	mov	r0, sl
10007320:	f7f8 fe9e 	bl	10000060 <memchr>
10007324:	b138      	cbz	r0, 10007336 <_vfiprintf_r+0x176>
10007326:	9b04      	ldr	r3, [sp, #16]
10007328:	eba0 000a 	sub.w	r0, r0, sl
1000732c:	2240      	movs	r2, #64	@ 0x40
1000732e:	4082      	lsls	r2, r0
10007330:	4313      	orrs	r3, r2
10007332:	3401      	adds	r4, #1
10007334:	9304      	str	r3, [sp, #16]
10007336:	f814 1b01 	ldrb.w	r1, [r4], #1
1000733a:	4829      	ldr	r0, [pc, #164]	@ (100073e0 <_vfiprintf_r+0x220>)
1000733c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
10007340:	2206      	movs	r2, #6
10007342:	f7f8 fe8d 	bl	10000060 <memchr>
10007346:	2800      	cmp	r0, #0
10007348:	d03f      	beq.n	100073ca <_vfiprintf_r+0x20a>
1000734a:	4b26      	ldr	r3, [pc, #152]	@ (100073e4 <_vfiprintf_r+0x224>)
1000734c:	bb1b      	cbnz	r3, 10007396 <_vfiprintf_r+0x1d6>
1000734e:	9b03      	ldr	r3, [sp, #12]
10007350:	3307      	adds	r3, #7
10007352:	f023 0307 	bic.w	r3, r3, #7
10007356:	3308      	adds	r3, #8
10007358:	9303      	str	r3, [sp, #12]
1000735a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1000735c:	443b      	add	r3, r7
1000735e:	9309      	str	r3, [sp, #36]	@ 0x24
10007360:	e76a      	b.n	10007238 <_vfiprintf_r+0x78>
10007362:	fb0c 3202 	mla	r2, ip, r2, r3
10007366:	460c      	mov	r4, r1
10007368:	2001      	movs	r0, #1
1000736a:	e7a8      	b.n	100072be <_vfiprintf_r+0xfe>
1000736c:	2300      	movs	r3, #0
1000736e:	3401      	adds	r4, #1
10007370:	9305      	str	r3, [sp, #20]
10007372:	4619      	mov	r1, r3
10007374:	f04f 0c0a 	mov.w	ip, #10
10007378:	4620      	mov	r0, r4
1000737a:	f810 2b01 	ldrb.w	r2, [r0], #1
1000737e:	3a30      	subs	r2, #48	@ 0x30
10007380:	2a09      	cmp	r2, #9
10007382:	d903      	bls.n	1000738c <_vfiprintf_r+0x1cc>
10007384:	2b00      	cmp	r3, #0
10007386:	d0c6      	beq.n	10007316 <_vfiprintf_r+0x156>
10007388:	9105      	str	r1, [sp, #20]
1000738a:	e7c4      	b.n	10007316 <_vfiprintf_r+0x156>
1000738c:	fb0c 2101 	mla	r1, ip, r1, r2
10007390:	4604      	mov	r4, r0
10007392:	2301      	movs	r3, #1
10007394:	e7f0      	b.n	10007378 <_vfiprintf_r+0x1b8>
10007396:	ab03      	add	r3, sp, #12
10007398:	9300      	str	r3, [sp, #0]
1000739a:	462a      	mov	r2, r5
1000739c:	4b12      	ldr	r3, [pc, #72]	@ (100073e8 <_vfiprintf_r+0x228>)
1000739e:	a904      	add	r1, sp, #16
100073a0:	4630      	mov	r0, r6
100073a2:	f3af 8000 	nop.w
100073a6:	4607      	mov	r7, r0
100073a8:	1c78      	adds	r0, r7, #1
100073aa:	d1d6      	bne.n	1000735a <_vfiprintf_r+0x19a>
100073ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
100073ae:	07d9      	lsls	r1, r3, #31
100073b0:	d405      	bmi.n	100073be <_vfiprintf_r+0x1fe>
100073b2:	89ab      	ldrh	r3, [r5, #12]
100073b4:	059a      	lsls	r2, r3, #22
100073b6:	d402      	bmi.n	100073be <_vfiprintf_r+0x1fe>
100073b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
100073ba:	f7ff fe77 	bl	100070ac <__retarget_lock_release_recursive>
100073be:	89ab      	ldrh	r3, [r5, #12]
100073c0:	065b      	lsls	r3, r3, #25
100073c2:	f53f af1f 	bmi.w	10007204 <_vfiprintf_r+0x44>
100073c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
100073c8:	e71e      	b.n	10007208 <_vfiprintf_r+0x48>
100073ca:	ab03      	add	r3, sp, #12
100073cc:	9300      	str	r3, [sp, #0]
100073ce:	462a      	mov	r2, r5
100073d0:	4b05      	ldr	r3, [pc, #20]	@ (100073e8 <_vfiprintf_r+0x228>)
100073d2:	a904      	add	r1, sp, #16
100073d4:	4630      	mov	r0, r6
100073d6:	f000 f879 	bl	100074cc <_printf_i>
100073da:	e7e4      	b.n	100073a6 <_vfiprintf_r+0x1e6>
100073dc:	10007f21 	.word	0x10007f21
100073e0:	10007f2b 	.word	0x10007f2b
100073e4:	00000000 	.word	0x00000000
100073e8:	1000719b 	.word	0x1000719b
100073ec:	10007f27 	.word	0x10007f27

100073f0 <_printf_common>:
100073f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
100073f4:	4616      	mov	r6, r2
100073f6:	4698      	mov	r8, r3
100073f8:	688a      	ldr	r2, [r1, #8]
100073fa:	690b      	ldr	r3, [r1, #16]
100073fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
10007400:	4293      	cmp	r3, r2
10007402:	bfb8      	it	lt
10007404:	4613      	movlt	r3, r2
10007406:	6033      	str	r3, [r6, #0]
10007408:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
1000740c:	4607      	mov	r7, r0
1000740e:	460c      	mov	r4, r1
10007410:	b10a      	cbz	r2, 10007416 <_printf_common+0x26>
10007412:	3301      	adds	r3, #1
10007414:	6033      	str	r3, [r6, #0]
10007416:	6823      	ldr	r3, [r4, #0]
10007418:	0699      	lsls	r1, r3, #26
1000741a:	bf42      	ittt	mi
1000741c:	6833      	ldrmi	r3, [r6, #0]
1000741e:	3302      	addmi	r3, #2
10007420:	6033      	strmi	r3, [r6, #0]
10007422:	6825      	ldr	r5, [r4, #0]
10007424:	f015 0506 	ands.w	r5, r5, #6
10007428:	d106      	bne.n	10007438 <_printf_common+0x48>
1000742a:	f104 0a19 	add.w	sl, r4, #25
1000742e:	68e3      	ldr	r3, [r4, #12]
10007430:	6832      	ldr	r2, [r6, #0]
10007432:	1a9b      	subs	r3, r3, r2
10007434:	42ab      	cmp	r3, r5
10007436:	dc26      	bgt.n	10007486 <_printf_common+0x96>
10007438:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
1000743c:	6822      	ldr	r2, [r4, #0]
1000743e:	3b00      	subs	r3, #0
10007440:	bf18      	it	ne
10007442:	2301      	movne	r3, #1
10007444:	0692      	lsls	r2, r2, #26
10007446:	d42b      	bmi.n	100074a0 <_printf_common+0xb0>
10007448:	f104 0243 	add.w	r2, r4, #67	@ 0x43
1000744c:	4641      	mov	r1, r8
1000744e:	4638      	mov	r0, r7
10007450:	47c8      	blx	r9
10007452:	3001      	adds	r0, #1
10007454:	d01e      	beq.n	10007494 <_printf_common+0xa4>
10007456:	6823      	ldr	r3, [r4, #0]
10007458:	6922      	ldr	r2, [r4, #16]
1000745a:	f003 0306 	and.w	r3, r3, #6
1000745e:	2b04      	cmp	r3, #4
10007460:	bf02      	ittt	eq
10007462:	68e5      	ldreq	r5, [r4, #12]
10007464:	6833      	ldreq	r3, [r6, #0]
10007466:	1aed      	subeq	r5, r5, r3
10007468:	68a3      	ldr	r3, [r4, #8]
1000746a:	bf0c      	ite	eq
1000746c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
10007470:	2500      	movne	r5, #0
10007472:	4293      	cmp	r3, r2
10007474:	bfc4      	itt	gt
10007476:	1a9b      	subgt	r3, r3, r2
10007478:	18ed      	addgt	r5, r5, r3
1000747a:	2600      	movs	r6, #0
1000747c:	341a      	adds	r4, #26
1000747e:	42b5      	cmp	r5, r6
10007480:	d11a      	bne.n	100074b8 <_printf_common+0xc8>
10007482:	2000      	movs	r0, #0
10007484:	e008      	b.n	10007498 <_printf_common+0xa8>
10007486:	2301      	movs	r3, #1
10007488:	4652      	mov	r2, sl
1000748a:	4641      	mov	r1, r8
1000748c:	4638      	mov	r0, r7
1000748e:	47c8      	blx	r9
10007490:	3001      	adds	r0, #1
10007492:	d103      	bne.n	1000749c <_printf_common+0xac>
10007494:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
10007498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1000749c:	3501      	adds	r5, #1
1000749e:	e7c6      	b.n	1000742e <_printf_common+0x3e>
100074a0:	18e1      	adds	r1, r4, r3
100074a2:	1c5a      	adds	r2, r3, #1
100074a4:	2030      	movs	r0, #48	@ 0x30
100074a6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
100074aa:	4422      	add	r2, r4
100074ac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
100074b0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
100074b4:	3302      	adds	r3, #2
100074b6:	e7c7      	b.n	10007448 <_printf_common+0x58>
100074b8:	2301      	movs	r3, #1
100074ba:	4622      	mov	r2, r4
100074bc:	4641      	mov	r1, r8
100074be:	4638      	mov	r0, r7
100074c0:	47c8      	blx	r9
100074c2:	3001      	adds	r0, #1
100074c4:	d0e6      	beq.n	10007494 <_printf_common+0xa4>
100074c6:	3601      	adds	r6, #1
100074c8:	e7d9      	b.n	1000747e <_printf_common+0x8e>
	...

100074cc <_printf_i>:
100074cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
100074d0:	7e0f      	ldrb	r7, [r1, #24]
100074d2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
100074d4:	2f78      	cmp	r7, #120	@ 0x78
100074d6:	4691      	mov	r9, r2
100074d8:	4680      	mov	r8, r0
100074da:	460c      	mov	r4, r1
100074dc:	469a      	mov	sl, r3
100074de:	f101 0243 	add.w	r2, r1, #67	@ 0x43
100074e2:	d807      	bhi.n	100074f4 <_printf_i+0x28>
100074e4:	2f62      	cmp	r7, #98	@ 0x62
100074e6:	d80a      	bhi.n	100074fe <_printf_i+0x32>
100074e8:	2f00      	cmp	r7, #0
100074ea:	f000 80d2 	beq.w	10007692 <_printf_i+0x1c6>
100074ee:	2f58      	cmp	r7, #88	@ 0x58
100074f0:	f000 80b9 	beq.w	10007666 <_printf_i+0x19a>
100074f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
100074f8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
100074fc:	e03a      	b.n	10007574 <_printf_i+0xa8>
100074fe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
10007502:	2b15      	cmp	r3, #21
10007504:	d8f6      	bhi.n	100074f4 <_printf_i+0x28>
10007506:	a101      	add	r1, pc, #4	@ (adr r1, 1000750c <_printf_i+0x40>)
10007508:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
1000750c:	10007565 	.word	0x10007565
10007510:	10007579 	.word	0x10007579
10007514:	100074f5 	.word	0x100074f5
10007518:	100074f5 	.word	0x100074f5
1000751c:	100074f5 	.word	0x100074f5
10007520:	100074f5 	.word	0x100074f5
10007524:	10007579 	.word	0x10007579
10007528:	100074f5 	.word	0x100074f5
1000752c:	100074f5 	.word	0x100074f5
10007530:	100074f5 	.word	0x100074f5
10007534:	100074f5 	.word	0x100074f5
10007538:	10007679 	.word	0x10007679
1000753c:	100075a3 	.word	0x100075a3
10007540:	10007633 	.word	0x10007633
10007544:	100074f5 	.word	0x100074f5
10007548:	100074f5 	.word	0x100074f5
1000754c:	1000769b 	.word	0x1000769b
10007550:	100074f5 	.word	0x100074f5
10007554:	100075a3 	.word	0x100075a3
10007558:	100074f5 	.word	0x100074f5
1000755c:	100074f5 	.word	0x100074f5
10007560:	1000763b 	.word	0x1000763b
10007564:	6833      	ldr	r3, [r6, #0]
10007566:	1d1a      	adds	r2, r3, #4
10007568:	681b      	ldr	r3, [r3, #0]
1000756a:	6032      	str	r2, [r6, #0]
1000756c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
10007570:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
10007574:	2301      	movs	r3, #1
10007576:	e09d      	b.n	100076b4 <_printf_i+0x1e8>
10007578:	6833      	ldr	r3, [r6, #0]
1000757a:	6820      	ldr	r0, [r4, #0]
1000757c:	1d19      	adds	r1, r3, #4
1000757e:	6031      	str	r1, [r6, #0]
10007580:	0606      	lsls	r6, r0, #24
10007582:	d501      	bpl.n	10007588 <_printf_i+0xbc>
10007584:	681d      	ldr	r5, [r3, #0]
10007586:	e003      	b.n	10007590 <_printf_i+0xc4>
10007588:	0645      	lsls	r5, r0, #25
1000758a:	d5fb      	bpl.n	10007584 <_printf_i+0xb8>
1000758c:	f9b3 5000 	ldrsh.w	r5, [r3]
10007590:	2d00      	cmp	r5, #0
10007592:	da03      	bge.n	1000759c <_printf_i+0xd0>
10007594:	232d      	movs	r3, #45	@ 0x2d
10007596:	426d      	negs	r5, r5
10007598:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
1000759c:	4859      	ldr	r0, [pc, #356]	@ (10007704 <_printf_i+0x238>)
1000759e:	230a      	movs	r3, #10
100075a0:	e011      	b.n	100075c6 <_printf_i+0xfa>
100075a2:	6821      	ldr	r1, [r4, #0]
100075a4:	6833      	ldr	r3, [r6, #0]
100075a6:	0608      	lsls	r0, r1, #24
100075a8:	f853 5b04 	ldr.w	r5, [r3], #4
100075ac:	d402      	bmi.n	100075b4 <_printf_i+0xe8>
100075ae:	0649      	lsls	r1, r1, #25
100075b0:	bf48      	it	mi
100075b2:	b2ad      	uxthmi	r5, r5
100075b4:	2f6f      	cmp	r7, #111	@ 0x6f
100075b6:	4853      	ldr	r0, [pc, #332]	@ (10007704 <_printf_i+0x238>)
100075b8:	6033      	str	r3, [r6, #0]
100075ba:	bf14      	ite	ne
100075bc:	230a      	movne	r3, #10
100075be:	2308      	moveq	r3, #8
100075c0:	2100      	movs	r1, #0
100075c2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
100075c6:	6866      	ldr	r6, [r4, #4]
100075c8:	60a6      	str	r6, [r4, #8]
100075ca:	2e00      	cmp	r6, #0
100075cc:	bfa2      	ittt	ge
100075ce:	6821      	ldrge	r1, [r4, #0]
100075d0:	f021 0104 	bicge.w	r1, r1, #4
100075d4:	6021      	strge	r1, [r4, #0]
100075d6:	b90d      	cbnz	r5, 100075dc <_printf_i+0x110>
100075d8:	2e00      	cmp	r6, #0
100075da:	d04b      	beq.n	10007674 <_printf_i+0x1a8>
100075dc:	4616      	mov	r6, r2
100075de:	fbb5 f1f3 	udiv	r1, r5, r3
100075e2:	fb03 5711 	mls	r7, r3, r1, r5
100075e6:	5dc7      	ldrb	r7, [r0, r7]
100075e8:	f806 7d01 	strb.w	r7, [r6, #-1]!
100075ec:	462f      	mov	r7, r5
100075ee:	42bb      	cmp	r3, r7
100075f0:	460d      	mov	r5, r1
100075f2:	d9f4      	bls.n	100075de <_printf_i+0x112>
100075f4:	2b08      	cmp	r3, #8
100075f6:	d10b      	bne.n	10007610 <_printf_i+0x144>
100075f8:	6823      	ldr	r3, [r4, #0]
100075fa:	07df      	lsls	r7, r3, #31
100075fc:	d508      	bpl.n	10007610 <_printf_i+0x144>
100075fe:	6923      	ldr	r3, [r4, #16]
10007600:	6861      	ldr	r1, [r4, #4]
10007602:	4299      	cmp	r1, r3
10007604:	bfde      	ittt	le
10007606:	2330      	movle	r3, #48	@ 0x30
10007608:	f806 3c01 	strble.w	r3, [r6, #-1]
1000760c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
10007610:	1b92      	subs	r2, r2, r6
10007612:	6122      	str	r2, [r4, #16]
10007614:	f8cd a000 	str.w	sl, [sp]
10007618:	464b      	mov	r3, r9
1000761a:	aa03      	add	r2, sp, #12
1000761c:	4621      	mov	r1, r4
1000761e:	4640      	mov	r0, r8
10007620:	f7ff fee6 	bl	100073f0 <_printf_common>
10007624:	3001      	adds	r0, #1
10007626:	d14a      	bne.n	100076be <_printf_i+0x1f2>
10007628:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
1000762c:	b004      	add	sp, #16
1000762e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
10007632:	6823      	ldr	r3, [r4, #0]
10007634:	f043 0320 	orr.w	r3, r3, #32
10007638:	6023      	str	r3, [r4, #0]
1000763a:	4833      	ldr	r0, [pc, #204]	@ (10007708 <_printf_i+0x23c>)
1000763c:	2778      	movs	r7, #120	@ 0x78
1000763e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
10007642:	6823      	ldr	r3, [r4, #0]
10007644:	6831      	ldr	r1, [r6, #0]
10007646:	061f      	lsls	r7, r3, #24
10007648:	f851 5b04 	ldr.w	r5, [r1], #4
1000764c:	d402      	bmi.n	10007654 <_printf_i+0x188>
1000764e:	065f      	lsls	r7, r3, #25
10007650:	bf48      	it	mi
10007652:	b2ad      	uxthmi	r5, r5
10007654:	6031      	str	r1, [r6, #0]
10007656:	07d9      	lsls	r1, r3, #31
10007658:	bf44      	itt	mi
1000765a:	f043 0320 	orrmi.w	r3, r3, #32
1000765e:	6023      	strmi	r3, [r4, #0]
10007660:	b11d      	cbz	r5, 1000766a <_printf_i+0x19e>
10007662:	2310      	movs	r3, #16
10007664:	e7ac      	b.n	100075c0 <_printf_i+0xf4>
10007666:	4827      	ldr	r0, [pc, #156]	@ (10007704 <_printf_i+0x238>)
10007668:	e7e9      	b.n	1000763e <_printf_i+0x172>
1000766a:	6823      	ldr	r3, [r4, #0]
1000766c:	f023 0320 	bic.w	r3, r3, #32
10007670:	6023      	str	r3, [r4, #0]
10007672:	e7f6      	b.n	10007662 <_printf_i+0x196>
10007674:	4616      	mov	r6, r2
10007676:	e7bd      	b.n	100075f4 <_printf_i+0x128>
10007678:	6833      	ldr	r3, [r6, #0]
1000767a:	6825      	ldr	r5, [r4, #0]
1000767c:	6961      	ldr	r1, [r4, #20]
1000767e:	1d18      	adds	r0, r3, #4
10007680:	6030      	str	r0, [r6, #0]
10007682:	062e      	lsls	r6, r5, #24
10007684:	681b      	ldr	r3, [r3, #0]
10007686:	d501      	bpl.n	1000768c <_printf_i+0x1c0>
10007688:	6019      	str	r1, [r3, #0]
1000768a:	e002      	b.n	10007692 <_printf_i+0x1c6>
1000768c:	0668      	lsls	r0, r5, #25
1000768e:	d5fb      	bpl.n	10007688 <_printf_i+0x1bc>
10007690:	8019      	strh	r1, [r3, #0]
10007692:	2300      	movs	r3, #0
10007694:	6123      	str	r3, [r4, #16]
10007696:	4616      	mov	r6, r2
10007698:	e7bc      	b.n	10007614 <_printf_i+0x148>
1000769a:	6833      	ldr	r3, [r6, #0]
1000769c:	1d1a      	adds	r2, r3, #4
1000769e:	6032      	str	r2, [r6, #0]
100076a0:	681e      	ldr	r6, [r3, #0]
100076a2:	6862      	ldr	r2, [r4, #4]
100076a4:	2100      	movs	r1, #0
100076a6:	4630      	mov	r0, r6
100076a8:	f7f8 fcda 	bl	10000060 <memchr>
100076ac:	b108      	cbz	r0, 100076b2 <_printf_i+0x1e6>
100076ae:	1b80      	subs	r0, r0, r6
100076b0:	6060      	str	r0, [r4, #4]
100076b2:	6863      	ldr	r3, [r4, #4]
100076b4:	6123      	str	r3, [r4, #16]
100076b6:	2300      	movs	r3, #0
100076b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
100076bc:	e7aa      	b.n	10007614 <_printf_i+0x148>
100076be:	6923      	ldr	r3, [r4, #16]
100076c0:	4632      	mov	r2, r6
100076c2:	4649      	mov	r1, r9
100076c4:	4640      	mov	r0, r8
100076c6:	47d0      	blx	sl
100076c8:	3001      	adds	r0, #1
100076ca:	d0ad      	beq.n	10007628 <_printf_i+0x15c>
100076cc:	6823      	ldr	r3, [r4, #0]
100076ce:	079b      	lsls	r3, r3, #30
100076d0:	d413      	bmi.n	100076fa <_printf_i+0x22e>
100076d2:	68e0      	ldr	r0, [r4, #12]
100076d4:	9b03      	ldr	r3, [sp, #12]
100076d6:	4298      	cmp	r0, r3
100076d8:	bfb8      	it	lt
100076da:	4618      	movlt	r0, r3
100076dc:	e7a6      	b.n	1000762c <_printf_i+0x160>
100076de:	2301      	movs	r3, #1
100076e0:	4632      	mov	r2, r6
100076e2:	4649      	mov	r1, r9
100076e4:	4640      	mov	r0, r8
100076e6:	47d0      	blx	sl
100076e8:	3001      	adds	r0, #1
100076ea:	d09d      	beq.n	10007628 <_printf_i+0x15c>
100076ec:	3501      	adds	r5, #1
100076ee:	68e3      	ldr	r3, [r4, #12]
100076f0:	9903      	ldr	r1, [sp, #12]
100076f2:	1a5b      	subs	r3, r3, r1
100076f4:	42ab      	cmp	r3, r5
100076f6:	dcf2      	bgt.n	100076de <_printf_i+0x212>
100076f8:	e7eb      	b.n	100076d2 <_printf_i+0x206>
100076fa:	2500      	movs	r5, #0
100076fc:	f104 0619 	add.w	r6, r4, #25
10007700:	e7f5      	b.n	100076ee <_printf_i+0x222>
10007702:	bf00      	nop
10007704:	10007f32 	.word	0x10007f32
10007708:	10007f43 	.word	0x10007f43

1000770c <__sflush_r>:
1000770c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
10007710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
10007714:	0716      	lsls	r6, r2, #28
10007716:	4605      	mov	r5, r0
10007718:	460c      	mov	r4, r1
1000771a:	d454      	bmi.n	100077c6 <__sflush_r+0xba>
1000771c:	684b      	ldr	r3, [r1, #4]
1000771e:	2b00      	cmp	r3, #0
10007720:	dc02      	bgt.n	10007728 <__sflush_r+0x1c>
10007722:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
10007724:	2b00      	cmp	r3, #0
10007726:	dd48      	ble.n	100077ba <__sflush_r+0xae>
10007728:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
1000772a:	2e00      	cmp	r6, #0
1000772c:	d045      	beq.n	100077ba <__sflush_r+0xae>
1000772e:	2300      	movs	r3, #0
10007730:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
10007734:	682f      	ldr	r7, [r5, #0]
10007736:	6a21      	ldr	r1, [r4, #32]
10007738:	602b      	str	r3, [r5, #0]
1000773a:	d030      	beq.n	1000779e <__sflush_r+0x92>
1000773c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
1000773e:	89a3      	ldrh	r3, [r4, #12]
10007740:	0759      	lsls	r1, r3, #29
10007742:	d505      	bpl.n	10007750 <__sflush_r+0x44>
10007744:	6863      	ldr	r3, [r4, #4]
10007746:	1ad2      	subs	r2, r2, r3
10007748:	6b63      	ldr	r3, [r4, #52]	@ 0x34
1000774a:	b10b      	cbz	r3, 10007750 <__sflush_r+0x44>
1000774c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
1000774e:	1ad2      	subs	r2, r2, r3
10007750:	2300      	movs	r3, #0
10007752:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
10007754:	6a21      	ldr	r1, [r4, #32]
10007756:	4628      	mov	r0, r5
10007758:	47b0      	blx	r6
1000775a:	1c43      	adds	r3, r0, #1
1000775c:	89a3      	ldrh	r3, [r4, #12]
1000775e:	d106      	bne.n	1000776e <__sflush_r+0x62>
10007760:	6829      	ldr	r1, [r5, #0]
10007762:	291d      	cmp	r1, #29
10007764:	d82b      	bhi.n	100077be <__sflush_r+0xb2>
10007766:	4a2a      	ldr	r2, [pc, #168]	@ (10007810 <__sflush_r+0x104>)
10007768:	410a      	asrs	r2, r1
1000776a:	07d6      	lsls	r6, r2, #31
1000776c:	d427      	bmi.n	100077be <__sflush_r+0xb2>
1000776e:	2200      	movs	r2, #0
10007770:	6062      	str	r2, [r4, #4]
10007772:	04d9      	lsls	r1, r3, #19
10007774:	6922      	ldr	r2, [r4, #16]
10007776:	6022      	str	r2, [r4, #0]
10007778:	d504      	bpl.n	10007784 <__sflush_r+0x78>
1000777a:	1c42      	adds	r2, r0, #1
1000777c:	d101      	bne.n	10007782 <__sflush_r+0x76>
1000777e:	682b      	ldr	r3, [r5, #0]
10007780:	b903      	cbnz	r3, 10007784 <__sflush_r+0x78>
10007782:	6560      	str	r0, [r4, #84]	@ 0x54
10007784:	6b61      	ldr	r1, [r4, #52]	@ 0x34
10007786:	602f      	str	r7, [r5, #0]
10007788:	b1b9      	cbz	r1, 100077ba <__sflush_r+0xae>
1000778a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
1000778e:	4299      	cmp	r1, r3
10007790:	d002      	beq.n	10007798 <__sflush_r+0x8c>
10007792:	4628      	mov	r0, r5
10007794:	f7ff fca0 	bl	100070d8 <_free_r>
10007798:	2300      	movs	r3, #0
1000779a:	6363      	str	r3, [r4, #52]	@ 0x34
1000779c:	e00d      	b.n	100077ba <__sflush_r+0xae>
1000779e:	2301      	movs	r3, #1
100077a0:	4628      	mov	r0, r5
100077a2:	47b0      	blx	r6
100077a4:	4602      	mov	r2, r0
100077a6:	1c50      	adds	r0, r2, #1
100077a8:	d1c9      	bne.n	1000773e <__sflush_r+0x32>
100077aa:	682b      	ldr	r3, [r5, #0]
100077ac:	2b00      	cmp	r3, #0
100077ae:	d0c6      	beq.n	1000773e <__sflush_r+0x32>
100077b0:	2b1d      	cmp	r3, #29
100077b2:	d001      	beq.n	100077b8 <__sflush_r+0xac>
100077b4:	2b16      	cmp	r3, #22
100077b6:	d11e      	bne.n	100077f6 <__sflush_r+0xea>
100077b8:	602f      	str	r7, [r5, #0]
100077ba:	2000      	movs	r0, #0
100077bc:	e022      	b.n	10007804 <__sflush_r+0xf8>
100077be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
100077c2:	b21b      	sxth	r3, r3
100077c4:	e01b      	b.n	100077fe <__sflush_r+0xf2>
100077c6:	690f      	ldr	r7, [r1, #16]
100077c8:	2f00      	cmp	r7, #0
100077ca:	d0f6      	beq.n	100077ba <__sflush_r+0xae>
100077cc:	0793      	lsls	r3, r2, #30
100077ce:	680e      	ldr	r6, [r1, #0]
100077d0:	bf08      	it	eq
100077d2:	694b      	ldreq	r3, [r1, #20]
100077d4:	600f      	str	r7, [r1, #0]
100077d6:	bf18      	it	ne
100077d8:	2300      	movne	r3, #0
100077da:	eba6 0807 	sub.w	r8, r6, r7
100077de:	608b      	str	r3, [r1, #8]
100077e0:	f1b8 0f00 	cmp.w	r8, #0
100077e4:	dde9      	ble.n	100077ba <__sflush_r+0xae>
100077e6:	6a21      	ldr	r1, [r4, #32]
100077e8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
100077ea:	4643      	mov	r3, r8
100077ec:	463a      	mov	r2, r7
100077ee:	4628      	mov	r0, r5
100077f0:	47b0      	blx	r6
100077f2:	2800      	cmp	r0, #0
100077f4:	dc08      	bgt.n	10007808 <__sflush_r+0xfc>
100077f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
100077fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
100077fe:	81a3      	strh	r3, [r4, #12]
10007800:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
10007804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
10007808:	4407      	add	r7, r0
1000780a:	eba8 0800 	sub.w	r8, r8, r0
1000780e:	e7e7      	b.n	100077e0 <__sflush_r+0xd4>
10007810:	dfbffffe 	.word	0xdfbffffe

10007814 <_fflush_r>:
10007814:	b538      	push	{r3, r4, r5, lr}
10007816:	690b      	ldr	r3, [r1, #16]
10007818:	4605      	mov	r5, r0
1000781a:	460c      	mov	r4, r1
1000781c:	b913      	cbnz	r3, 10007824 <_fflush_r+0x10>
1000781e:	2500      	movs	r5, #0
10007820:	4628      	mov	r0, r5
10007822:	bd38      	pop	{r3, r4, r5, pc}
10007824:	b118      	cbz	r0, 1000782e <_fflush_r+0x1a>
10007826:	6a03      	ldr	r3, [r0, #32]
10007828:	b90b      	cbnz	r3, 1000782e <_fflush_r+0x1a>
1000782a:	f7ff fb05 	bl	10006e38 <__sinit>
1000782e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
10007832:	2b00      	cmp	r3, #0
10007834:	d0f3      	beq.n	1000781e <_fflush_r+0xa>
10007836:	6e62      	ldr	r2, [r4, #100]	@ 0x64
10007838:	07d0      	lsls	r0, r2, #31
1000783a:	d404      	bmi.n	10007846 <_fflush_r+0x32>
1000783c:	0599      	lsls	r1, r3, #22
1000783e:	d402      	bmi.n	10007846 <_fflush_r+0x32>
10007840:	6da0      	ldr	r0, [r4, #88]	@ 0x58
10007842:	f7ff fc32 	bl	100070aa <__retarget_lock_acquire_recursive>
10007846:	4628      	mov	r0, r5
10007848:	4621      	mov	r1, r4
1000784a:	f7ff ff5f 	bl	1000770c <__sflush_r>
1000784e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
10007850:	07da      	lsls	r2, r3, #31
10007852:	4605      	mov	r5, r0
10007854:	d4e4      	bmi.n	10007820 <_fflush_r+0xc>
10007856:	89a3      	ldrh	r3, [r4, #12]
10007858:	059b      	lsls	r3, r3, #22
1000785a:	d4e1      	bmi.n	10007820 <_fflush_r+0xc>
1000785c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
1000785e:	f7ff fc25 	bl	100070ac <__retarget_lock_release_recursive>
10007862:	e7dd      	b.n	10007820 <_fflush_r+0xc>

10007864 <__swbuf_r>:
10007864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10007866:	460e      	mov	r6, r1
10007868:	4614      	mov	r4, r2
1000786a:	4605      	mov	r5, r0
1000786c:	b118      	cbz	r0, 10007876 <__swbuf_r+0x12>
1000786e:	6a03      	ldr	r3, [r0, #32]
10007870:	b90b      	cbnz	r3, 10007876 <__swbuf_r+0x12>
10007872:	f7ff fae1 	bl	10006e38 <__sinit>
10007876:	69a3      	ldr	r3, [r4, #24]
10007878:	60a3      	str	r3, [r4, #8]
1000787a:	89a3      	ldrh	r3, [r4, #12]
1000787c:	071a      	lsls	r2, r3, #28
1000787e:	d501      	bpl.n	10007884 <__swbuf_r+0x20>
10007880:	6923      	ldr	r3, [r4, #16]
10007882:	b943      	cbnz	r3, 10007896 <__swbuf_r+0x32>
10007884:	4621      	mov	r1, r4
10007886:	4628      	mov	r0, r5
10007888:	f000 f82a 	bl	100078e0 <__swsetup_r>
1000788c:	b118      	cbz	r0, 10007896 <__swbuf_r+0x32>
1000788e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
10007892:	4638      	mov	r0, r7
10007894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10007896:	6823      	ldr	r3, [r4, #0]
10007898:	6922      	ldr	r2, [r4, #16]
1000789a:	1a98      	subs	r0, r3, r2
1000789c:	6963      	ldr	r3, [r4, #20]
1000789e:	b2f6      	uxtb	r6, r6
100078a0:	4283      	cmp	r3, r0
100078a2:	4637      	mov	r7, r6
100078a4:	dc05      	bgt.n	100078b2 <__swbuf_r+0x4e>
100078a6:	4621      	mov	r1, r4
100078a8:	4628      	mov	r0, r5
100078aa:	f7ff ffb3 	bl	10007814 <_fflush_r>
100078ae:	2800      	cmp	r0, #0
100078b0:	d1ed      	bne.n	1000788e <__swbuf_r+0x2a>
100078b2:	68a3      	ldr	r3, [r4, #8]
100078b4:	3b01      	subs	r3, #1
100078b6:	60a3      	str	r3, [r4, #8]
100078b8:	6823      	ldr	r3, [r4, #0]
100078ba:	1c5a      	adds	r2, r3, #1
100078bc:	6022      	str	r2, [r4, #0]
100078be:	701e      	strb	r6, [r3, #0]
100078c0:	6962      	ldr	r2, [r4, #20]
100078c2:	1c43      	adds	r3, r0, #1
100078c4:	429a      	cmp	r2, r3
100078c6:	d004      	beq.n	100078d2 <__swbuf_r+0x6e>
100078c8:	89a3      	ldrh	r3, [r4, #12]
100078ca:	07db      	lsls	r3, r3, #31
100078cc:	d5e1      	bpl.n	10007892 <__swbuf_r+0x2e>
100078ce:	2e0a      	cmp	r6, #10
100078d0:	d1df      	bne.n	10007892 <__swbuf_r+0x2e>
100078d2:	4621      	mov	r1, r4
100078d4:	4628      	mov	r0, r5
100078d6:	f7ff ff9d 	bl	10007814 <_fflush_r>
100078da:	2800      	cmp	r0, #0
100078dc:	d0d9      	beq.n	10007892 <__swbuf_r+0x2e>
100078de:	e7d6      	b.n	1000788e <__swbuf_r+0x2a>

100078e0 <__swsetup_r>:
100078e0:	b538      	push	{r3, r4, r5, lr}
100078e2:	4b29      	ldr	r3, [pc, #164]	@ (10007988 <__swsetup_r+0xa8>)
100078e4:	4605      	mov	r5, r0
100078e6:	6818      	ldr	r0, [r3, #0]
100078e8:	460c      	mov	r4, r1
100078ea:	b118      	cbz	r0, 100078f4 <__swsetup_r+0x14>
100078ec:	6a03      	ldr	r3, [r0, #32]
100078ee:	b90b      	cbnz	r3, 100078f4 <__swsetup_r+0x14>
100078f0:	f7ff faa2 	bl	10006e38 <__sinit>
100078f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
100078f8:	0719      	lsls	r1, r3, #28
100078fa:	d422      	bmi.n	10007942 <__swsetup_r+0x62>
100078fc:	06da      	lsls	r2, r3, #27
100078fe:	d407      	bmi.n	10007910 <__swsetup_r+0x30>
10007900:	2209      	movs	r2, #9
10007902:	602a      	str	r2, [r5, #0]
10007904:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10007908:	81a3      	strh	r3, [r4, #12]
1000790a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
1000790e:	e033      	b.n	10007978 <__swsetup_r+0x98>
10007910:	0758      	lsls	r0, r3, #29
10007912:	d512      	bpl.n	1000793a <__swsetup_r+0x5a>
10007914:	6b61      	ldr	r1, [r4, #52]	@ 0x34
10007916:	b141      	cbz	r1, 1000792a <__swsetup_r+0x4a>
10007918:	f104 0344 	add.w	r3, r4, #68	@ 0x44
1000791c:	4299      	cmp	r1, r3
1000791e:	d002      	beq.n	10007926 <__swsetup_r+0x46>
10007920:	4628      	mov	r0, r5
10007922:	f7ff fbd9 	bl	100070d8 <_free_r>
10007926:	2300      	movs	r3, #0
10007928:	6363      	str	r3, [r4, #52]	@ 0x34
1000792a:	89a3      	ldrh	r3, [r4, #12]
1000792c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
10007930:	81a3      	strh	r3, [r4, #12]
10007932:	2300      	movs	r3, #0
10007934:	6063      	str	r3, [r4, #4]
10007936:	6923      	ldr	r3, [r4, #16]
10007938:	6023      	str	r3, [r4, #0]
1000793a:	89a3      	ldrh	r3, [r4, #12]
1000793c:	f043 0308 	orr.w	r3, r3, #8
10007940:	81a3      	strh	r3, [r4, #12]
10007942:	6923      	ldr	r3, [r4, #16]
10007944:	b94b      	cbnz	r3, 1000795a <__swsetup_r+0x7a>
10007946:	89a3      	ldrh	r3, [r4, #12]
10007948:	f403 7320 	and.w	r3, r3, #640	@ 0x280
1000794c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
10007950:	d003      	beq.n	1000795a <__swsetup_r+0x7a>
10007952:	4621      	mov	r1, r4
10007954:	4628      	mov	r0, r5
10007956:	f000 f883 	bl	10007a60 <__smakebuf_r>
1000795a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1000795e:	f013 0201 	ands.w	r2, r3, #1
10007962:	d00a      	beq.n	1000797a <__swsetup_r+0x9a>
10007964:	2200      	movs	r2, #0
10007966:	60a2      	str	r2, [r4, #8]
10007968:	6962      	ldr	r2, [r4, #20]
1000796a:	4252      	negs	r2, r2
1000796c:	61a2      	str	r2, [r4, #24]
1000796e:	6922      	ldr	r2, [r4, #16]
10007970:	b942      	cbnz	r2, 10007984 <__swsetup_r+0xa4>
10007972:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
10007976:	d1c5      	bne.n	10007904 <__swsetup_r+0x24>
10007978:	bd38      	pop	{r3, r4, r5, pc}
1000797a:	0799      	lsls	r1, r3, #30
1000797c:	bf58      	it	pl
1000797e:	6962      	ldrpl	r2, [r4, #20]
10007980:	60a2      	str	r2, [r4, #8]
10007982:	e7f4      	b.n	1000796e <__swsetup_r+0x8e>
10007984:	2000      	movs	r0, #0
10007986:	e7f7      	b.n	10007978 <__swsetup_r+0x98>
10007988:	100200d0 	.word	0x100200d0

1000798c <_raise_r>:
1000798c:	291f      	cmp	r1, #31
1000798e:	b538      	push	{r3, r4, r5, lr}
10007990:	4605      	mov	r5, r0
10007992:	460c      	mov	r4, r1
10007994:	d904      	bls.n	100079a0 <_raise_r+0x14>
10007996:	2316      	movs	r3, #22
10007998:	6003      	str	r3, [r0, #0]
1000799a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
1000799e:	bd38      	pop	{r3, r4, r5, pc}
100079a0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
100079a2:	b112      	cbz	r2, 100079aa <_raise_r+0x1e>
100079a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
100079a8:	b94b      	cbnz	r3, 100079be <_raise_r+0x32>
100079aa:	4628      	mov	r0, r5
100079ac:	f000 f830 	bl	10007a10 <_getpid_r>
100079b0:	4622      	mov	r2, r4
100079b2:	4601      	mov	r1, r0
100079b4:	4628      	mov	r0, r5
100079b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
100079ba:	f000 b817 	b.w	100079ec <_kill_r>
100079be:	2b01      	cmp	r3, #1
100079c0:	d00a      	beq.n	100079d8 <_raise_r+0x4c>
100079c2:	1c59      	adds	r1, r3, #1
100079c4:	d103      	bne.n	100079ce <_raise_r+0x42>
100079c6:	2316      	movs	r3, #22
100079c8:	6003      	str	r3, [r0, #0]
100079ca:	2001      	movs	r0, #1
100079cc:	e7e7      	b.n	1000799e <_raise_r+0x12>
100079ce:	2100      	movs	r1, #0
100079d0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
100079d4:	4620      	mov	r0, r4
100079d6:	4798      	blx	r3
100079d8:	2000      	movs	r0, #0
100079da:	e7e0      	b.n	1000799e <_raise_r+0x12>

100079dc <raise>:
100079dc:	4b02      	ldr	r3, [pc, #8]	@ (100079e8 <raise+0xc>)
100079de:	4601      	mov	r1, r0
100079e0:	6818      	ldr	r0, [r3, #0]
100079e2:	f7ff bfd3 	b.w	1000798c <_raise_r>
100079e6:	bf00      	nop
100079e8:	100200d0 	.word	0x100200d0

100079ec <_kill_r>:
100079ec:	b538      	push	{r3, r4, r5, lr}
100079ee:	4d07      	ldr	r5, [pc, #28]	@ (10007a0c <_kill_r+0x20>)
100079f0:	2300      	movs	r3, #0
100079f2:	4604      	mov	r4, r0
100079f4:	4608      	mov	r0, r1
100079f6:	4611      	mov	r1, r2
100079f8:	602b      	str	r3, [r5, #0]
100079fa:	f7f8 fe57 	bl	100006ac <_kill>
100079fe:	1c43      	adds	r3, r0, #1
10007a00:	d102      	bne.n	10007a08 <_kill_r+0x1c>
10007a02:	682b      	ldr	r3, [r5, #0]
10007a04:	b103      	cbz	r3, 10007a08 <_kill_r+0x1c>
10007a06:	6023      	str	r3, [r4, #0]
10007a08:	bd38      	pop	{r3, r4, r5, pc}
10007a0a:	bf00      	nop
10007a0c:	10020420 	.word	0x10020420

10007a10 <_getpid_r>:
10007a10:	f7f8 be44 	b.w	1000069c <_getpid>

10007a14 <__swhatbuf_r>:
10007a14:	b570      	push	{r4, r5, r6, lr}
10007a16:	460c      	mov	r4, r1
10007a18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
10007a1c:	2900      	cmp	r1, #0
10007a1e:	b096      	sub	sp, #88	@ 0x58
10007a20:	4615      	mov	r5, r2
10007a22:	461e      	mov	r6, r3
10007a24:	da0d      	bge.n	10007a42 <__swhatbuf_r+0x2e>
10007a26:	89a3      	ldrh	r3, [r4, #12]
10007a28:	f013 0f80 	tst.w	r3, #128	@ 0x80
10007a2c:	f04f 0100 	mov.w	r1, #0
10007a30:	bf14      	ite	ne
10007a32:	2340      	movne	r3, #64	@ 0x40
10007a34:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
10007a38:	2000      	movs	r0, #0
10007a3a:	6031      	str	r1, [r6, #0]
10007a3c:	602b      	str	r3, [r5, #0]
10007a3e:	b016      	add	sp, #88	@ 0x58
10007a40:	bd70      	pop	{r4, r5, r6, pc}
10007a42:	466a      	mov	r2, sp
10007a44:	f000 f848 	bl	10007ad8 <_fstat_r>
10007a48:	2800      	cmp	r0, #0
10007a4a:	dbec      	blt.n	10007a26 <__swhatbuf_r+0x12>
10007a4c:	9901      	ldr	r1, [sp, #4]
10007a4e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
10007a52:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
10007a56:	4259      	negs	r1, r3
10007a58:	4159      	adcs	r1, r3
10007a5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
10007a5e:	e7eb      	b.n	10007a38 <__swhatbuf_r+0x24>

10007a60 <__smakebuf_r>:
10007a60:	898b      	ldrh	r3, [r1, #12]
10007a62:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10007a64:	079d      	lsls	r5, r3, #30
10007a66:	4606      	mov	r6, r0
10007a68:	460c      	mov	r4, r1
10007a6a:	d507      	bpl.n	10007a7c <__smakebuf_r+0x1c>
10007a6c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
10007a70:	6023      	str	r3, [r4, #0]
10007a72:	6123      	str	r3, [r4, #16]
10007a74:	2301      	movs	r3, #1
10007a76:	6163      	str	r3, [r4, #20]
10007a78:	b003      	add	sp, #12
10007a7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
10007a7c:	ab01      	add	r3, sp, #4
10007a7e:	466a      	mov	r2, sp
10007a80:	f7ff ffc8 	bl	10007a14 <__swhatbuf_r>
10007a84:	9f00      	ldr	r7, [sp, #0]
10007a86:	4605      	mov	r5, r0
10007a88:	4639      	mov	r1, r7
10007a8a:	4630      	mov	r0, r6
10007a8c:	f7ff f8bc 	bl	10006c08 <_malloc_r>
10007a90:	b948      	cbnz	r0, 10007aa6 <__smakebuf_r+0x46>
10007a92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
10007a96:	059a      	lsls	r2, r3, #22
10007a98:	d4ee      	bmi.n	10007a78 <__smakebuf_r+0x18>
10007a9a:	f023 0303 	bic.w	r3, r3, #3
10007a9e:	f043 0302 	orr.w	r3, r3, #2
10007aa2:	81a3      	strh	r3, [r4, #12]
10007aa4:	e7e2      	b.n	10007a6c <__smakebuf_r+0xc>
10007aa6:	89a3      	ldrh	r3, [r4, #12]
10007aa8:	6020      	str	r0, [r4, #0]
10007aaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
10007aae:	81a3      	strh	r3, [r4, #12]
10007ab0:	9b01      	ldr	r3, [sp, #4]
10007ab2:	e9c4 0704 	strd	r0, r7, [r4, #16]
10007ab6:	b15b      	cbz	r3, 10007ad0 <__smakebuf_r+0x70>
10007ab8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
10007abc:	4630      	mov	r0, r6
10007abe:	f000 f81d 	bl	10007afc <_isatty_r>
10007ac2:	b128      	cbz	r0, 10007ad0 <__smakebuf_r+0x70>
10007ac4:	89a3      	ldrh	r3, [r4, #12]
10007ac6:	f023 0303 	bic.w	r3, r3, #3
10007aca:	f043 0301 	orr.w	r3, r3, #1
10007ace:	81a3      	strh	r3, [r4, #12]
10007ad0:	89a3      	ldrh	r3, [r4, #12]
10007ad2:	431d      	orrs	r5, r3
10007ad4:	81a5      	strh	r5, [r4, #12]
10007ad6:	e7cf      	b.n	10007a78 <__smakebuf_r+0x18>

10007ad8 <_fstat_r>:
10007ad8:	b538      	push	{r3, r4, r5, lr}
10007ada:	4d07      	ldr	r5, [pc, #28]	@ (10007af8 <_fstat_r+0x20>)
10007adc:	2300      	movs	r3, #0
10007ade:	4604      	mov	r4, r0
10007ae0:	4608      	mov	r0, r1
10007ae2:	4611      	mov	r1, r2
10007ae4:	602b      	str	r3, [r5, #0]
10007ae6:	f7f8 fe41 	bl	1000076c <_fstat>
10007aea:	1c43      	adds	r3, r0, #1
10007aec:	d102      	bne.n	10007af4 <_fstat_r+0x1c>
10007aee:	682b      	ldr	r3, [r5, #0]
10007af0:	b103      	cbz	r3, 10007af4 <_fstat_r+0x1c>
10007af2:	6023      	str	r3, [r4, #0]
10007af4:	bd38      	pop	{r3, r4, r5, pc}
10007af6:	bf00      	nop
10007af8:	10020420 	.word	0x10020420

10007afc <_isatty_r>:
10007afc:	b538      	push	{r3, r4, r5, lr}
10007afe:	4d06      	ldr	r5, [pc, #24]	@ (10007b18 <_isatty_r+0x1c>)
10007b00:	2300      	movs	r3, #0
10007b02:	4604      	mov	r4, r0
10007b04:	4608      	mov	r0, r1
10007b06:	602b      	str	r3, [r5, #0]
10007b08:	f7f8 fe40 	bl	1000078c <_isatty>
10007b0c:	1c43      	adds	r3, r0, #1
10007b0e:	d102      	bne.n	10007b16 <_isatty_r+0x1a>
10007b10:	682b      	ldr	r3, [r5, #0]
10007b12:	b103      	cbz	r3, 10007b16 <_isatty_r+0x1a>
10007b14:	6023      	str	r3, [r4, #0]
10007b16:	bd38      	pop	{r3, r4, r5, pc}
10007b18:	10020420 	.word	0x10020420

10007b1c <_init>:
10007b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10007b1e:	bf00      	nop
10007b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
10007b22:	bc08      	pop	{r3}
10007b24:	469e      	mov	lr, r3
10007b26:	4770      	bx	lr

10007b28 <_fini>:
10007b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10007b2a:	bf00      	nop
10007b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
10007b2e:	bc08      	pop	{r3}
10007b30:	469e      	mov	lr, r3
10007b32:	4770      	bx	lr

Disassembly of section .startup_copro_fw.Reset_Handler:

10007b34 <Reset_Handler>:
  ldr   sp, =_estack      /* set stack pointer */
10007b34:	f8df d034 	ldr.w	sp, [pc, #52]	@ 10007b6c <LoopForever+0x2>
  movs  r1, #0
10007b38:	2100      	movs	r1, #0
  b  LoopCopyDataInit
10007b3a:	e003      	b.n	10007b44 <LoopCopyDataInit>

10007b3c <CopyDataInit>:
  ldr  r3, =_sidata
10007b3c:	4b0c      	ldr	r3, [pc, #48]	@ (10007b70 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
10007b3e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
10007b40:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
10007b42:	3104      	adds	r1, #4

10007b44 <LoopCopyDataInit>:
  ldr  r0, =_sdata
10007b44:	480b      	ldr	r0, [pc, #44]	@ (10007b74 <LoopForever+0xa>)
  ldr  r3, =_edata
10007b46:	4b0c      	ldr	r3, [pc, #48]	@ (10007b78 <LoopForever+0xe>)
  adds  r2, r0, r1
10007b48:	1842      	adds	r2, r0, r1
  cmp  r2, r3
10007b4a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
10007b4c:	d3f6      	bcc.n	10007b3c <CopyDataInit>
  ldr  r2, =_sbss
10007b4e:	4a0b      	ldr	r2, [pc, #44]	@ (10007b7c <LoopForever+0x12>)
  b  LoopFillZerobss
10007b50:	e002      	b.n	10007b58 <LoopFillZerobss>

10007b52 <FillZerobss>:
  movs  r3, #0
10007b52:	2300      	movs	r3, #0
  str  r3, [r2], #4
10007b54:	f842 3b04 	str.w	r3, [r2], #4

10007b58 <LoopFillZerobss>:
  ldr  r3, = _ebss
10007b58:	4b09      	ldr	r3, [pc, #36]	@ (10007b80 <LoopForever+0x16>)
  cmp  r2, r3
10007b5a:	429a      	cmp	r2, r3
  bcc  FillZerobss
10007b5c:	d3f9      	bcc.n	10007b52 <FillZerobss>
  bl  SystemInit
10007b5e:	f7f8 facf 	bl	10000100 <SystemInit>
 bl __libc_init_array
10007b62:	f7ff fa7d 	bl	10007060 <__libc_init_array>
  bl main
10007b66:	f7f8 fb4d 	bl	10000204 <main>

10007b6a <LoopForever>:
    b LoopForever
10007b6a:	e7fe      	b.n	10007b6a <LoopForever>
  ldr   sp, =_estack      /* set stack pointer */
10007b6c:	10040000 	.word	0x10040000
  ldr  r3, =_sidata
10007b70:	10007f64 	.word	0x10007f64
  ldr  r0, =_sdata
10007b74:	10020000 	.word	0x10020000
  ldr  r3, =_edata
10007b78:	10020120 	.word	0x10020120
  ldr  r2, =_sbss
10007b7c:	100201ac 	.word	0x100201ac
  ldr  r3, = _ebss
10007b80:	10020428 	.word	0x10020428
