
801.01_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  00000000  00000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026c0  10000000  10000000  00002000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .startup_copro_fw.Reset_Handler 00000050  100026c0  100026c0  000046c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000000  10002710  10002710  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .ARM.extab    00000000  10002710  10002710  0000500c  2**0
                  CONTENTS
  5 .ARM          00000000  10002710  10002710  0000500c  2**0
                  CONTENTS
  6 .preinit_array 00000000  10002710  10002710  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  10002710  10002710  00004710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .fini_array   00000004  10002714  10002714  00004714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         0000000c  10020000  10002718  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .resource_table 00000000  1002000c  1002000c  0000500c  2**0
                  CONTENTS
 11 .bss          0000005c  1002000c  10002724  0000500c  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  10020068  10002780  0000500c  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000c99f  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001725  00000000  00000000  000119db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000006d8  00000000  00000000  00013100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000504  00000000  00000000  000137d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0004459d  00000000  00000000  00013cdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000942a  00000000  00000000  00058279  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001c0029  00000000  00000000  000616a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  002216cc  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00001948  00000000  00000000  00221710  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000071  00000000  00000000  00223058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

10000000 <__do_global_dtors_aux>:
10000000:	b510      	push	{r4, lr}
10000002:	4c05      	ldr	r4, [pc, #20]	@ (10000018 <__do_global_dtors_aux+0x18>)
10000004:	7823      	ldrb	r3, [r4, #0]
10000006:	b933      	cbnz	r3, 10000016 <__do_global_dtors_aux+0x16>
10000008:	4b04      	ldr	r3, [pc, #16]	@ (1000001c <__do_global_dtors_aux+0x1c>)
1000000a:	b113      	cbz	r3, 10000012 <__do_global_dtors_aux+0x12>
1000000c:	4804      	ldr	r0, [pc, #16]	@ (10000020 <__do_global_dtors_aux+0x20>)
1000000e:	f3af 8000 	nop.w
10000012:	2301      	movs	r3, #1
10000014:	7023      	strb	r3, [r4, #0]
10000016:	bd10      	pop	{r4, pc}
10000018:	1002000c 	.word	0x1002000c
1000001c:	00000000 	.word	0x00000000
10000020:	100026a8 	.word	0x100026a8

10000024 <frame_dummy>:
10000024:	b508      	push	{r3, lr}
10000026:	4b03      	ldr	r3, [pc, #12]	@ (10000034 <frame_dummy+0x10>)
10000028:	b11b      	cbz	r3, 10000032 <frame_dummy+0xe>
1000002a:	4903      	ldr	r1, [pc, #12]	@ (10000038 <frame_dummy+0x14>)
1000002c:	4803      	ldr	r0, [pc, #12]	@ (1000003c <frame_dummy+0x18>)
1000002e:	f3af 8000 	nop.w
10000032:	bd08      	pop	{r3, pc}
10000034:	00000000 	.word	0x00000000
10000038:	10020010 	.word	0x10020010
1000003c:	100026a8 	.word	0x100026a8

10000040 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
10000040:	b480      	push	{r7}
10000042:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if defined (CORE_CM4)
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
10000044:	4b0f      	ldr	r3, [pc, #60]	@ (10000084 <SystemInit+0x44>)
10000046:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
1000004a:	4a0e      	ldr	r2, [pc, #56]	@ (10000084 <SystemInit+0x44>)
1000004c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
10000050:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (VECT_TAB_SRAM)
  SCB->VTOR = MCU_AHB_SRAM | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif
  /* Disable all interrupts and events */
  CLEAR_REG(EXTI_C2->IMR1);
10000054:	4b0c      	ldr	r3, [pc, #48]	@ (10000088 <SystemInit+0x48>)
10000056:	2200      	movs	r2, #0
10000058:	601a      	str	r2, [r3, #0]
  CLEAR_REG(EXTI_C2->IMR2);
1000005a:	4b0b      	ldr	r3, [pc, #44]	@ (10000088 <SystemInit+0x48>)
1000005c:	2200      	movs	r2, #0
1000005e:	611a      	str	r2, [r3, #16]
  CLEAR_REG(EXTI_C2->IMR3);
10000060:	4b09      	ldr	r3, [pc, #36]	@ (10000088 <SystemInit+0x48>)
10000062:	2200      	movs	r2, #0
10000064:	621a      	str	r2, [r3, #32]
  CLEAR_REG(EXTI_C2->EMR1);
10000066:	4b08      	ldr	r3, [pc, #32]	@ (10000088 <SystemInit+0x48>)
10000068:	2200      	movs	r2, #0
1000006a:	605a      	str	r2, [r3, #4]
  CLEAR_REG(EXTI_C2->EMR2);
1000006c:	4b06      	ldr	r3, [pc, #24]	@ (10000088 <SystemInit+0x48>)
1000006e:	2200      	movs	r2, #0
10000070:	615a      	str	r2, [r3, #20]
  CLEAR_REG(EXTI_C2->EMR3);
10000072:	4b05      	ldr	r3, [pc, #20]	@ (10000088 <SystemInit+0x48>)
10000074:	2200      	movs	r2, #0
10000076:	625a      	str	r2, [r3, #36]	@ 0x24
#else
#error Please #define CORE_CM4
#endif	                         
}
10000078:	bf00      	nop
1000007a:	46bd      	mov	sp, r7
1000007c:	f85d 7b04 	ldr.w	r7, [sp], #4
10000080:	4770      	bx	lr
10000082:	bf00      	nop
10000084:	e000ed00 	.word	0xe000ed00
10000088:	5000d0c0 	.word	0x5000d0c0

1000008c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
1000008c:	b480      	push	{r7}
1000008e:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
10000090:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000094:	2204      	movs	r2, #4
10000096:	f8c3 2aa8 	str.w	r2, [r3, #2728]	@ 0xaa8
  __HAL_RCC_GPIOH_CLK_ENABLE();
1000009a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000009e:	2280      	movs	r2, #128	@ 0x80
100000a0:	f8c3 2aa8 	str.w	r2, [r3, #2728]	@ 0xaa8

}
100000a4:	bf00      	nop
100000a6:	46bd      	mov	sp, r7
100000a8:	f85d 7b04 	ldr.w	r7, [sp], #4
100000ac:	4770      	bx	lr
	...

100000b0 <MX_IPCC_Init>:

IPCC_HandleTypeDef hipcc;

/* IPCC init function */
void MX_IPCC_Init(void)
{
100000b0:	b580      	push	{r7, lr}
100000b2:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
100000b4:	4b06      	ldr	r3, [pc, #24]	@ (100000d0 <MX_IPCC_Init+0x20>)
100000b6:	4a07      	ldr	r2, [pc, #28]	@ (100000d4 <MX_IPCC_Init+0x24>)
100000b8:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
100000ba:	4805      	ldr	r0, [pc, #20]	@ (100000d0 <MX_IPCC_Init+0x20>)
100000bc:	f000 fb7c 	bl	100007b8 <HAL_IPCC_Init>
100000c0:	4603      	mov	r3, r0
100000c2:	2b00      	cmp	r3, #0
100000c4:	d001      	beq.n	100000ca <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
100000c6:	f000 f96e 	bl	100003a6 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
100000ca:	bf00      	nop
100000cc:	bd80      	pop	{r7, pc}
100000ce:	bf00      	nop
100000d0:	10020028 	.word	0x10020028
100000d4:	4c001000 	.word	0x4c001000

100000d8 <HAL_IPCC_MspInit>:

void HAL_IPCC_MspInit(IPCC_HandleTypeDef* ipccHandle)
{
100000d8:	b580      	push	{r7, lr}
100000da:	b082      	sub	sp, #8
100000dc:	af00      	add	r7, sp, #0
100000de:	6078      	str	r0, [r7, #4]

  if(ipccHandle->Instance==IPCC)
100000e0:	687b      	ldr	r3, [r7, #4]
100000e2:	681b      	ldr	r3, [r3, #0]
100000e4:	4a0e      	ldr	r2, [pc, #56]	@ (10000120 <HAL_IPCC_MspInit+0x48>)
100000e6:	4293      	cmp	r3, r2
100000e8:	d115      	bne.n	10000116 <HAL_IPCC_MspInit+0x3e>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* IPCC clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
100000ea:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100000ee:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
100000f2:	f8c3 2aa0 	str.w	r2, [r3, #2720]	@ 0xaa0

    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_RX1_IRQn, 1, 0);
100000f6:	2200      	movs	r2, #0
100000f8:	2101      	movs	r1, #1
100000fa:	2067      	movs	r0, #103	@ 0x67
100000fc:	f000 fb25 	bl	1000074a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_RX1_IRQn);
10000100:	2067      	movs	r0, #103	@ 0x67
10000102:	f000 fb3e 	bl	10000782 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_TX1_IRQn, 1, 0);
10000106:	2200      	movs	r2, #0
10000108:	2101      	movs	r1, #1
1000010a:	2068      	movs	r0, #104	@ 0x68
1000010c:	f000 fb1d 	bl	1000074a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_TX1_IRQn);
10000110:	2068      	movs	r0, #104	@ 0x68
10000112:	f000 fb36 	bl	10000782 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }
}
10000116:	bf00      	nop
10000118:	3708      	adds	r7, #8
1000011a:	46bd      	mov	sp, r7
1000011c:	bd80      	pop	{r7, pc}
1000011e:	bf00      	nop
10000120:	4c001000 	.word	0x4c001000

10000124 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
10000124:	b580      	push	{r7, lr}
10000126:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
10000128:	f000 f9c4 	bl	100004b4 <HAL_Init>

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  if(IS_ENGINEERING_BOOT_MODE())
1000012c:	4b07      	ldr	r3, [pc, #28]	@ (1000014c <main+0x28>)
1000012e:	681b      	ldr	r3, [r3, #0]
10000130:	f003 0307 	and.w	r3, r3, #7
10000134:	2b04      	cmp	r3, #4
10000136:	d102      	bne.n	1000013e <main+0x1a>
  {
    /* Configure the system clock */
    SystemClock_Config();
10000138:	f000 f80a 	bl	10000150 <SystemClock_Config>
1000013c:	e001      	b.n	10000142 <main+0x1e>
  }
  else
  {
    /* IPCC initialisation */
    MX_IPCC_Init();
1000013e:	f7ff ffb7 	bl	100000b0 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
10000142:	f7ff ffa3 	bl	1000008c <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
10000146:	bf00      	nop
10000148:	e7fd      	b.n	10000146 <main+0x22>
1000014a:	bf00      	nop
1000014c:	50020000 	.word	0x50020000

10000150 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
10000150:	b580      	push	{r7, lr}
10000152:	b0d2      	sub	sp, #328	@ 0x148
10000154:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
10000156:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000015a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
1000015e:	4618      	mov	r0, r3
10000160:	f44f 738a 	mov.w	r3, #276	@ 0x114
10000164:	461a      	mov	r2, r3
10000166:	2100      	movs	r1, #0
10000168:	f002 fa72 	bl	10002650 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
1000016c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000170:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
10000174:	4618      	mov	r0, r3
10000176:	2330      	movs	r3, #48	@ 0x30
10000178:	461a      	mov	r2, r3
1000017a:	2100      	movs	r1, #0
1000017c:	f002 fa68 	bl	10002650 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
10000180:	f000 fc3a 	bl	100009f8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
10000184:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000188:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
1000018c:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
10000190:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10000194:	f043 0320 	orr.w	r3, r3, #32
10000198:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI|RCC_OSCILLATORTYPE_HSE
1000019c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100001a0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100001a4:	2215      	movs	r2, #21
100001a6:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_DIG;
100001a8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100001ac:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100001b0:	f44f 62b0 	mov.w	r2, #1408	@ 0x580
100001b4:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
100001b6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100001ba:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100001be:	2201      	movs	r2, #1
100001c0:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
100001c2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100001c6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100001ca:	2210      	movs	r2, #16
100001cc:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
100001ce:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100001d2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100001d6:	2200      	movs	r2, #0
100001d8:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL2.PLLState = RCC_PLL_ON;
100001da:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100001de:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100001e2:	2202      	movs	r2, #2
100001e4:	661a      	str	r2, [r3, #96]	@ 0x60
  RCC_OscInitStruct.PLL2.PLLSource = RCC_PLL12SOURCE_HSE;
100001e6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100001ea:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100001ee:	2201      	movs	r2, #1
100001f0:	665a      	str	r2, [r3, #100]	@ 0x64
  RCC_OscInitStruct.PLL2.PLLM = 3;
100001f2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100001f6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100001fa:	2203      	movs	r2, #3
100001fc:	669a      	str	r2, [r3, #104]	@ 0x68
  RCC_OscInitStruct.PLL2.PLLN = 66;
100001fe:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000202:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000206:	2242      	movs	r2, #66	@ 0x42
10000208:	66da      	str	r2, [r3, #108]	@ 0x6c
  RCC_OscInitStruct.PLL2.PLLP = 2;
1000020a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000020e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000212:	2202      	movs	r2, #2
10000214:	671a      	str	r2, [r3, #112]	@ 0x70
  RCC_OscInitStruct.PLL2.PLLQ = 1;
10000216:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000021a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
1000021e:	2201      	movs	r2, #1
10000220:	675a      	str	r2, [r3, #116]	@ 0x74
  RCC_OscInitStruct.PLL2.PLLR = 1;
10000222:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000226:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
1000022a:	2201      	movs	r2, #1
1000022c:	679a      	str	r2, [r3, #120]	@ 0x78
  RCC_OscInitStruct.PLL2.PLLFRACV = 0x1400;
1000022e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000232:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000236:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
1000023a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  RCC_OscInitStruct.PLL2.PLLMODE = RCC_PLL_FRACTIONAL;
1000023e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000242:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000246:	2201      	movs	r2, #1
10000248:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  RCC_OscInitStruct.PLL3.PLLState = RCC_PLL_ON;
1000024c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000250:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000254:	2202      	movs	r2, #2
10000256:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  RCC_OscInitStruct.PLL3.PLLSource = RCC_PLL3SOURCE_HSE;
1000025a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000025e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000262:	2201      	movs	r2, #1
10000264:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  RCC_OscInitStruct.PLL3.PLLM = 2;
10000268:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000026c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000270:	2202      	movs	r2, #2
10000272:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  RCC_OscInitStruct.PLL3.PLLN = 34;
10000276:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000027a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
1000027e:	2222      	movs	r2, #34	@ 0x22
10000280:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  RCC_OscInitStruct.PLL3.PLLP = 2;
10000284:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000288:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
1000028c:	2202      	movs	r2, #2
1000028e:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  RCC_OscInitStruct.PLL3.PLLQ = 17;
10000292:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000296:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
1000029a:	2211      	movs	r2, #17
1000029c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  RCC_OscInitStruct.PLL3.PLLR = 37;
100002a0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100002a4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100002a8:	2225      	movs	r2, #37	@ 0x25
100002aa:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  RCC_OscInitStruct.PLL3.PLLRGE = RCC_PLL3IFRANGE_1;
100002ae:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100002b2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100002b6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
100002ba:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  RCC_OscInitStruct.PLL3.PLLFRACV = 6660;
100002be:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100002c2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100002c6:	f641 2204 	movw	r2, #6660	@ 0x1a04
100002ca:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  RCC_OscInitStruct.PLL3.PLLMODE = RCC_PLL_FRACTIONAL;
100002ce:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100002d2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100002d6:	2201      	movs	r2, #1
100002d8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  RCC_OscInitStruct.PLL4.PLLState = RCC_PLL_NONE;
100002dc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100002e0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100002e4:	2200      	movs	r2, #0
100002e6:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
100002ea:	f107 0334 	add.w	r3, r7, #52	@ 0x34
100002ee:	4618      	mov	r0, r3
100002f0:	f000 fb92 	bl	10000a18 <HAL_RCC_OscConfig>
100002f4:	4603      	mov	r3, r0
100002f6:	2b00      	cmp	r3, #0
100002f8:	d001      	beq.n	100002fe <SystemClock_Config+0x1ae>
  {
    Error_Handler();
100002fa:	f000 f854 	bl	100003a6 <Error_Handler>
  }

  /** RCC Clock Config
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_ACLK
100002fe:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000302:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
10000306:	22fe      	movs	r2, #254	@ 0xfe
10000308:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3|RCC_CLOCKTYPE_PCLK4
                              |RCC_CLOCKTYPE_PCLK5;
  RCC_ClkInitStruct.AXISSInit.AXI_Clock = RCC_AXISSOURCE_PLL2;
1000030a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000030e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
10000312:	2202      	movs	r2, #2
10000314:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.AXISSInit.AXI_Div = RCC_AXI_DIV1;
10000316:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000031a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
1000031e:	2200      	movs	r2, #0
10000320:	611a      	str	r2, [r3, #16]
  RCC_ClkInitStruct.MCUInit.MCU_Clock = RCC_MCUSSOURCE_PLL3;
10000322:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000326:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
1000032a:	2203      	movs	r2, #3
1000032c:	615a      	str	r2, [r3, #20]
  RCC_ClkInitStruct.MCUInit.MCU_Div = RCC_MCU_DIV1;
1000032e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000332:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
10000336:	2200      	movs	r2, #0
10000338:	619a      	str	r2, [r3, #24]
  RCC_ClkInitStruct.APB4_Div = RCC_APB4_DIV2;
1000033a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000033e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
10000342:	2201      	movs	r2, #1
10000344:	61da      	str	r2, [r3, #28]
  RCC_ClkInitStruct.APB5_Div = RCC_APB5_DIV4;
10000346:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000034a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
1000034e:	2202      	movs	r2, #2
10000350:	621a      	str	r2, [r3, #32]
  RCC_ClkInitStruct.APB1_Div = RCC_APB1_DIV2;
10000352:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000356:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
1000035a:	2201      	movs	r2, #1
1000035c:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_ClkInitStruct.APB2_Div = RCC_APB2_DIV2;
1000035e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000362:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
10000366:	2201      	movs	r2, #1
10000368:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_ClkInitStruct.APB3_Div = RCC_APB3_DIV2;
1000036a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000036e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
10000372:	2201      	movs	r2, #1
10000374:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct) != HAL_OK)
10000376:	1d3b      	adds	r3, r7, #4
10000378:	4618      	mov	r0, r3
1000037a:	f001 f8eb 	bl	10001554 <HAL_RCC_ClockConfig>
1000037e:	4603      	mov	r3, r0
10000380:	2b00      	cmp	r3, #0
10000382:	d001      	beq.n	10000388 <SystemClock_Config+0x238>
  {
    Error_Handler();
10000384:	f000 f80f 	bl	100003a6 <Error_Handler>
  }

  /** Set the HSE division factor for RTC clock
  */
  __HAL_RCC_RTC_HSEDIV(24);
10000388:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000038c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
1000038e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
10000392:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10000396:	f043 0317 	orr.w	r3, r3, #23
1000039a:	6453      	str	r3, [r2, #68]	@ 0x44
}
1000039c:	bf00      	nop
1000039e:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
100003a2:	46bd      	mov	sp, r7
100003a4:	bd80      	pop	{r7, pc}

100003a6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
100003a6:	b480      	push	{r7}
100003a8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
100003aa:	b672      	cpsid	i
}
100003ac:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
100003ae:	bf00      	nop
100003b0:	e7fd      	b.n	100003ae <Error_Handler+0x8>

100003b2 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
100003b2:	b580      	push	{r7, lr}
100003b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
100003b6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100003ba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
100003be:	f8c3 2aa0 	str.w	r2, [r3, #2720]	@ 0xaa0

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
100003c2:	2200      	movs	r2, #0
100003c4:	2101      	movs	r1, #1
100003c6:	f06f 000b 	mvn.w	r0, #11
100003ca:	f000 f9be 	bl	1000074a <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 1, 0);
100003ce:	2200      	movs	r2, #0
100003d0:	2101      	movs	r1, #1
100003d2:	f06f 000a 	mvn.w	r0, #10
100003d6:	f000 f9b8 	bl	1000074a <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
100003da:	2200      	movs	r2, #0
100003dc:	2101      	movs	r1, #1
100003de:	f06f 0009 	mvn.w	r0, #9
100003e2:	f000 f9b2 	bl	1000074a <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 1, 0);
100003e6:	2200      	movs	r2, #0
100003e8:	2101      	movs	r1, #1
100003ea:	f06f 0004 	mvn.w	r0, #4
100003ee:	f000 f9ac 	bl	1000074a <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
100003f2:	2200      	movs	r2, #0
100003f4:	2101      	movs	r1, #1
100003f6:	f06f 0003 	mvn.w	r0, #3
100003fa:	f000 f9a6 	bl	1000074a <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 1, 0);
100003fe:	2200      	movs	r2, #0
10000400:	2101      	movs	r1, #1
10000402:	f06f 0001 	mvn.w	r0, #1
10000406:	f000 f9a0 	bl	1000074a <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_WAKEUP_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_WAKEUP_IRQn, 0, 0);
1000040a:	2200      	movs	r2, #0
1000040c:	2100      	movs	r1, #0
1000040e:	2091      	movs	r0, #145	@ 0x91
10000410:	f000 f99b 	bl	1000074a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_WAKEUP_IRQn);
10000414:	2091      	movs	r0, #145	@ 0x91
10000416:	f000 f9b4 	bl	10000782 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
1000041a:	bf00      	nop
1000041c:	bd80      	pop	{r7, pc}

1000041e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
1000041e:	b480      	push	{r7}
10000420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
10000422:	bf00      	nop
10000424:	e7fd      	b.n	10000422 <NMI_Handler+0x4>

10000426 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
10000426:	b480      	push	{r7}
10000428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
1000042a:	bf00      	nop
1000042c:	e7fd      	b.n	1000042a <HardFault_Handler+0x4>

1000042e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
1000042e:	b480      	push	{r7}
10000430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
10000432:	bf00      	nop
10000434:	e7fd      	b.n	10000432 <MemManage_Handler+0x4>

10000436 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
10000436:	b480      	push	{r7}
10000438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
1000043a:	bf00      	nop
1000043c:	e7fd      	b.n	1000043a <BusFault_Handler+0x4>

1000043e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
1000043e:	b480      	push	{r7}
10000440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
10000442:	bf00      	nop
10000444:	e7fd      	b.n	10000442 <UsageFault_Handler+0x4>

10000446 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
10000446:	b480      	push	{r7}
10000448:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
1000044a:	bf00      	nop
1000044c:	46bd      	mov	sp, r7
1000044e:	f85d 7b04 	ldr.w	r7, [sp], #4
10000452:	4770      	bx	lr

10000454 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
10000454:	b480      	push	{r7}
10000456:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
10000458:	bf00      	nop
1000045a:	46bd      	mov	sp, r7
1000045c:	f85d 7b04 	ldr.w	r7, [sp], #4
10000460:	4770      	bx	lr

10000462 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
10000462:	b480      	push	{r7}
10000464:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
10000466:	bf00      	nop
10000468:	46bd      	mov	sp, r7
1000046a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000046e:	4770      	bx	lr

10000470 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
10000470:	b580      	push	{r7, lr}
10000472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
10000474:	f000 f86e 	bl	10000554 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
10000478:	bf00      	nop
1000047a:	bd80      	pop	{r7, pc}

1000047c <IPCC_RX1_IRQHandler>:

/**
  * @brief This function handles IPCC RX1 occupied interrupt.
  */
void IPCC_RX1_IRQHandler(void)
{
1000047c:	b580      	push	{r7, lr}
1000047e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_RX1_IRQn 0 */

  /* USER CODE END IPCC_RX1_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
10000480:	4802      	ldr	r0, [pc, #8]	@ (1000048c <IPCC_RX1_IRQHandler+0x10>)
10000482:	f000 fa19 	bl	100008b8 <HAL_IPCC_RX_IRQHandler>
  /* USER CODE BEGIN IPCC_RX1_IRQn 1 */

  /* USER CODE END IPCC_RX1_IRQn 1 */
}
10000486:	bf00      	nop
10000488:	bd80      	pop	{r7, pc}
1000048a:	bf00      	nop
1000048c:	10020028 	.word	0x10020028

10000490 <IPCC_TX1_IRQHandler>:

/**
  * @brief This function handles IPCC TX1 free interrupt.
  */
void IPCC_TX1_IRQHandler(void)
{
10000490:	b580      	push	{r7, lr}
10000492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_TX1_IRQn 0 */

  /* USER CODE END IPCC_TX1_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
10000494:	4802      	ldr	r0, [pc, #8]	@ (100004a0 <IPCC_TX1_IRQHandler+0x10>)
10000496:	f000 f9c1 	bl	1000081c <HAL_IPCC_TX_IRQHandler>
  /* USER CODE BEGIN IPCC_TX1_IRQn 1 */

  /* USER CODE END IPCC_TX1_IRQn 1 */
}
1000049a:	bf00      	nop
1000049c:	bd80      	pop	{r7, pc}
1000049e:	bf00      	nop
100004a0:	10020028 	.word	0x10020028

100004a4 <RCC_WAKEUP_IRQHandler>:

/**
  * @brief This function handles RCC wake-up interrupt.
  */
void RCC_WAKEUP_IRQHandler(void)
{
100004a4:	b580      	push	{r7, lr}
100004a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RCC_WAKEUP_IRQn 0 */

  /* USER CODE END RCC_WAKEUP_IRQn 0 */
  HAL_RCC_WAKEUP_IRQHandler();
100004a8:	f001 fc72 	bl	10001d90 <HAL_RCC_WAKEUP_IRQHandler>
  /* USER CODE BEGIN RCC_WAKEUP_IRQn 1 */

  /* USER CODE END RCC_WAKEUP_IRQn 1 */
}
100004ac:	bf00      	nop
100004ae:	bd80      	pop	{r7, pc}

100004b0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
100004b0:	e7fe      	b.n	100004b0 <ADC1_IRQHandler>
	...

100004b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
100004b4:	b580      	push	{r7, lr}
100004b6:	af00      	add	r7, sp, #0
  /* Set Interrupt Group Priority */
#if defined (CORE_CM4)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
100004b8:	2003      	movs	r0, #3
100004ba:	f000 f93b 	bl	10000734 <HAL_NVIC_SetPriorityGrouping>
#endif

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
100004be:	f001 fc26 	bl	10001d0e <HAL_RCC_GetSystemCoreClockFreq>
100004c2:	4603      	mov	r3, r0
100004c4:	4a07      	ldr	r2, [pc, #28]	@ (100004e4 <HAL_Init+0x30>)
100004c6:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
100004c8:	2001      	movs	r0, #1
100004ca:	f000 f80d 	bl	100004e8 <HAL_InitTick>
100004ce:	4603      	mov	r3, r0
100004d0:	2b00      	cmp	r3, #0
100004d2:	d001      	beq.n	100004d8 <HAL_Init+0x24>
  {
    return HAL_ERROR;
100004d4:	2301      	movs	r3, #1
100004d6:	e002      	b.n	100004de <HAL_Init+0x2a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
100004d8:	f7ff ff6b 	bl	100003b2 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
100004dc:	2300      	movs	r3, #0
}
100004de:	4618      	mov	r0, r3
100004e0:	bd80      	pop	{r7, pc}
100004e2:	bf00      	nop
100004e4:	10020000 	.word	0x10020000

100004e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
100004e8:	b580      	push	{r7, lr}
100004ea:	b082      	sub	sp, #8
100004ec:	af00      	add	r7, sp, #0
100004ee:	6078      	str	r0, [r7, #4]

#endif /* CORE_CA7 */


#if defined (CORE_CM4)
  if ((uint32_t)uwTickFreq == 0U)
100004f0:	4b15      	ldr	r3, [pc, #84]	@ (10000548 <HAL_InitTick+0x60>)
100004f2:	781b      	ldrb	r3, [r3, #0]
100004f4:	2b00      	cmp	r3, #0
100004f6:	d101      	bne.n	100004fc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
100004f8:	2301      	movs	r3, #1
100004fa:	e021      	b.n	10000540 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock /(1000U / uwTickFreq)) > 0U)
100004fc:	4b13      	ldr	r3, [pc, #76]	@ (1000054c <HAL_InitTick+0x64>)
100004fe:	681a      	ldr	r2, [r3, #0]
10000500:	4b11      	ldr	r3, [pc, #68]	@ (10000548 <HAL_InitTick+0x60>)
10000502:	781b      	ldrb	r3, [r3, #0]
10000504:	4619      	mov	r1, r3
10000506:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
1000050a:	fbb3 f3f1 	udiv	r3, r3, r1
1000050e:	fbb2 f3f3 	udiv	r3, r2, r3
10000512:	4618      	mov	r0, r3
10000514:	f000 f943 	bl	1000079e <HAL_SYSTICK_Config>
10000518:	4603      	mov	r3, r0
1000051a:	2b00      	cmp	r3, #0
1000051c:	d001      	beq.n	10000522 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
1000051e:	2301      	movs	r3, #1
10000520:	e00e      	b.n	10000540 <HAL_InitTick+0x58>
  }
  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
10000522:	687b      	ldr	r3, [r7, #4]
10000524:	2b0f      	cmp	r3, #15
10000526:	d80a      	bhi.n	1000053e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
10000528:	2200      	movs	r2, #0
1000052a:	6879      	ldr	r1, [r7, #4]
1000052c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
10000530:	f000 f90b 	bl	1000074a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
10000534:	4a06      	ldr	r2, [pc, #24]	@ (10000550 <HAL_InitTick+0x68>)
10000536:	687b      	ldr	r3, [r7, #4]
10000538:	6013      	str	r3, [r2, #0]
#endif /* CORE_CM4 */



  /* Return function status */
  return HAL_OK;
1000053a:	2300      	movs	r3, #0
1000053c:	e000      	b.n	10000540 <HAL_InitTick+0x58>
    return HAL_ERROR;
1000053e:	2301      	movs	r3, #1
}
10000540:	4618      	mov	r0, r3
10000542:	3708      	adds	r7, #8
10000544:	46bd      	mov	sp, r7
10000546:	bd80      	pop	{r7, pc}
10000548:	10020008 	.word	0x10020008
1000054c:	10020000 	.word	0x10020000
10000550:	10020004 	.word	0x10020004

10000554 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
10000554:	b480      	push	{r7}
10000556:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
10000558:	4b06      	ldr	r3, [pc, #24]	@ (10000574 <HAL_IncTick+0x20>)
1000055a:	781b      	ldrb	r3, [r3, #0]
1000055c:	461a      	mov	r2, r3
1000055e:	4b06      	ldr	r3, [pc, #24]	@ (10000578 <HAL_IncTick+0x24>)
10000560:	681b      	ldr	r3, [r3, #0]
10000562:	4413      	add	r3, r2
10000564:	4a04      	ldr	r2, [pc, #16]	@ (10000578 <HAL_IncTick+0x24>)
10000566:	6013      	str	r3, [r2, #0]
}
10000568:	bf00      	nop
1000056a:	46bd      	mov	sp, r7
1000056c:	f85d 7b04 	ldr.w	r7, [sp], #4
10000570:	4770      	bx	lr
10000572:	bf00      	nop
10000574:	10020008 	.word	0x10020008
10000578:	10020064 	.word	0x10020064

1000057c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
1000057c:	b480      	push	{r7}
1000057e:	af00      	add	r7, sp, #0
#endif /* CORE_CA7 */


#if defined (CORE_CM4)
  /* tick is incremented in systick handler */
  return uwTick;
10000580:	4b03      	ldr	r3, [pc, #12]	@ (10000590 <HAL_GetTick+0x14>)
10000582:	681b      	ldr	r3, [r3, #0]
#endif /* CORE_CM4 */

}
10000584:	4618      	mov	r0, r3
10000586:	46bd      	mov	sp, r7
10000588:	f85d 7b04 	ldr.w	r7, [sp], #4
1000058c:	4770      	bx	lr
1000058e:	bf00      	nop
10000590:	10020064 	.word	0x10020064

10000594 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
10000594:	b480      	push	{r7}
10000596:	b085      	sub	sp, #20
10000598:	af00      	add	r7, sp, #0
1000059a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
1000059c:	687b      	ldr	r3, [r7, #4]
1000059e:	f003 0307 	and.w	r3, r3, #7
100005a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
100005a4:	4b0c      	ldr	r3, [pc, #48]	@ (100005d8 <__NVIC_SetPriorityGrouping+0x44>)
100005a6:	68db      	ldr	r3, [r3, #12]
100005a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
100005aa:	68ba      	ldr	r2, [r7, #8]
100005ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
100005b0:	4013      	ands	r3, r2
100005b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
100005b4:	68fb      	ldr	r3, [r7, #12]
100005b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
100005b8:	68bb      	ldr	r3, [r7, #8]
100005ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
100005bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
100005c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
100005c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
100005c6:	4a04      	ldr	r2, [pc, #16]	@ (100005d8 <__NVIC_SetPriorityGrouping+0x44>)
100005c8:	68bb      	ldr	r3, [r7, #8]
100005ca:	60d3      	str	r3, [r2, #12]
}
100005cc:	bf00      	nop
100005ce:	3714      	adds	r7, #20
100005d0:	46bd      	mov	sp, r7
100005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
100005d6:	4770      	bx	lr
100005d8:	e000ed00 	.word	0xe000ed00

100005dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
100005dc:	b480      	push	{r7}
100005de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
100005e0:	4b04      	ldr	r3, [pc, #16]	@ (100005f4 <__NVIC_GetPriorityGrouping+0x18>)
100005e2:	68db      	ldr	r3, [r3, #12]
100005e4:	0a1b      	lsrs	r3, r3, #8
100005e6:	f003 0307 	and.w	r3, r3, #7
}
100005ea:	4618      	mov	r0, r3
100005ec:	46bd      	mov	sp, r7
100005ee:	f85d 7b04 	ldr.w	r7, [sp], #4
100005f2:	4770      	bx	lr
100005f4:	e000ed00 	.word	0xe000ed00

100005f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
100005f8:	b480      	push	{r7}
100005fa:	b083      	sub	sp, #12
100005fc:	af00      	add	r7, sp, #0
100005fe:	4603      	mov	r3, r0
10000600:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
10000602:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
10000606:	2b00      	cmp	r3, #0
10000608:	db0b      	blt.n	10000622 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1000060a:	88fb      	ldrh	r3, [r7, #6]
1000060c:	f003 021f 	and.w	r2, r3, #31
10000610:	4907      	ldr	r1, [pc, #28]	@ (10000630 <__NVIC_EnableIRQ+0x38>)
10000612:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
10000616:	095b      	lsrs	r3, r3, #5
10000618:	2001      	movs	r0, #1
1000061a:	fa00 f202 	lsl.w	r2, r0, r2
1000061e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
10000622:	bf00      	nop
10000624:	370c      	adds	r7, #12
10000626:	46bd      	mov	sp, r7
10000628:	f85d 7b04 	ldr.w	r7, [sp], #4
1000062c:	4770      	bx	lr
1000062e:	bf00      	nop
10000630:	e000e100 	.word	0xe000e100

10000634 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
10000634:	b480      	push	{r7}
10000636:	b083      	sub	sp, #12
10000638:	af00      	add	r7, sp, #0
1000063a:	4603      	mov	r3, r0
1000063c:	6039      	str	r1, [r7, #0]
1000063e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
10000640:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
10000644:	2b00      	cmp	r3, #0
10000646:	db0a      	blt.n	1000065e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
10000648:	683b      	ldr	r3, [r7, #0]
1000064a:	b2da      	uxtb	r2, r3
1000064c:	490c      	ldr	r1, [pc, #48]	@ (10000680 <__NVIC_SetPriority+0x4c>)
1000064e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
10000652:	0112      	lsls	r2, r2, #4
10000654:	b2d2      	uxtb	r2, r2
10000656:	440b      	add	r3, r1
10000658:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
1000065c:	e00a      	b.n	10000674 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1000065e:	683b      	ldr	r3, [r7, #0]
10000660:	b2da      	uxtb	r2, r3
10000662:	4908      	ldr	r1, [pc, #32]	@ (10000684 <__NVIC_SetPriority+0x50>)
10000664:	88fb      	ldrh	r3, [r7, #6]
10000666:	f003 030f 	and.w	r3, r3, #15
1000066a:	3b04      	subs	r3, #4
1000066c:	0112      	lsls	r2, r2, #4
1000066e:	b2d2      	uxtb	r2, r2
10000670:	440b      	add	r3, r1
10000672:	761a      	strb	r2, [r3, #24]
}
10000674:	bf00      	nop
10000676:	370c      	adds	r7, #12
10000678:	46bd      	mov	sp, r7
1000067a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000067e:	4770      	bx	lr
10000680:	e000e100 	.word	0xe000e100
10000684:	e000ed00 	.word	0xe000ed00

10000688 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
10000688:	b480      	push	{r7}
1000068a:	b089      	sub	sp, #36	@ 0x24
1000068c:	af00      	add	r7, sp, #0
1000068e:	60f8      	str	r0, [r7, #12]
10000690:	60b9      	str	r1, [r7, #8]
10000692:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
10000694:	68fb      	ldr	r3, [r7, #12]
10000696:	f003 0307 	and.w	r3, r3, #7
1000069a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
1000069c:	69fb      	ldr	r3, [r7, #28]
1000069e:	f1c3 0307 	rsb	r3, r3, #7
100006a2:	2b04      	cmp	r3, #4
100006a4:	bf28      	it	cs
100006a6:	2304      	movcs	r3, #4
100006a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
100006aa:	69fb      	ldr	r3, [r7, #28]
100006ac:	3304      	adds	r3, #4
100006ae:	2b06      	cmp	r3, #6
100006b0:	d902      	bls.n	100006b8 <NVIC_EncodePriority+0x30>
100006b2:	69fb      	ldr	r3, [r7, #28]
100006b4:	3b03      	subs	r3, #3
100006b6:	e000      	b.n	100006ba <NVIC_EncodePriority+0x32>
100006b8:	2300      	movs	r3, #0
100006ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
100006bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
100006c0:	69bb      	ldr	r3, [r7, #24]
100006c2:	fa02 f303 	lsl.w	r3, r2, r3
100006c6:	43da      	mvns	r2, r3
100006c8:	68bb      	ldr	r3, [r7, #8]
100006ca:	401a      	ands	r2, r3
100006cc:	697b      	ldr	r3, [r7, #20]
100006ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
100006d0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
100006d4:	697b      	ldr	r3, [r7, #20]
100006d6:	fa01 f303 	lsl.w	r3, r1, r3
100006da:	43d9      	mvns	r1, r3
100006dc:	687b      	ldr	r3, [r7, #4]
100006de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
100006e0:	4313      	orrs	r3, r2
         );
}
100006e2:	4618      	mov	r0, r3
100006e4:	3724      	adds	r7, #36	@ 0x24
100006e6:	46bd      	mov	sp, r7
100006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
100006ec:	4770      	bx	lr
	...

100006f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
100006f0:	b580      	push	{r7, lr}
100006f2:	b082      	sub	sp, #8
100006f4:	af00      	add	r7, sp, #0
100006f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
100006f8:	687b      	ldr	r3, [r7, #4]
100006fa:	3b01      	subs	r3, #1
100006fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
10000700:	d301      	bcc.n	10000706 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
10000702:	2301      	movs	r3, #1
10000704:	e00f      	b.n	10000726 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
10000706:	4a0a      	ldr	r2, [pc, #40]	@ (10000730 <SysTick_Config+0x40>)
10000708:	687b      	ldr	r3, [r7, #4]
1000070a:	3b01      	subs	r3, #1
1000070c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
1000070e:	210f      	movs	r1, #15
10000710:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
10000714:	f7ff ff8e 	bl	10000634 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
10000718:	4b05      	ldr	r3, [pc, #20]	@ (10000730 <SysTick_Config+0x40>)
1000071a:	2200      	movs	r2, #0
1000071c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1000071e:	4b04      	ldr	r3, [pc, #16]	@ (10000730 <SysTick_Config+0x40>)
10000720:	2207      	movs	r2, #7
10000722:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
10000724:	2300      	movs	r3, #0
}
10000726:	4618      	mov	r0, r3
10000728:	3708      	adds	r7, #8
1000072a:	46bd      	mov	sp, r7
1000072c:	bd80      	pop	{r7, pc}
1000072e:	bf00      	nop
10000730:	e000e010 	.word	0xe000e010

10000734 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
10000734:	b580      	push	{r7, lr}
10000736:	b082      	sub	sp, #8
10000738:	af00      	add	r7, sp, #0
1000073a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
1000073c:	6878      	ldr	r0, [r7, #4]
1000073e:	f7ff ff29 	bl	10000594 <__NVIC_SetPriorityGrouping>
}
10000742:	bf00      	nop
10000744:	3708      	adds	r7, #8
10000746:	46bd      	mov	sp, r7
10000748:	bd80      	pop	{r7, pc}

1000074a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
1000074a:	b580      	push	{r7, lr}
1000074c:	b086      	sub	sp, #24
1000074e:	af00      	add	r7, sp, #0
10000750:	4603      	mov	r3, r0
10000752:	60b9      	str	r1, [r7, #8]
10000754:	607a      	str	r2, [r7, #4]
10000756:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup = 0x00;
10000758:	2300      	movs	r3, #0
1000075a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
1000075c:	f7ff ff3e 	bl	100005dc <__NVIC_GetPriorityGrouping>
10000760:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
10000762:	687a      	ldr	r2, [r7, #4]
10000764:	68b9      	ldr	r1, [r7, #8]
10000766:	6978      	ldr	r0, [r7, #20]
10000768:	f7ff ff8e 	bl	10000688 <NVIC_EncodePriority>
1000076c:	4602      	mov	r2, r0
1000076e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
10000772:	4611      	mov	r1, r2
10000774:	4618      	mov	r0, r3
10000776:	f7ff ff5d 	bl	10000634 <__NVIC_SetPriority>
}
1000077a:	bf00      	nop
1000077c:	3718      	adds	r7, #24
1000077e:	46bd      	mov	sp, r7
10000780:	bd80      	pop	{r7, pc}

10000782 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32mp1xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
10000782:	b580      	push	{r7, lr}
10000784:	b082      	sub	sp, #8
10000786:	af00      	add	r7, sp, #0
10000788:	4603      	mov	r3, r0
1000078a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
1000078c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
10000790:	4618      	mov	r0, r3
10000792:	f7ff ff31 	bl	100005f8 <__NVIC_EnableIRQ>
}
10000796:	bf00      	nop
10000798:	3708      	adds	r7, #8
1000079a:	46bd      	mov	sp, r7
1000079c:	bd80      	pop	{r7, pc}

1000079e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
1000079e:	b580      	push	{r7, lr}
100007a0:	b082      	sub	sp, #8
100007a2:	af00      	add	r7, sp, #0
100007a4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
100007a6:	6878      	ldr	r0, [r7, #4]
100007a8:	f7ff ffa2 	bl	100006f0 <SysTick_Config>
100007ac:	4603      	mov	r3, r0
}
100007ae:	4618      	mov	r0, r3
100007b0:	3708      	adds	r7, #8
100007b2:	46bd      	mov	sp, r7
100007b4:	bd80      	pop	{r7, pc}
	...

100007b8 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
100007b8:	b580      	push	{r7, lr}
100007ba:	b084      	sub	sp, #16
100007bc:	af00      	add	r7, sp, #0
100007be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
100007c0:	2300      	movs	r3, #0
100007c2:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
100007c4:	687b      	ldr	r3, [r7, #4]
100007c6:	2b00      	cmp	r3, #0
100007c8:	d01e      	beq.n	10000808 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

#if defined(CORE_CM4)
    IPCC_CommonTypeDef *currentInstance = IPCC_C2;
100007ca:	4b13      	ldr	r3, [pc, #76]	@ (10000818 <HAL_IPCC_Init+0x60>)
100007cc:	60bb      	str	r3, [r7, #8]
#else
    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
#endif

    if (hipcc->State == HAL_IPCC_STATE_RESET)
100007ce:	687b      	ldr	r3, [r7, #4]
100007d0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
100007d4:	b2db      	uxtb	r3, r3
100007d6:	2b00      	cmp	r3, #0
100007d8:	d102      	bne.n	100007e0 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
100007da:	6878      	ldr	r0, [r7, #4]
100007dc:	f7ff fc7c 	bl	100000d8 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
100007e0:	68b8      	ldr	r0, [r7, #8]
100007e2:	f000 f8f5 	bl	100009d0 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
100007e6:	68bb      	ldr	r3, [r7, #8]
100007e8:	681b      	ldr	r3, [r3, #0]
100007ea:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
100007ee:	68bb      	ldr	r3, [r7, #8]
100007f0:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
100007f2:	6878      	ldr	r0, [r7, #4]
100007f4:	f000 f8c6 	bl	10000984 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
100007f8:	687b      	ldr	r3, [r7, #4]
100007fa:	2200      	movs	r2, #0
100007fc:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
100007fe:	687b      	ldr	r3, [r7, #4]
10000800:	2201      	movs	r2, #1
10000802:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
10000806:	e001      	b.n	1000080c <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
10000808:	2301      	movs	r3, #1
1000080a:	73fb      	strb	r3, [r7, #15]
  }

  return err;
1000080c:	7bfb      	ldrb	r3, [r7, #15]
}
1000080e:	4618      	mov	r0, r3
10000810:	3710      	adds	r7, #16
10000812:	46bd      	mov	sp, r7
10000814:	bd80      	pop	{r7, pc}
10000816:	bf00      	nop
10000818:	4c001010 	.word	0x4c001010

1000081c <HAL_IPCC_TX_IRQHandler>:
  * @brief  This function handles IPCC Tx Free interrupt request.
  * @param  hipcc IPCC handle
  * @retval None
  */
void HAL_IPCC_TX_IRQHandler(IPCC_HandleTypeDef *const hipcc)
{
1000081c:	b580      	push	{r7, lr}
1000081e:	b086      	sub	sp, #24
10000820:	af00      	add	r7, sp, #0
10000822:	6078      	str	r0, [r7, #4]
  uint32_t irqmask;
  uint32_t bit_pos;
  uint32_t ch_count = 0U;
10000824:	2300      	movs	r3, #0
10000826:	613b      	str	r3, [r7, #16]
#if defined(CORE_CM4)
  IPCC_CommonTypeDef *currentInstance = IPCC_C2;
10000828:	4b22      	ldr	r3, [pc, #136]	@ (100008b4 <HAL_IPCC_TX_IRQHandler+0x98>)
1000082a:	60fb      	str	r3, [r7, #12]
#else
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
#endif

  /* check the Tx free channels which are not masked */
  irqmask = ~(currentInstance->MR) & IPCC_ALL_TX_BUF;
1000082c:	68fb      	ldr	r3, [r7, #12]
1000082e:	685b      	ldr	r3, [r3, #4]
10000830:	43db      	mvns	r3, r3
10000832:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
10000836:	617b      	str	r3, [r7, #20]
  irqmask = irqmask & ~(currentInstance->SR << IPCC_MR_CH1FM_Pos);
10000838:	68fb      	ldr	r3, [r7, #12]
1000083a:	68db      	ldr	r3, [r3, #12]
1000083c:	041b      	lsls	r3, r3, #16
1000083e:	43db      	mvns	r3, r3
10000840:	697a      	ldr	r2, [r7, #20]
10000842:	4013      	ands	r3, r2
10000844:	617b      	str	r3, [r7, #20]

  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
10000846:	e02c      	b.n	100008a2 <HAL_IPCC_TX_IRQHandler+0x86>
  {
    bit_pos = 1UL << (IPCC_MR_CH1FM_Pos + (ch_count & CHANNEL_INDEX_Msk));
10000848:	693b      	ldr	r3, [r7, #16]
1000084a:	f003 030f 	and.w	r3, r3, #15
1000084e:	3310      	adds	r3, #16
10000850:	2201      	movs	r2, #1
10000852:	fa02 f303 	lsl.w	r3, r2, r3
10000856:	60bb      	str	r3, [r7, #8]

    if ((irqmask & bit_pos) != 0U)
10000858:	697a      	ldr	r2, [r7, #20]
1000085a:	68bb      	ldr	r3, [r7, #8]
1000085c:	4013      	ands	r3, r2
1000085e:	2b00      	cmp	r3, #0
10000860:	d01c      	beq.n	1000089c <HAL_IPCC_TX_IRQHandler+0x80>
    {
      /* mask the channel Free interrupt  */
      currentInstance->MR |= bit_pos;
10000862:	68fb      	ldr	r3, [r7, #12]
10000864:	685a      	ldr	r2, [r3, #4]
10000866:	68bb      	ldr	r3, [r7, #8]
10000868:	431a      	orrs	r2, r3
1000086a:	68fb      	ldr	r3, [r7, #12]
1000086c:	605a      	str	r2, [r3, #4]
      if (hipcc->ChannelCallbackTx[ch_count] != NULL)
1000086e:	687a      	ldr	r2, [r7, #4]
10000870:	693b      	ldr	r3, [r7, #16]
10000872:	3306      	adds	r3, #6
10000874:	009b      	lsls	r3, r3, #2
10000876:	4413      	add	r3, r2
10000878:	685b      	ldr	r3, [r3, #4]
1000087a:	2b00      	cmp	r3, #0
1000087c:	d009      	beq.n	10000892 <HAL_IPCC_TX_IRQHandler+0x76>
      {
        hipcc->ChannelCallbackTx[ch_count](hipcc, ch_count, IPCC_CHANNEL_DIR_TX);
1000087e:	687a      	ldr	r2, [r7, #4]
10000880:	693b      	ldr	r3, [r7, #16]
10000882:	3306      	adds	r3, #6
10000884:	009b      	lsls	r3, r3, #2
10000886:	4413      	add	r3, r2
10000888:	685b      	ldr	r3, [r3, #4]
1000088a:	2200      	movs	r2, #0
1000088c:	6939      	ldr	r1, [r7, #16]
1000088e:	6878      	ldr	r0, [r7, #4]
10000890:	4798      	blx	r3
      }
      irqmask =  irqmask & ~(bit_pos);
10000892:	68bb      	ldr	r3, [r7, #8]
10000894:	43db      	mvns	r3, r3
10000896:	697a      	ldr	r2, [r7, #20]
10000898:	4013      	ands	r3, r2
1000089a:	617b      	str	r3, [r7, #20]
    }
    ch_count++;
1000089c:	693b      	ldr	r3, [r7, #16]
1000089e:	3301      	adds	r3, #1
100008a0:	613b      	str	r3, [r7, #16]
  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
100008a2:	697b      	ldr	r3, [r7, #20]
100008a4:	2b00      	cmp	r3, #0
100008a6:	d1cf      	bne.n	10000848 <HAL_IPCC_TX_IRQHandler+0x2c>
  }
}
100008a8:	bf00      	nop
100008aa:	bf00      	nop
100008ac:	3718      	adds	r7, #24
100008ae:	46bd      	mov	sp, r7
100008b0:	bd80      	pop	{r7, pc}
100008b2:	bf00      	nop
100008b4:	4c001010 	.word	0x4c001010

100008b8 <HAL_IPCC_RX_IRQHandler>:
  * @brief  This function handles IPCC Rx Occupied interrupt request.
  * @param  hipcc : IPCC handle
  * @retval None
  */
void HAL_IPCC_RX_IRQHandler(IPCC_HandleTypeDef *const hipcc)
{
100008b8:	b580      	push	{r7, lr}
100008ba:	b088      	sub	sp, #32
100008bc:	af00      	add	r7, sp, #0
100008be:	6078      	str	r0, [r7, #4]
  uint32_t irqmask;
  uint32_t bit_pos;
  uint32_t ch_count = 0U;
100008c0:	2300      	movs	r3, #0
100008c2:	61bb      	str	r3, [r7, #24]
#if defined(CORE_CM4)
  IPCC_CommonTypeDef *currentInstance = IPCC_C2;
100008c4:	4b20      	ldr	r3, [pc, #128]	@ (10000948 <HAL_IPCC_RX_IRQHandler+0x90>)
100008c6:	617b      	str	r3, [r7, #20]
  IPCC_CommonTypeDef *otherInstance = IPCC_C1;
100008c8:	4b20      	ldr	r3, [pc, #128]	@ (1000094c <HAL_IPCC_RX_IRQHandler+0x94>)
100008ca:	613b      	str	r3, [r7, #16]
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
  IPCC_CommonTypeDef *otherInstance = IPCC_C2;
#endif

  /* check the Rx occupied channels which are not masked */
  irqmask = ~(currentInstance->MR) & IPCC_ALL_RX_BUF;
100008cc:	697b      	ldr	r3, [r7, #20]
100008ce:	685b      	ldr	r3, [r3, #4]
100008d0:	43db      	mvns	r3, r3
100008d2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
100008d6:	61fb      	str	r3, [r7, #28]
  irqmask = irqmask & otherInstance->SR;
100008d8:	693b      	ldr	r3, [r7, #16]
100008da:	68db      	ldr	r3, [r3, #12]
100008dc:	69fa      	ldr	r2, [r7, #28]
100008de:	4013      	ands	r3, r2
100008e0:	61fb      	str	r3, [r7, #28]

  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
100008e2:	e029      	b.n	10000938 <HAL_IPCC_RX_IRQHandler+0x80>
  {
    bit_pos = 1UL << (ch_count & CHANNEL_INDEX_Msk);
100008e4:	69bb      	ldr	r3, [r7, #24]
100008e6:	f003 030f 	and.w	r3, r3, #15
100008ea:	2201      	movs	r2, #1
100008ec:	fa02 f303 	lsl.w	r3, r2, r3
100008f0:	60fb      	str	r3, [r7, #12]

    if ((irqmask & bit_pos) != 0U)
100008f2:	69fa      	ldr	r2, [r7, #28]
100008f4:	68fb      	ldr	r3, [r7, #12]
100008f6:	4013      	ands	r3, r2
100008f8:	2b00      	cmp	r3, #0
100008fa:	d01a      	beq.n	10000932 <HAL_IPCC_RX_IRQHandler+0x7a>
    {
      /* mask the channel occupied interrupt */
      currentInstance->MR |= bit_pos;
100008fc:	697b      	ldr	r3, [r7, #20]
100008fe:	685a      	ldr	r2, [r3, #4]
10000900:	68fb      	ldr	r3, [r7, #12]
10000902:	431a      	orrs	r2, r3
10000904:	697b      	ldr	r3, [r7, #20]
10000906:	605a      	str	r2, [r3, #4]
      if (hipcc->ChannelCallbackRx[ch_count] != NULL)
10000908:	687a      	ldr	r2, [r7, #4]
1000090a:	69bb      	ldr	r3, [r7, #24]
1000090c:	009b      	lsls	r3, r3, #2
1000090e:	4413      	add	r3, r2
10000910:	685b      	ldr	r3, [r3, #4]
10000912:	2b00      	cmp	r3, #0
10000914:	d008      	beq.n	10000928 <HAL_IPCC_RX_IRQHandler+0x70>
      {
        hipcc->ChannelCallbackRx[ch_count](hipcc, ch_count, IPCC_CHANNEL_DIR_RX);
10000916:	687a      	ldr	r2, [r7, #4]
10000918:	69bb      	ldr	r3, [r7, #24]
1000091a:	009b      	lsls	r3, r3, #2
1000091c:	4413      	add	r3, r2
1000091e:	685b      	ldr	r3, [r3, #4]
10000920:	2201      	movs	r2, #1
10000922:	69b9      	ldr	r1, [r7, #24]
10000924:	6878      	ldr	r0, [r7, #4]
10000926:	4798      	blx	r3
      }
      irqmask = irqmask & ~(bit_pos);
10000928:	68fb      	ldr	r3, [r7, #12]
1000092a:	43db      	mvns	r3, r3
1000092c:	69fa      	ldr	r2, [r7, #28]
1000092e:	4013      	ands	r3, r2
10000930:	61fb      	str	r3, [r7, #28]
    }
    ch_count++;
10000932:	69bb      	ldr	r3, [r7, #24]
10000934:	3301      	adds	r3, #1
10000936:	61bb      	str	r3, [r7, #24]
  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
10000938:	69fb      	ldr	r3, [r7, #28]
1000093a:	2b00      	cmp	r3, #0
1000093c:	d1d2      	bne.n	100008e4 <HAL_IPCC_RX_IRQHandler+0x2c>
  }
}
1000093e:	bf00      	nop
10000940:	bf00      	nop
10000942:	3720      	adds	r7, #32
10000944:	46bd      	mov	sp, r7
10000946:	bd80      	pop	{r7, pc}
10000948:	4c001010 	.word	0x4c001010
1000094c:	4c001000 	.word	0x4c001000

10000950 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
10000950:	b480      	push	{r7}
10000952:	b085      	sub	sp, #20
10000954:	af00      	add	r7, sp, #0
10000956:	60f8      	str	r0, [r7, #12]
10000958:	60b9      	str	r1, [r7, #8]
1000095a:	4613      	mov	r3, r2
1000095c:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
1000095e:	bf00      	nop
10000960:	3714      	adds	r7, #20
10000962:	46bd      	mov	sp, r7
10000964:	f85d 7b04 	ldr.w	r7, [sp], #4
10000968:	4770      	bx	lr

1000096a <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
1000096a:	b480      	push	{r7}
1000096c:	b085      	sub	sp, #20
1000096e:	af00      	add	r7, sp, #0
10000970:	60f8      	str	r0, [r7, #12]
10000972:	60b9      	str	r1, [r7, #8]
10000974:	4613      	mov	r3, r2
10000976:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
10000978:	bf00      	nop
1000097a:	3714      	adds	r7, #20
1000097c:	46bd      	mov	sp, r7
1000097e:	f85d 7b04 	ldr.w	r7, [sp], #4
10000982:	4770      	bx	lr

10000984 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
10000984:	b480      	push	{r7}
10000986:	b085      	sub	sp, #20
10000988:	af00      	add	r7, sp, #0
1000098a:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
1000098c:	2300      	movs	r3, #0
1000098e:	60fb      	str	r3, [r7, #12]
10000990:	e00f      	b.n	100009b2 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
10000992:	687a      	ldr	r2, [r7, #4]
10000994:	68fb      	ldr	r3, [r7, #12]
10000996:	009b      	lsls	r3, r3, #2
10000998:	4413      	add	r3, r2
1000099a:	4a0b      	ldr	r2, [pc, #44]	@ (100009c8 <IPCC_SetDefaultCallbacks+0x44>)
1000099c:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
1000099e:	687a      	ldr	r2, [r7, #4]
100009a0:	68fb      	ldr	r3, [r7, #12]
100009a2:	3306      	adds	r3, #6
100009a4:	009b      	lsls	r3, r3, #2
100009a6:	4413      	add	r3, r2
100009a8:	4a08      	ldr	r2, [pc, #32]	@ (100009cc <IPCC_SetDefaultCallbacks+0x48>)
100009aa:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
100009ac:	68fb      	ldr	r3, [r7, #12]
100009ae:	3301      	adds	r3, #1
100009b0:	60fb      	str	r3, [r7, #12]
100009b2:	68fb      	ldr	r3, [r7, #12]
100009b4:	2b05      	cmp	r3, #5
100009b6:	d9ec      	bls.n	10000992 <IPCC_SetDefaultCallbacks+0xe>
  }
}
100009b8:	bf00      	nop
100009ba:	bf00      	nop
100009bc:	3714      	adds	r7, #20
100009be:	46bd      	mov	sp, r7
100009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
100009c4:	4770      	bx	lr
100009c6:	bf00      	nop
100009c8:	10000951 	.word	0x10000951
100009cc:	1000096b 	.word	0x1000096b

100009d0 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
100009d0:	b480      	push	{r7}
100009d2:	b083      	sub	sp, #12
100009d4:	af00      	add	r7, sp, #0
100009d6:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
100009d8:	687b      	ldr	r3, [r7, #4]
100009da:	2200      	movs	r2, #0
100009dc:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
100009de:	687b      	ldr	r3, [r7, #4]
100009e0:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
100009e4:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
100009e6:	687b      	ldr	r3, [r7, #4]
100009e8:	223f      	movs	r2, #63	@ 0x3f
100009ea:	609a      	str	r2, [r3, #8]
}
100009ec:	bf00      	nop
100009ee:	370c      	adds	r7, #12
100009f0:	46bd      	mov	sp, r7
100009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
100009f6:	4770      	bx	lr

100009f8 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
100009f8:	b480      	push	{r7}
100009fa:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
100009fc:	4b05      	ldr	r3, [pc, #20]	@ (10000a14 <HAL_PWR_EnableBkUpAccess+0x1c>)
100009fe:	681b      	ldr	r3, [r3, #0]
10000a00:	4a04      	ldr	r2, [pc, #16]	@ (10000a14 <HAL_PWR_EnableBkUpAccess+0x1c>)
10000a02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
10000a06:	6013      	str	r3, [r2, #0]
}
10000a08:	bf00      	nop
10000a0a:	46bd      	mov	sp, r7
10000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
10000a10:	4770      	bx	lr
10000a12:	bf00      	nop
10000a14:	50001000 	.word	0x50001000

10000a18 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
10000a18:	b580      	push	{r7, lr}
10000a1a:	b084      	sub	sp, #16
10000a1c:	af00      	add	r7, sp, #0
10000a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef result = HAL_OK;
10000a20:	2300      	movs	r3, #0
10000a22:	73fb      	strb	r3, [r7, #15]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
10000a24:	687b      	ldr	r3, [r7, #4]
10000a26:	2b00      	cmp	r3, #0
10000a28:	d101      	bne.n	10000a2e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
10000a2a:	2301      	movs	r3, #1
10000a2c:	e320      	b.n	10001070 <HAL_RCC_OscConfig+0x658>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
10000a2e:	687b      	ldr	r3, [r7, #4]
10000a30:	681b      	ldr	r3, [r3, #0]
10000a32:	f003 0301 	and.w	r3, r3, #1
10000a36:	2b00      	cmp	r3, #0
10000a38:	f000 8081 	beq.w	10000b3e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used somewhere in the system it will not be disabled */
    if (IS_HSE_IN_USE())
10000a3c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000a40:	6a1b      	ldr	r3, [r3, #32]
10000a42:	f003 0303 	and.w	r3, r3, #3
10000a46:	2b01      	cmp	r3, #1
10000a48:	d107      	bne.n	10000a5a <HAL_RCC_OscConfig+0x42>
10000a4a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000a4e:	6a1b      	ldr	r3, [r3, #32]
10000a50:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10000a54:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10000a58:	d054      	beq.n	10000b04 <HAL_RCC_OscConfig+0xec>
10000a5a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10000a60:	f003 0307 	and.w	r3, r3, #7
10000a64:	2b01      	cmp	r3, #1
10000a66:	d107      	bne.n	10000a78 <HAL_RCC_OscConfig+0x60>
10000a68:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10000a6e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10000a72:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10000a76:	d045      	beq.n	10000b04 <HAL_RCC_OscConfig+0xec>
10000a78:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000a7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10000a7e:	f003 0303 	and.w	r3, r3, #3
10000a82:	2b01      	cmp	r3, #1
10000a84:	d107      	bne.n	10000a96 <HAL_RCC_OscConfig+0x7e>
10000a86:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000a8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10000a8c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10000a90:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10000a94:	d036      	beq.n	10000b04 <HAL_RCC_OscConfig+0xec>
10000a96:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000a9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10000a9c:	f003 0303 	and.w	r3, r3, #3
10000aa0:	2b01      	cmp	r3, #1
10000aa2:	d10f      	bne.n	10000ac4 <HAL_RCC_OscConfig+0xac>
10000aa4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000aa8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10000aac:	f003 0302 	and.w	r3, r3, #2
10000ab0:	2b02      	cmp	r3, #2
10000ab2:	d027      	beq.n	10000b04 <HAL_RCC_OscConfig+0xec>
10000ab4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000ab8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10000abc:	f003 0302 	and.w	r3, r3, #2
10000ac0:	2b02      	cmp	r3, #2
10000ac2:	d01f      	beq.n	10000b04 <HAL_RCC_OscConfig+0xec>
10000ac4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000ac8:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
10000acc:	f003 0303 	and.w	r3, r3, #3
10000ad0:	2b01      	cmp	r3, #1
10000ad2:	d107      	bne.n	10000ae4 <HAL_RCC_OscConfig+0xcc>
10000ad4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000ad8:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10000adc:	f003 0302 	and.w	r3, r3, #2
10000ae0:	2b02      	cmp	r3, #2
10000ae2:	d00f      	beq.n	10000b04 <HAL_RCC_OscConfig+0xec>
10000ae4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000ae8:	f8d3 3824 	ldr.w	r3, [r3, #2084]	@ 0x824
10000aec:	f003 0303 	and.w	r3, r3, #3
10000af0:	2b01      	cmp	r3, #1
10000af2:	d117      	bne.n	10000b24 <HAL_RCC_OscConfig+0x10c>
10000af4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000af8:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10000afc:	f003 0302 	and.w	r3, r3, #2
10000b00:	2b02      	cmp	r3, #2
10000b02:	d10f      	bne.n	10000b24 <HAL_RCC_OscConfig+0x10c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState != RCC_HSE_ON))
10000b04:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000b08:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10000b0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
10000b10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
10000b14:	d112      	bne.n	10000b3c <HAL_RCC_OscConfig+0x124>
10000b16:	687b      	ldr	r3, [r7, #4]
10000b18:	685b      	ldr	r3, [r3, #4]
10000b1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
10000b1e:	d00d      	beq.n	10000b3c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
10000b20:	2301      	movs	r3, #1
10000b22:	e2a5      	b.n	10001070 <HAL_RCC_OscConfig+0x658>
      }
    }
    else
    {
      /* Configure HSE oscillator */
      result = HAL_RCC_HSEConfig(RCC_OscInitStruct->HSEState);
10000b24:	687b      	ldr	r3, [r7, #4]
10000b26:	685b      	ldr	r3, [r3, #4]
10000b28:	4618      	mov	r0, r3
10000b2a:	f000 faa7 	bl	1000107c <HAL_RCC_HSEConfig>
10000b2e:	4603      	mov	r3, r0
10000b30:	73fb      	strb	r3, [r7, #15]
      if (result != HAL_OK)
10000b32:	7bfb      	ldrb	r3, [r7, #15]
10000b34:	2b00      	cmp	r3, #0
10000b36:	d002      	beq.n	10000b3e <HAL_RCC_OscConfig+0x126>
      {
        return result;
10000b38:	7bfb      	ldrb	r3, [r7, #15]
10000b3a:	e299      	b.n	10001070 <HAL_RCC_OscConfig+0x658>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState != RCC_HSE_ON))
10000b3c:	bf00      	nop
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
10000b3e:	687b      	ldr	r3, [r7, #4]
10000b40:	681b      	ldr	r3, [r3, #0]
10000b42:	f003 0302 	and.w	r3, r3, #2
10000b46:	2b00      	cmp	r3, #0
10000b48:	f000 814e 	beq.w	10000de8 <HAL_RCC_OscConfig+0x3d0>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDivValue));

    /* When the HSI is used as system clock it will not disabled */
    if (IS_HSI_IN_USE())
10000b4c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000b50:	6a1b      	ldr	r3, [r3, #32]
10000b52:	f003 0303 	and.w	r3, r3, #3
10000b56:	2b00      	cmp	r3, #0
10000b58:	d107      	bne.n	10000b6a <HAL_RCC_OscConfig+0x152>
10000b5a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000b5e:	6a1b      	ldr	r3, [r3, #32]
10000b60:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10000b64:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10000b68:	d055      	beq.n	10000c16 <HAL_RCC_OscConfig+0x1fe>
10000b6a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10000b70:	f003 0307 	and.w	r3, r3, #7
10000b74:	2b00      	cmp	r3, #0
10000b76:	d107      	bne.n	10000b88 <HAL_RCC_OscConfig+0x170>
10000b78:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10000b7e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10000b82:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10000b86:	d046      	beq.n	10000c16 <HAL_RCC_OscConfig+0x1fe>
10000b88:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000b8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10000b8e:	f003 0303 	and.w	r3, r3, #3
10000b92:	2b00      	cmp	r3, #0
10000b94:	d107      	bne.n	10000ba6 <HAL_RCC_OscConfig+0x18e>
10000b96:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000b9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10000b9c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10000ba0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10000ba4:	d037      	beq.n	10000c16 <HAL_RCC_OscConfig+0x1fe>
10000ba6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000baa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10000bac:	f003 0303 	and.w	r3, r3, #3
10000bb0:	2b00      	cmp	r3, #0
10000bb2:	d10f      	bne.n	10000bd4 <HAL_RCC_OscConfig+0x1bc>
10000bb4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000bb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10000bbc:	f003 0302 	and.w	r3, r3, #2
10000bc0:	2b02      	cmp	r3, #2
10000bc2:	d028      	beq.n	10000c16 <HAL_RCC_OscConfig+0x1fe>
10000bc4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000bc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10000bcc:	f003 0302 	and.w	r3, r3, #2
10000bd0:	2b02      	cmp	r3, #2
10000bd2:	d020      	beq.n	10000c16 <HAL_RCC_OscConfig+0x1fe>
10000bd4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000bd8:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
10000bdc:	f003 0303 	and.w	r3, r3, #3
10000be0:	2b00      	cmp	r3, #0
10000be2:	d107      	bne.n	10000bf4 <HAL_RCC_OscConfig+0x1dc>
10000be4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000be8:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10000bec:	f003 0302 	and.w	r3, r3, #2
10000bf0:	2b02      	cmp	r3, #2
10000bf2:	d010      	beq.n	10000c16 <HAL_RCC_OscConfig+0x1fe>
10000bf4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000bf8:	f8d3 3824 	ldr.w	r3, [r3, #2084]	@ 0x824
10000bfc:	f003 0303 	and.w	r3, r3, #3
10000c00:	2b00      	cmp	r3, #0
10000c02:	f040 8088 	bne.w	10000d16 <HAL_RCC_OscConfig+0x2fe>
10000c06:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000c0a:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10000c0e:	f003 0302 	and.w	r3, r3, #2
10000c12:	2b02      	cmp	r3, #2
10000c14:	d17f      	bne.n	10000d16 <HAL_RCC_OscConfig+0x2fe>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
10000c16:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000c1a:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10000c1e:	f003 0301 	and.w	r3, r3, #1
10000c22:	2b01      	cmp	r3, #1
10000c24:	d105      	bne.n	10000c32 <HAL_RCC_OscConfig+0x21a>
10000c26:	687b      	ldr	r3, [r7, #4]
10000c28:	68db      	ldr	r3, [r3, #12]
10000c2a:	2b01      	cmp	r3, #1
10000c2c:	d001      	beq.n	10000c32 <HAL_RCC_OscConfig+0x21a>
      {
        return HAL_ERROR;
10000c2e:	2301      	movs	r3, #1
10000c30:	e21e      	b.n	10001070 <HAL_RCC_OscConfig+0x658>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
10000c32:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000c36:	699b      	ldr	r3, [r3, #24]
10000c38:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
10000c3c:	687b      	ldr	r3, [r7, #4]
10000c3e:	691b      	ldr	r3, [r3, #16]
10000c40:	021b      	lsls	r3, r3, #8
10000c42:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10000c46:	4313      	orrs	r3, r2
10000c48:	618b      	str	r3, [r1, #24]

        /* It is not allowed to change HSIDIV if HSI is currently used as
         * reference clock for a PLL
         */
        if (((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) ||
10000c4a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000c4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10000c50:	f003 0303 	and.w	r3, r3, #3
10000c54:	2b00      	cmp	r3, #0
10000c56:	d10f      	bne.n	10000c78 <HAL_RCC_OscConfig+0x260>
             ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY)) &&
10000c58:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000c5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10000c60:	f003 0302 	and.w	r3, r3, #2
        if (((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) ||
10000c64:	2b02      	cmp	r3, #2
10000c66:	d047      	beq.n	10000cf8 <HAL_RCC_OscConfig+0x2e0>
              ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY))))) &&
10000c68:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000c6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10000c70:	f003 0302 	and.w	r3, r3, #2
             ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY)) &&
10000c74:	2b02      	cmp	r3, #2
10000c76:	d03f      	beq.n	10000cf8 <HAL_RCC_OscConfig+0x2e0>
            ((__HAL_RCC_GET_PLL3_SOURCE() != RCC_PLL3SOURCE_HSI) ||
10000c78:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000c7c:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
10000c80:	f003 0303 	and.w	r3, r3, #3
              ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY))))) &&
10000c84:	2b00      	cmp	r3, #0
10000c86:	d107      	bne.n	10000c98 <HAL_RCC_OscConfig+0x280>
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY))) &&
10000c88:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000c8c:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10000c90:	f003 0302 	and.w	r3, r3, #2
            ((__HAL_RCC_GET_PLL3_SOURCE() != RCC_PLL3SOURCE_HSI) ||
10000c94:	2b02      	cmp	r3, #2
10000c96:	d02f      	beq.n	10000cf8 <HAL_RCC_OscConfig+0x2e0>
            ((__HAL_RCC_GET_PLL4_SOURCE() != RCC_PLL4SOURCE_HSI) ||
10000c98:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000c9c:	f8d3 3824 	ldr.w	r3, [r3, #2084]	@ 0x824
10000ca0:	f003 0303 	and.w	r3, r3, #3
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY))) &&
10000ca4:	2b00      	cmp	r3, #0
10000ca6:	d107      	bne.n	10000cb8 <HAL_RCC_OscConfig+0x2a0>
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY))))
10000ca8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000cac:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10000cb0:	f003 0302 	and.w	r3, r3, #2
            ((__HAL_RCC_GET_PLL4_SOURCE() != RCC_PLL4SOURCE_HSI) ||
10000cb4:	2b02      	cmp	r3, #2
10000cb6:	d01f      	beq.n	10000cf8 <HAL_RCC_OscConfig+0x2e0>
        {
          /* Update HSIDIV value */
          __HAL_RCC_HSI_DIV(RCC_OscInitStruct->HSIDivValue);
10000cb8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000cbc:	699b      	ldr	r3, [r3, #24]
10000cbe:	f023 0203 	bic.w	r2, r3, #3
10000cc2:	687b      	ldr	r3, [r7, #4]
10000cc4:	695b      	ldr	r3, [r3, #20]
10000cc6:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10000cca:	4313      	orrs	r3, r2
10000ccc:	618b      	str	r3, [r1, #24]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
10000cce:	f7ff fc55 	bl	1000057c <HAL_GetTick>
10000cd2:	60b8      	str	r0, [r7, #8]

          /* Wait till HSIDIV is ready */
          while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
10000cd4:	e008      	b.n	10000ce8 <HAL_RCC_OscConfig+0x2d0>
          {
            if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
10000cd6:	f7ff fc51 	bl	1000057c <HAL_GetTick>
10000cda:	4602      	mov	r2, r0
10000cdc:	68bb      	ldr	r3, [r7, #8]
10000cde:	1ad3      	subs	r3, r2, r3
10000ce0:	2b64      	cmp	r3, #100	@ 0x64
10000ce2:	d901      	bls.n	10000ce8 <HAL_RCC_OscConfig+0x2d0>
            {
              return HAL_TIMEOUT;
10000ce4:	2303      	movs	r3, #3
10000ce6:	e1c3      	b.n	10001070 <HAL_RCC_OscConfig+0x658>
          while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
10000ce8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000cec:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10000cf0:	f003 0304 	and.w	r3, r3, #4
10000cf4:	2b04      	cmp	r3, #4
10000cf6:	d1ee      	bne.n	10000cd6 <HAL_RCC_OscConfig+0x2be>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  HAL_RCC_GetSystemCoreClockFreq();
10000cf8:	f001 f809 	bl	10001d0e <HAL_RCC_GetSystemCoreClockFreq>
10000cfc:	4603      	mov	r3, r0
10000cfe:	4ab3      	ldr	r2, [pc, #716]	@ (10000fcc <HAL_RCC_OscConfig+0x5b4>)
10000d00:	6013      	str	r3, [r2, #0]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
10000d02:	4bb3      	ldr	r3, [pc, #716]	@ (10000fd0 <HAL_RCC_OscConfig+0x5b8>)
10000d04:	681b      	ldr	r3, [r3, #0]
10000d06:	4618      	mov	r0, r3
10000d08:	f7ff fbee 	bl	100004e8 <HAL_InitTick>
10000d0c:	4603      	mov	r3, r0
10000d0e:	2b00      	cmp	r3, #0
10000d10:	d069      	beq.n	10000de6 <HAL_RCC_OscConfig+0x3ce>
        {
          return HAL_ERROR;
10000d12:	2301      	movs	r3, #1
10000d14:	e1ac      	b.n	10001070 <HAL_RCC_OscConfig+0x658>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
10000d16:	687b      	ldr	r3, [r7, #4]
10000d18:	68db      	ldr	r3, [r3, #12]
10000d1a:	2b00      	cmp	r3, #0
10000d1c:	d049      	beq.n	10000db2 <HAL_RCC_OscConfig+0x39a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
10000d1e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000d22:	68db      	ldr	r3, [r3, #12]
10000d24:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10000d28:	f043 0301 	orr.w	r3, r3, #1
10000d2c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10000d2e:	f7ff fc25 	bl	1000057c <HAL_GetTick>
10000d32:	60b8      	str	r0, [r7, #8]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10000d34:	e008      	b.n	10000d48 <HAL_RCC_OscConfig+0x330>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
10000d36:	f7ff fc21 	bl	1000057c <HAL_GetTick>
10000d3a:	4602      	mov	r2, r0
10000d3c:	68bb      	ldr	r3, [r7, #8]
10000d3e:	1ad3      	subs	r3, r2, r3
10000d40:	2b64      	cmp	r3, #100	@ 0x64
10000d42:	d901      	bls.n	10000d48 <HAL_RCC_OscConfig+0x330>
          {
            return HAL_TIMEOUT;
10000d44:	2303      	movs	r3, #3
10000d46:	e193      	b.n	10001070 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10000d48:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000d4c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10000d50:	f003 0301 	and.w	r3, r3, #1
10000d54:	2b01      	cmp	r3, #1
10000d56:	d1ee      	bne.n	10000d36 <HAL_RCC_OscConfig+0x31e>
          }
        }

        /* Update HSIDIV value */
        __HAL_RCC_HSI_DIV(RCC_OscInitStruct->HSIDivValue);
10000d58:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000d5c:	699b      	ldr	r3, [r3, #24]
10000d5e:	f023 0203 	bic.w	r2, r3, #3
10000d62:	687b      	ldr	r3, [r7, #4]
10000d64:	695b      	ldr	r3, [r3, #20]
10000d66:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10000d6a:	4313      	orrs	r3, r2
10000d6c:	618b      	str	r3, [r1, #24]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10000d6e:	f7ff fc05 	bl	1000057c <HAL_GetTick>
10000d72:	60b8      	str	r0, [r7, #8]

        /* Wait till HSIDIV is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
10000d74:	e008      	b.n	10000d88 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
10000d76:	f7ff fc01 	bl	1000057c <HAL_GetTick>
10000d7a:	4602      	mov	r2, r0
10000d7c:	68bb      	ldr	r3, [r7, #8]
10000d7e:	1ad3      	subs	r3, r2, r3
10000d80:	2b64      	cmp	r3, #100	@ 0x64
10000d82:	d901      	bls.n	10000d88 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
10000d84:	2303      	movs	r3, #3
10000d86:	e173      	b.n	10001070 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
10000d88:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000d8c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10000d90:	f003 0304 	and.w	r3, r3, #4
10000d94:	2b04      	cmp	r3, #4
10000d96:	d1ee      	bne.n	10000d76 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
10000d98:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000d9c:	699b      	ldr	r3, [r3, #24]
10000d9e:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
10000da2:	687b      	ldr	r3, [r7, #4]
10000da4:	691b      	ldr	r3, [r3, #16]
10000da6:	021b      	lsls	r3, r3, #8
10000da8:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10000dac:	4313      	orrs	r3, r2
10000dae:	618b      	str	r3, [r1, #24]
10000db0:	e01a      	b.n	10000de8 <HAL_RCC_OscConfig+0x3d0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
10000db2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000db6:	2201      	movs	r2, #1
10000db8:	611a      	str	r2, [r3, #16]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10000dba:	f7ff fbdf 	bl	1000057c <HAL_GetTick>
10000dbe:	60b8      	str	r0, [r7, #8]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
10000dc0:	e008      	b.n	10000dd4 <HAL_RCC_OscConfig+0x3bc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
10000dc2:	f7ff fbdb 	bl	1000057c <HAL_GetTick>
10000dc6:	4602      	mov	r2, r0
10000dc8:	68bb      	ldr	r3, [r7, #8]
10000dca:	1ad3      	subs	r3, r2, r3
10000dcc:	2b64      	cmp	r3, #100	@ 0x64
10000dce:	d901      	bls.n	10000dd4 <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
10000dd0:	2303      	movs	r3, #3
10000dd2:	e14d      	b.n	10001070 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
10000dd4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000dd8:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10000ddc:	f003 0301 	and.w	r3, r3, #1
10000de0:	2b01      	cmp	r3, #1
10000de2:	d0ee      	beq.n	10000dc2 <HAL_RCC_OscConfig+0x3aa>
10000de4:	e000      	b.n	10000de8 <HAL_RCC_OscConfig+0x3d0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
10000de6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
10000de8:	687b      	ldr	r3, [r7, #4]
10000dea:	681b      	ldr	r3, [r3, #0]
10000dec:	f003 0310 	and.w	r3, r3, #16
10000df0:	2b00      	cmp	r3, #0
10000df2:	f000 8091 	beq.w	10000f18 <HAL_RCC_OscConfig+0x500>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    if (IS_CSI_IN_USE())
10000df6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000dfa:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
10000dfe:	f003 0303 	and.w	r3, r3, #3
10000e02:	2b02      	cmp	r3, #2
10000e04:	d107      	bne.n	10000e16 <HAL_RCC_OscConfig+0x3fe>
10000e06:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000e0a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10000e0e:	f003 0302 	and.w	r3, r3, #2
10000e12:	2b02      	cmp	r3, #2
10000e14:	d01e      	beq.n	10000e54 <HAL_RCC_OscConfig+0x43c>
10000e16:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000e1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10000e1c:	f003 0303 	and.w	r3, r3, #3
10000e20:	2b02      	cmp	r3, #2
10000e22:	d107      	bne.n	10000e34 <HAL_RCC_OscConfig+0x41c>
10000e24:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000e28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10000e2a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10000e2e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10000e32:	d00f      	beq.n	10000e54 <HAL_RCC_OscConfig+0x43c>
10000e34:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000e38:	f8d3 3824 	ldr.w	r3, [r3, #2084]	@ 0x824
10000e3c:	f003 0303 	and.w	r3, r3, #3
10000e40:	2b02      	cmp	r3, #2
10000e42:	d122      	bne.n	10000e8a <HAL_RCC_OscConfig+0x472>
10000e44:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000e48:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10000e4c:	f003 0302 	and.w	r3, r3, #2
10000e50:	2b02      	cmp	r3, #2
10000e52:	d11a      	bne.n	10000e8a <HAL_RCC_OscConfig+0x472>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
10000e54:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000e58:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10000e5c:	f003 0310 	and.w	r3, r3, #16
10000e60:	2b10      	cmp	r3, #16
10000e62:	d105      	bne.n	10000e70 <HAL_RCC_OscConfig+0x458>
10000e64:	687b      	ldr	r3, [r7, #4]
10000e66:	69db      	ldr	r3, [r3, #28]
10000e68:	2b10      	cmp	r3, #16
10000e6a:	d001      	beq.n	10000e70 <HAL_RCC_OscConfig+0x458>
      {
        return HAL_ERROR;
10000e6c:	2301      	movs	r3, #1
10000e6e:	e0ff      	b.n	10001070 <HAL_RCC_OscConfig+0x658>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
10000e70:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000e74:	69db      	ldr	r3, [r3, #28]
10000e76:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
10000e7a:	687b      	ldr	r3, [r7, #4]
10000e7c:	6a1b      	ldr	r3, [r3, #32]
10000e7e:	021b      	lsls	r3, r3, #8
10000e80:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10000e84:	4313      	orrs	r3, r2
10000e86:	61cb      	str	r3, [r1, #28]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
10000e88:	e046      	b.n	10000f18 <HAL_RCC_OscConfig+0x500>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
10000e8a:	687b      	ldr	r3, [r7, #4]
10000e8c:	69db      	ldr	r3, [r3, #28]
10000e8e:	2b00      	cmp	r3, #0
10000e90:	d029      	beq.n	10000ee6 <HAL_RCC_OscConfig+0x4ce>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
10000e92:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000e96:	68db      	ldr	r3, [r3, #12]
10000e98:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10000e9c:	f043 0310 	orr.w	r3, r3, #16
10000ea0:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10000ea2:	f7ff fb6b 	bl	1000057c <HAL_GetTick>
10000ea6:	60b8      	str	r0, [r7, #8]

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
10000ea8:	e008      	b.n	10000ebc <HAL_RCC_OscConfig+0x4a4>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
10000eaa:	f7ff fb67 	bl	1000057c <HAL_GetTick>
10000eae:	4602      	mov	r2, r0
10000eb0:	68bb      	ldr	r3, [r7, #8]
10000eb2:	1ad3      	subs	r3, r2, r3
10000eb4:	2b64      	cmp	r3, #100	@ 0x64
10000eb6:	d901      	bls.n	10000ebc <HAL_RCC_OscConfig+0x4a4>
          {
            return HAL_TIMEOUT;
10000eb8:	2303      	movs	r3, #3
10000eba:	e0d9      	b.n	10001070 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
10000ebc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000ec0:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10000ec4:	f003 0310 	and.w	r3, r3, #16
10000ec8:	2b10      	cmp	r3, #16
10000eca:	d1ee      	bne.n	10000eaa <HAL_RCC_OscConfig+0x492>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
10000ecc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000ed0:	69db      	ldr	r3, [r3, #28]
10000ed2:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
10000ed6:	687b      	ldr	r3, [r7, #4]
10000ed8:	6a1b      	ldr	r3, [r3, #32]
10000eda:	021b      	lsls	r3, r3, #8
10000edc:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10000ee0:	4313      	orrs	r3, r2
10000ee2:	61cb      	str	r3, [r1, #28]
10000ee4:	e018      	b.n	10000f18 <HAL_RCC_OscConfig+0x500>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
10000ee6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000eea:	2210      	movs	r2, #16
10000eec:	611a      	str	r2, [r3, #16]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10000eee:	f7ff fb45 	bl	1000057c <HAL_GetTick>
10000ef2:	60b8      	str	r0, [r7, #8]

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
10000ef4:	e008      	b.n	10000f08 <HAL_RCC_OscConfig+0x4f0>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
10000ef6:	f7ff fb41 	bl	1000057c <HAL_GetTick>
10000efa:	4602      	mov	r2, r0
10000efc:	68bb      	ldr	r3, [r7, #8]
10000efe:	1ad3      	subs	r3, r2, r3
10000f00:	2b64      	cmp	r3, #100	@ 0x64
10000f02:	d901      	bls.n	10000f08 <HAL_RCC_OscConfig+0x4f0>
          {
            return HAL_TIMEOUT;
10000f04:	2303      	movs	r3, #3
10000f06:	e0b3      	b.n	10001070 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
10000f08:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000f0c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10000f10:	f003 0310 	and.w	r3, r3, #16
10000f14:	2b10      	cmp	r3, #16
10000f16:	d0ee      	beq.n	10000ef6 <HAL_RCC_OscConfig+0x4de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
10000f18:	687b      	ldr	r3, [r7, #4]
10000f1a:	681b      	ldr	r3, [r3, #0]
10000f1c:	f003 0308 	and.w	r3, r3, #8
10000f20:	2b00      	cmp	r3, #0
10000f22:	d042      	beq.n	10000faa <HAL_RCC_OscConfig+0x592>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
10000f24:	687b      	ldr	r3, [r7, #4]
10000f26:	699b      	ldr	r3, [r3, #24]
10000f28:	2b00      	cmp	r3, #0
10000f2a:	d01f      	beq.n	10000f6c <HAL_RCC_OscConfig+0x554>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
10000f2c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000f30:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
10000f34:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10000f38:	f043 0301 	orr.w	r3, r3, #1
10000f3c:	f8c2 3144 	str.w	r3, [r2, #324]	@ 0x144

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10000f40:	f7ff fb1c 	bl	1000057c <HAL_GetTick>
10000f44:	60b8      	str	r0, [r7, #8]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
10000f46:	e008      	b.n	10000f5a <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
10000f48:	f7ff fb18 	bl	1000057c <HAL_GetTick>
10000f4c:	4602      	mov	r2, r0
10000f4e:	68bb      	ldr	r3, [r7, #8]
10000f50:	1ad3      	subs	r3, r2, r3
10000f52:	2b64      	cmp	r3, #100	@ 0x64
10000f54:	d901      	bls.n	10000f5a <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
10000f56:	2303      	movs	r3, #3
10000f58:	e08a      	b.n	10001070 <HAL_RCC_OscConfig+0x658>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
10000f5a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000f5e:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
10000f62:	f003 0302 	and.w	r3, r3, #2
10000f66:	2b02      	cmp	r3, #2
10000f68:	d1ee      	bne.n	10000f48 <HAL_RCC_OscConfig+0x530>
10000f6a:	e01e      	b.n	10000faa <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
10000f6c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000f70:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
10000f74:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10000f78:	f023 0301 	bic.w	r3, r3, #1
10000f7c:	f8c2 3144 	str.w	r3, [r2, #324]	@ 0x144

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10000f80:	f7ff fafc 	bl	1000057c <HAL_GetTick>
10000f84:	60b8      	str	r0, [r7, #8]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
10000f86:	e008      	b.n	10000f9a <HAL_RCC_OscConfig+0x582>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
10000f88:	f7ff faf8 	bl	1000057c <HAL_GetTick>
10000f8c:	4602      	mov	r2, r0
10000f8e:	68bb      	ldr	r3, [r7, #8]
10000f90:	1ad3      	subs	r3, r2, r3
10000f92:	2b64      	cmp	r3, #100	@ 0x64
10000f94:	d901      	bls.n	10000f9a <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
10000f96:	2303      	movs	r3, #3
10000f98:	e06a      	b.n	10001070 <HAL_RCC_OscConfig+0x658>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
10000f9a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000f9e:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
10000fa2:	f003 0302 	and.w	r3, r3, #2
10000fa6:	2b02      	cmp	r3, #2
10000fa8:	d0ee      	beq.n	10000f88 <HAL_RCC_OscConfig+0x570>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
10000faa:	687b      	ldr	r3, [r7, #4]
10000fac:	681b      	ldr	r3, [r3, #0]
10000fae:	f003 0304 	and.w	r3, r3, #4
10000fb2:	2b00      	cmp	r3, #0
10000fb4:	d02b      	beq.n	1000100e <HAL_RCC_OscConfig+0x5f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
10000fb6:	4b07      	ldr	r3, [pc, #28]	@ (10000fd4 <HAL_RCC_OscConfig+0x5bc>)
10000fb8:	681b      	ldr	r3, [r3, #0]
10000fba:	4a06      	ldr	r2, [pc, #24]	@ (10000fd4 <HAL_RCC_OscConfig+0x5bc>)
10000fbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
10000fc0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
10000fc2:	f7ff fadb 	bl	1000057c <HAL_GetTick>
10000fc6:	60b8      	str	r0, [r7, #8]

    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
10000fc8:	e00f      	b.n	10000fea <HAL_RCC_OscConfig+0x5d2>
10000fca:	bf00      	nop
10000fcc:	10020000 	.word	0x10020000
10000fd0:	10020004 	.word	0x10020004
10000fd4:	50001000 	.word	0x50001000
    {
      if ((HAL_GetTick() - tickstart) > DBP_TIMEOUT_VALUE)
10000fd8:	f7ff fad0 	bl	1000057c <HAL_GetTick>
10000fdc:	4602      	mov	r2, r0
10000fde:	68bb      	ldr	r3, [r7, #8]
10000fe0:	1ad3      	subs	r3, r2, r3
10000fe2:	2b64      	cmp	r3, #100	@ 0x64
10000fe4:	d901      	bls.n	10000fea <HAL_RCC_OscConfig+0x5d2>
      {
        return HAL_TIMEOUT;
10000fe6:	2303      	movs	r3, #3
10000fe8:	e042      	b.n	10001070 <HAL_RCC_OscConfig+0x658>
    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
10000fea:	4b23      	ldr	r3, [pc, #140]	@ (10001078 <HAL_RCC_OscConfig+0x660>)
10000fec:	681b      	ldr	r3, [r3, #0]
10000fee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
10000ff2:	2b00      	cmp	r3, #0
10000ff4:	d0f0      	beq.n	10000fd8 <HAL_RCC_OscConfig+0x5c0>
      }
    }

    result = HAL_RCC_LSEConfig(RCC_OscInitStruct->LSEState);
10000ff6:	687b      	ldr	r3, [r7, #4]
10000ff8:	689b      	ldr	r3, [r3, #8]
10000ffa:	4618      	mov	r0, r3
10000ffc:	f000 f8a9 	bl	10001152 <HAL_RCC_LSEConfig>
10001000:	4603      	mov	r3, r0
10001002:	73fb      	strb	r3, [r7, #15]
    if (result != HAL_OK)
10001004:	7bfb      	ldrb	r3, [r7, #15]
10001006:	2b00      	cmp	r3, #0
10001008:	d001      	beq.n	1000100e <HAL_RCC_OscConfig+0x5f6>
    {
      return result;
1000100a:	7bfb      	ldrb	r3, [r7, #15]
1000100c:	e030      	b.n	10001070 <HAL_RCC_OscConfig+0x658>
  } /* Close LSE Configuration */

  /*-------------------------------- PLL Configuration -----------------------*/

  /* Configure PLL1 */
  result = RCC_PLL1_Config(&(RCC_OscInitStruct->PLL));
1000100e:	687b      	ldr	r3, [r7, #4]
10001010:	3324      	adds	r3, #36	@ 0x24
10001012:	4618      	mov	r0, r3
10001014:	f000 f91a 	bl	1000124c <RCC_PLL1_Config>
10001018:	4603      	mov	r3, r0
1000101a:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
1000101c:	7bfb      	ldrb	r3, [r7, #15]
1000101e:	2b00      	cmp	r3, #0
10001020:	d001      	beq.n	10001026 <HAL_RCC_OscConfig+0x60e>
  {
    return result;
10001022:	7bfb      	ldrb	r3, [r7, #15]
10001024:	e024      	b.n	10001070 <HAL_RCC_OscConfig+0x658>
  }

  /* Configure PLL2 */
  result = RCCEx_PLL2_Config(&(RCC_OscInitStruct->PLL2));
10001026:	687b      	ldr	r3, [r7, #4]
10001028:	3360      	adds	r3, #96	@ 0x60
1000102a:	4618      	mov	r0, r3
1000102c:	f000 fecc 	bl	10001dc8 <RCCEx_PLL2_Config>
10001030:	4603      	mov	r3, r0
10001032:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
10001034:	7bfb      	ldrb	r3, [r7, #15]
10001036:	2b00      	cmp	r3, #0
10001038:	d001      	beq.n	1000103e <HAL_RCC_OscConfig+0x626>
  {
    return result;
1000103a:	7bfb      	ldrb	r3, [r7, #15]
1000103c:	e018      	b.n	10001070 <HAL_RCC_OscConfig+0x658>
  }

  /* Configure PLL3 */
  result = RCCEx_PLL3_Config(&(RCC_OscInitStruct->PLL3));
1000103e:	687b      	ldr	r3, [r7, #4]
10001040:	339c      	adds	r3, #156	@ 0x9c
10001042:	4618      	mov	r0, r3
10001044:	f001 f842 	bl	100020cc <RCCEx_PLL3_Config>
10001048:	4603      	mov	r3, r0
1000104a:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
1000104c:	7bfb      	ldrb	r3, [r7, #15]
1000104e:	2b00      	cmp	r3, #0
10001050:	d001      	beq.n	10001056 <HAL_RCC_OscConfig+0x63e>
  {
    return result;
10001052:	7bfb      	ldrb	r3, [r7, #15]
10001054:	e00c      	b.n	10001070 <HAL_RCC_OscConfig+0x658>
  }

  /* Configure PLL4 */
  result = RCCEx_PLL4_Config(&(RCC_OscInitStruct->PLL4));
10001056:	687b      	ldr	r3, [r7, #4]
10001058:	33d8      	adds	r3, #216	@ 0xd8
1000105a:	4618      	mov	r0, r3
1000105c:	f001 f9a0 	bl	100023a0 <RCCEx_PLL4_Config>
10001060:	4603      	mov	r3, r0
10001062:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
10001064:	7bfb      	ldrb	r3, [r7, #15]
10001066:	2b00      	cmp	r3, #0
10001068:	d001      	beq.n	1000106e <HAL_RCC_OscConfig+0x656>
  {
    return result;
1000106a:	7bfb      	ldrb	r3, [r7, #15]
1000106c:	e000      	b.n	10001070 <HAL_RCC_OscConfig+0x658>
  }

  return HAL_OK;
1000106e:	2300      	movs	r3, #0
}
10001070:	4618      	mov	r0, r3
10001072:	3710      	adds	r7, #16
10001074:	46bd      	mov	sp, r7
10001076:	bd80      	pop	{r7, pc}
10001078:	50001000 	.word	0x50001000

1000107c <HAL_RCC_HSEConfig>:
  *               @arg RCC_HSE_BYPASS_DIG: HSE oscillator bypassed with external
  *                    clock using a full-swing digital signal provided to OSC_IN
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_HSEConfig(uint32_t State)
{
1000107c:	b580      	push	{r7, lr}
1000107e:	b084      	sub	sp, #16
10001080:	af00      	add	r7, sp, #0
10001082:	6078      	str	r0, [r7, #4]

  /* Check parameter */
  assert_param(IS_RCC_HSE(State));

  /* Disable HSEON before configuring the HSE --------------*/
  WRITE_REG(RCC->OCENCLRR, RCC_OCENCLRR_HSEON);
10001084:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001088:	f44f 7280 	mov.w	r2, #256	@ 0x100
1000108c:	611a      	str	r2, [r3, #16]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
1000108e:	f7ff fa75 	bl	1000057c <HAL_GetTick>
10001092:	60f8      	str	r0, [r7, #12]

  /* Wait till HSE is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
10001094:	e008      	b.n	100010a8 <HAL_RCC_HSEConfig+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
10001096:	f7ff fa71 	bl	1000057c <HAL_GetTick>
1000109a:	4602      	mov	r2, r0
1000109c:	68fb      	ldr	r3, [r7, #12]
1000109e:	1ad3      	subs	r3, r2, r3
100010a0:	2b64      	cmp	r3, #100	@ 0x64
100010a2:	d901      	bls.n	100010a8 <HAL_RCC_HSEConfig+0x2c>
    {
      return HAL_TIMEOUT;
100010a4:	2303      	movs	r3, #3
100010a6:	e050      	b.n	1000114a <HAL_RCC_HSEConfig+0xce>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
100010a8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100010ac:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
100010b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
100010b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
100010b8:	d0ed      	beq.n	10001096 <HAL_RCC_HSEConfig+0x1a>
    }
  }

  /* Clear remaining bits */
  WRITE_REG(RCC->OCENCLRR, (RCC_OCENCLRR_DIGBYP | RCC_OCENSETR_HSEBYP));
100010ba:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100010be:	f44f 6290 	mov.w	r2, #1152	@ 0x480
100010c2:	611a      	str	r2, [r3, #16]

  /* Enable HSE if needed ---------------------------------------*/
  if (State != RCC_HSE_OFF)
100010c4:	687b      	ldr	r3, [r7, #4]
100010c6:	2b00      	cmp	r3, #0
100010c8:	d03e      	beq.n	10001148 <HAL_RCC_HSEConfig+0xcc>
  {
    if (State == RCC_HSE_BYPASS)
100010ca:	687b      	ldr	r3, [r7, #4]
100010cc:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
100010d0:	d108      	bne.n	100010e4 <HAL_RCC_HSEConfig+0x68>
    {
      SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEBYP);
100010d2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100010d6:	68db      	ldr	r3, [r3, #12]
100010d8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100010dc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
100010e0:	60d3      	str	r3, [r2, #12]
100010e2:	e013      	b.n	1000110c <HAL_RCC_HSEConfig+0x90>
    }
    else if (State == RCC_HSE_BYPASS_DIG)
100010e4:	687b      	ldr	r3, [r7, #4]
100010e6:	f5b3 6fb0 	cmp.w	r3, #1408	@ 0x580
100010ea:	d10f      	bne.n	1000110c <HAL_RCC_HSEConfig+0x90>
    {
      SET_BIT(RCC->OCENSETR, RCC_OCENCLRR_DIGBYP);
100010ec:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100010f0:	68db      	ldr	r3, [r3, #12]
100010f2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100010f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
100010fa:	60d3      	str	r3, [r2, #12]
      SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEBYP);
100010fc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001100:	68db      	ldr	r3, [r3, #12]
10001102:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001106:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
1000110a:	60d3      	str	r3, [r2, #12]
    }

    /* Enable oscillator */
    SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEON);
1000110c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001110:	68db      	ldr	r3, [r3, #12]
10001112:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001116:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
1000111a:	60d3      	str	r3, [r2, #12]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
1000111c:	f7ff fa2e 	bl	1000057c <HAL_GetTick>
10001120:	60f8      	str	r0, [r7, #12]

    /* Wait till HSE is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
10001122:	e008      	b.n	10001136 <HAL_RCC_HSEConfig+0xba>
    {
      if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
10001124:	f7ff fa2a 	bl	1000057c <HAL_GetTick>
10001128:	4602      	mov	r2, r0
1000112a:	68fb      	ldr	r3, [r7, #12]
1000112c:	1ad3      	subs	r3, r2, r3
1000112e:	2b64      	cmp	r3, #100	@ 0x64
10001130:	d901      	bls.n	10001136 <HAL_RCC_HSEConfig+0xba>
      {
        return HAL_TIMEOUT;
10001132:	2303      	movs	r3, #3
10001134:	e009      	b.n	1000114a <HAL_RCC_HSEConfig+0xce>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
10001136:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000113a:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
1000113e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
10001142:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
10001146:	d1ed      	bne.n	10001124 <HAL_RCC_HSEConfig+0xa8>
      }
    }
  }

  return HAL_OK;
10001148:	2300      	movs	r3, #0
}
1000114a:	4618      	mov	r0, r3
1000114c:	3710      	adds	r7, #16
1000114e:	46bd      	mov	sp, r7
10001150:	bd80      	pop	{r7, pc}

10001152 <HAL_RCC_LSEConfig>:
  *            @arg RCC_LSE_BYPASS_DIG: LSE oscillator bypassed with external
  *                 clock using a full-swing digital signal provided to OSC32_IN
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_LSEConfig(uint32_t State)
{
10001152:	b580      	push	{r7, lr}
10001154:	b084      	sub	sp, #16
10001156:	af00      	add	r7, sp, #0
10001158:	6078      	str	r0, [r7, #4]

  /* Check parameter */
  assert_param(IS_RCC_LSE(State));

  /* Turning LSE off is needed before configuring */
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
1000115a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000115e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10001162:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001166:	f023 0301 	bic.w	r3, r3, #1
1000116a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
1000116e:	f7ff fa05 	bl	1000057c <HAL_GetTick>
10001172:	60f8      	str	r0, [r7, #12]

  /* Wait till LSE is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
10001174:	e00a      	b.n	1000118c <HAL_RCC_LSEConfig+0x3a>
  {
    if ((HAL_GetTick() - tickstart) > LSE_TIMEOUT_VALUE)
10001176:	f7ff fa01 	bl	1000057c <HAL_GetTick>
1000117a:	4602      	mov	r2, r0
1000117c:	68fb      	ldr	r3, [r7, #12]
1000117e:	1ad3      	subs	r3, r2, r3
10001180:	f241 3288 	movw	r2, #5000	@ 0x1388
10001184:	4293      	cmp	r3, r2
10001186:	d901      	bls.n	1000118c <HAL_RCC_LSEConfig+0x3a>
    {
      return HAL_TIMEOUT;
10001188:	2303      	movs	r3, #3
1000118a:	e05b      	b.n	10001244 <HAL_RCC_LSEConfig+0xf2>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
1000118c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001190:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10001194:	f003 0304 	and.w	r3, r3, #4
10001198:	2b04      	cmp	r3, #4
1000119a:	d0ec      	beq.n	10001176 <HAL_RCC_LSEConfig+0x24>
    }
  }

  /* Clear remaining bits */
  CLEAR_BIT(RCC->BDCR, (RCC_BDCR_LSEBYP | RCC_BDCR_DIGBYP));
1000119c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100011a0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
100011a4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100011a8:	f023 030a 	bic.w	r3, r3, #10
100011ac:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140

  /* Enable LSE if needed */
  if (State != RCC_LSE_OFF)
100011b0:	687b      	ldr	r3, [r7, #4]
100011b2:	2b00      	cmp	r3, #0
100011b4:	d045      	beq.n	10001242 <HAL_RCC_LSEConfig+0xf0>
  {
    if (State == RCC_LSE_BYPASS)
100011b6:	687b      	ldr	r3, [r7, #4]
100011b8:	2b03      	cmp	r3, #3
100011ba:	d10a      	bne.n	100011d2 <HAL_RCC_LSEConfig+0x80>
    {
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
100011bc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100011c0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
100011c4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100011c8:	f043 0302 	orr.w	r3, r3, #2
100011cc:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
100011d0:	e016      	b.n	10001200 <HAL_RCC_LSEConfig+0xae>
    }
    else if (State == RCC_LSE_BYPASS_DIG)
100011d2:	687b      	ldr	r3, [r7, #4]
100011d4:	2b0b      	cmp	r3, #11
100011d6:	d113      	bne.n	10001200 <HAL_RCC_LSEConfig+0xae>
    {
      SET_BIT(RCC->BDCR, RCC_BDCR_DIGBYP);
100011d8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100011dc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
100011e0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100011e4:	f043 0308 	orr.w	r3, r3, #8
100011e8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
100011ec:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100011f0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
100011f4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100011f8:	f043 0302 	orr.w	r3, r3, #2
100011fc:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
    }

    /* Enable oscillator */
    SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
10001200:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001204:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10001208:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000120c:	f043 0301 	orr.w	r3, r3, #1
10001210:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10001214:	f7ff f9b2 	bl	1000057c <HAL_GetTick>
10001218:	60f8      	str	r0, [r7, #12]

    /* Wait till LSE is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
1000121a:	e00a      	b.n	10001232 <HAL_RCC_LSEConfig+0xe0>
    {
      if ((HAL_GetTick() - tickstart) > LSE_TIMEOUT_VALUE)
1000121c:	f7ff f9ae 	bl	1000057c <HAL_GetTick>
10001220:	4602      	mov	r2, r0
10001222:	68fb      	ldr	r3, [r7, #12]
10001224:	1ad3      	subs	r3, r2, r3
10001226:	f241 3288 	movw	r2, #5000	@ 0x1388
1000122a:	4293      	cmp	r3, r2
1000122c:	d901      	bls.n	10001232 <HAL_RCC_LSEConfig+0xe0>
      {
        return HAL_TIMEOUT;
1000122e:	2303      	movs	r3, #3
10001230:	e008      	b.n	10001244 <HAL_RCC_LSEConfig+0xf2>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
10001232:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001236:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
1000123a:	f003 0304 	and.w	r3, r3, #4
1000123e:	2b04      	cmp	r3, #4
10001240:	d1ec      	bne.n	1000121c <HAL_RCC_LSEConfig+0xca>
      }
    }
  } /* Enable LSE if needed */

  return HAL_OK;
10001242:	2300      	movs	r3, #0
}
10001244:	4618      	mov	r0, r3
10001246:	3710      	adds	r7, #16
10001248:	46bd      	mov	sp, r7
1000124a:	bd80      	pop	{r7, pc}

1000124c <RCC_PLL1_Config>:

HAL_StatusTypeDef RCC_PLL1_Config(RCC_PLLInitTypeDef *pll1)
{
1000124c:	b580      	push	{r7, lr}
1000124e:	b084      	sub	sp, #16
10001250:	af00      	add	r7, sp, #0
10001252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll1->PLLState));
  if ((pll1->PLLState) != RCC_PLL_NONE)
10001254:	687b      	ldr	r3, [r7, #4]
10001256:	681b      	ldr	r3, [r3, #0]
10001258:	2b00      	cmp	r3, #0
1000125a:	f000 8174 	beq.w	10001546 <RCC_PLL1_Config+0x2fa>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL1_IN_USE()) /* If not used then */
1000125e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001262:	6a1b      	ldr	r3, [r3, #32]
10001264:	f003 0303 	and.w	r3, r3, #3
10001268:	2b02      	cmp	r3, #2
1000126a:	d108      	bne.n	1000127e <RCC_PLL1_Config+0x32>
1000126c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001270:	6a1b      	ldr	r3, [r3, #32]
10001272:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10001276:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
1000127a:	f000 8162 	beq.w	10001542 <RCC_PLL1_Config+0x2f6>
1000127e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001282:	6a1b      	ldr	r3, [r3, #32]
10001284:	f003 0303 	and.w	r3, r3, #3
10001288:	2b03      	cmp	r3, #3
1000128a:	d108      	bne.n	1000129e <RCC_PLL1_Config+0x52>
1000128c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001290:	6a1b      	ldr	r3, [r3, #32]
10001292:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10001296:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
1000129a:	f000 8152 	beq.w	10001542 <RCC_PLL1_Config+0x2f6>
    {
      if ((pll1->PLLState) == RCC_PLL_ON)
1000129e:	687b      	ldr	r3, [r7, #4]
100012a0:	681b      	ldr	r3, [r3, #0]
100012a2:	2b02      	cmp	r3, #2
100012a4:	f040 8123 	bne.w	100014ee <RCC_PLL1_Config+0x2a2>
        assert_param(IS_RCC_PLLP1_VALUE(pll1->PLLP));
        assert_param(IS_RCC_PLLQ1_VALUE(pll1->PLLQ));
        assert_param(IS_RCC_PLLR1_VALUE(pll1->PLLR));

        /*Disable the post-dividers*/
        __HAL_RCC_PLL1CLKOUT_DISABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
100012a8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100012ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
100012b0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100012b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
100012b8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
        /* Disable the main PLL. */
        __HAL_RCC_PLL1_DISABLE();
100012bc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100012c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
100012c4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100012c8:	f023 0301 	bic.w	r3, r3, #1
100012cc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100012d0:	f7ff f954 	bl	1000057c <HAL_GetTick>
100012d4:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
100012d6:	e008      	b.n	100012ea <RCC_PLL1_Config+0x9e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100012d8:	f7ff f950 	bl	1000057c <HAL_GetTick>
100012dc:	4602      	mov	r2, r0
100012de:	68fb      	ldr	r3, [r7, #12]
100012e0:	1ad3      	subs	r3, r2, r3
100012e2:	2b64      	cmp	r3, #100	@ 0x64
100012e4:	d901      	bls.n	100012ea <RCC_PLL1_Config+0x9e>
          {
            return HAL_TIMEOUT;
100012e6:	2303      	movs	r3, #3
100012e8:	e12e      	b.n	10001548 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
100012ea:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100012ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
100012f2:	f003 0302 	and.w	r3, r3, #2
100012f6:	2b02      	cmp	r3, #2
100012f8:	d0ee      	beq.n	100012d8 <RCC_PLL1_Config+0x8c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Do not change pll src if already in use */
        if (__IS_PLL2_IN_USE())
100012fa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100012fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10001300:	f003 0307 	and.w	r3, r3, #7
10001304:	2b02      	cmp	r3, #2
10001306:	d112      	bne.n	1000132e <RCC_PLL1_Config+0xe2>
10001308:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000130c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000130e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10001312:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10001316:	d10a      	bne.n	1000132e <RCC_PLL1_Config+0xe2>
        {
          if (pll1->PLLSource != __HAL_RCC_GET_PLL12_SOURCE())
10001318:	687b      	ldr	r3, [r7, #4]
1000131a:	685a      	ldr	r2, [r3, #4]
1000131c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10001322:	f003 0303 	and.w	r3, r3, #3
10001326:	429a      	cmp	r2, r3
10001328:	d00c      	beq.n	10001344 <RCC_PLL1_Config+0xf8>
          {
            return HAL_ERROR;
1000132a:	2301      	movs	r3, #1
1000132c:	e10c      	b.n	10001548 <RCC_PLL1_Config+0x2fc>
          }
        }
        else
        {
          /* Configure PLL1 and PLL2 clock source */
          __HAL_RCC_PLL12_SOURCE(pll1->PLLSource);
1000132e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10001334:	f023 0203 	bic.w	r2, r3, #3
10001338:	687b      	ldr	r3, [r7, #4]
1000133a:	685b      	ldr	r3, [r3, #4]
1000133c:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10001340:	4313      	orrs	r3, r2
10001342:	628b      	str	r3, [r1, #40]	@ 0x28
        }

        /* Wait till PLL SOURCE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL12SRCRDY) == RESET)
10001344:	e008      	b.n	10001358 <RCC_PLL1_Config+0x10c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10001346:	f7ff f919 	bl	1000057c <HAL_GetTick>
1000134a:	4602      	mov	r2, r0
1000134c:	68fb      	ldr	r3, [r7, #12]
1000134e:	1ad3      	subs	r3, r2, r3
10001350:	2b64      	cmp	r3, #100	@ 0x64
10001352:	d901      	bls.n	10001358 <RCC_PLL1_Config+0x10c>
          {
            return HAL_TIMEOUT;
10001354:	2303      	movs	r3, #3
10001356:	e0f7      	b.n	10001548 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL12SRCRDY) == RESET)
10001358:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000135c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1000135e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10001362:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10001366:	d1ee      	bne.n	10001346 <RCC_PLL1_Config+0xfa>
          }
        }

        /* Configure the PLL1 multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(
10001368:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000136c:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
10001370:	4b77      	ldr	r3, [pc, #476]	@ (10001550 <RCC_PLL1_Config+0x304>)
10001372:	4013      	ands	r3, r2
10001374:	687a      	ldr	r2, [r7, #4]
10001376:	68d2      	ldr	r2, [r2, #12]
10001378:	1e51      	subs	r1, r2, #1
1000137a:	687a      	ldr	r2, [r7, #4]
1000137c:	6892      	ldr	r2, [r2, #8]
1000137e:	3a01      	subs	r2, #1
10001380:	0412      	lsls	r2, r2, #16
10001382:	430a      	orrs	r2, r1
10001384:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10001388:	4313      	orrs	r3, r2
1000138a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
1000138e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001392:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
10001396:	f023 137f 	bic.w	r3, r3, #8323199	@ 0x7f007f
1000139a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
1000139e:	687a      	ldr	r2, [r7, #4]
100013a0:	6912      	ldr	r2, [r2, #16]
100013a2:	1e51      	subs	r1, r2, #1
100013a4:	687a      	ldr	r2, [r7, #4]
100013a6:	6952      	ldr	r2, [r2, #20]
100013a8:	3a01      	subs	r2, #1
100013aa:	0212      	lsls	r2, r2, #8
100013ac:	4311      	orrs	r1, r2
100013ae:	687a      	ldr	r2, [r7, #4]
100013b0:	6992      	ldr	r2, [r2, #24]
100013b2:	3a01      	subs	r2, #1
100013b4:	0412      	lsls	r2, r2, #16
100013b6:	430a      	orrs	r2, r1
100013b8:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100013bc:	4313      	orrs	r3, r2
100013be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
          pll1->PLLQ,
          pll1->PLLR);


        /* Configure the Fractional Divider */
        __HAL_RCC_PLL1FRACV_DISABLE(); /*Set FRACLE to '0' */
100013c2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100013c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
100013ca:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100013ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
100013d2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll1->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll1->PLLMODE == RCC_PLL_INTEGER))
100013d6:	687b      	ldr	r3, [r7, #4]
100013d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100013da:	2b02      	cmp	r3, #2
100013dc:	d003      	beq.n	100013e6 <RCC_PLL1_Config+0x19a>
100013de:	687b      	ldr	r3, [r7, #4]
100013e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100013e2:	2b00      	cmp	r3, #0
100013e4:	d10c      	bne.n	10001400 <RCC_PLL1_Config+0x1b4>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL1FRACV_CONFIG(0U); /* Set FRACV to '0' */
100013e6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100013ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
100013ee:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100013f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
100013f6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
100013fa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
100013fe:	e00f      	b.n	10001420 <RCC_PLL1_Config+0x1d4>
        }
        else
        {
          /* Configure PLL  PLL1FRACV  in fractional mode*/
          __HAL_RCC_PLL1FRACV_CONFIG(pll1->PLLFRACV);
10001400:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001404:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
10001408:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
1000140c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
10001410:	687a      	ldr	r2, [r7, #4]
10001412:	6a12      	ldr	r2, [r2, #32]
10001414:	00d2      	lsls	r2, r2, #3
10001416:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
1000141a:	4313      	orrs	r3, r2
1000141c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
        }
        __HAL_RCC_PLL1FRACV_ENABLE(); /* Set FRACLE to 1 */
10001420:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001424:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
10001428:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000142c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
10001430:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c


        /* Configure the Spread Control */
        if (pll1->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
10001434:	687b      	ldr	r3, [r7, #4]
10001436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10001438:	2b02      	cmp	r3, #2
1000143a:	d124      	bne.n	10001486 <RCC_PLL1_Config+0x23a>
          assert_param(IS_RCC_SSCG_MODE(pll1->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll1->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll1->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll1->MOD_PER));

          __HAL_RCC_PLL1CSGCONFIG(pll1->MOD_PER, pll1->TPDFN_DIS, pll1->RPDFN_DIS,
1000143c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001440:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
10001444:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
10001448:	687b      	ldr	r3, [r7, #4]
1000144a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
1000144c:	687b      	ldr	r3, [r7, #4]
1000144e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10001450:	4319      	orrs	r1, r3
10001452:	687b      	ldr	r3, [r7, #4]
10001454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10001456:	4319      	orrs	r1, r3
10001458:	687b      	ldr	r3, [r7, #4]
1000145a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
1000145c:	4319      	orrs	r1, r3
1000145e:	687b      	ldr	r3, [r7, #4]
10001460:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10001462:	041b      	lsls	r3, r3, #16
10001464:	430b      	orrs	r3, r1
10001466:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
1000146a:	4313      	orrs	r3, r2
1000146c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
                                  pll1->SSCG_MODE, pll1->INC_STEP);

          __HAL_RCC_PLL1_SSMODE_ENABLE();
10001470:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001474:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10001478:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000147c:	f043 0304 	orr.w	r3, r3, #4
10001480:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
10001484:	e009      	b.n	1000149a <RCC_PLL1_Config+0x24e>
        }
        else
        {
          __HAL_RCC_PLL1_SSMODE_DISABLE();
10001486:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000148a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
1000148e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001492:	f023 0304 	bic.w	r3, r3, #4
10001496:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
        }

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
1000149a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000149e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
100014a2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100014a6:	f043 0301 	orr.w	r3, r3, #1
100014aa:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100014ae:	f7ff f865 	bl	1000057c <HAL_GetTick>
100014b2:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
100014b4:	e008      	b.n	100014c8 <RCC_PLL1_Config+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100014b6:	f7ff f861 	bl	1000057c <HAL_GetTick>
100014ba:	4602      	mov	r2, r0
100014bc:	68fb      	ldr	r3, [r7, #12]
100014be:	1ad3      	subs	r3, r2, r3
100014c0:	2b64      	cmp	r3, #100	@ 0x64
100014c2:	d901      	bls.n	100014c8 <RCC_PLL1_Config+0x27c>
          {
            return HAL_TIMEOUT;
100014c4:	2303      	movs	r3, #3
100014c6:	e03f      	b.n	10001548 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
100014c8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100014cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
100014d0:	f003 0302 	and.w	r3, r3, #2
100014d4:	2b02      	cmp	r3, #2
100014d6:	d1ee      	bne.n	100014b6 <RCC_PLL1_Config+0x26a>
          }
        }
        /* Enable post-dividers */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
100014d8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100014dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
100014e0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100014e4:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
100014e8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      if ((pll1->PLLState) == RCC_PLL_ON)
100014ec:	e02b      	b.n	10001546 <RCC_PLL1_Config+0x2fa>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL1CLKOUT_DISABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
100014ee:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100014f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
100014f6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100014fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
100014fe:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
10001502:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001506:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
1000150a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000150e:	f023 0301 	bic.w	r3, r3, #1
10001512:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10001516:	f7ff f831 	bl	1000057c <HAL_GetTick>
1000151a:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
1000151c:	e008      	b.n	10001530 <RCC_PLL1_Config+0x2e4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1000151e:	f7ff f82d 	bl	1000057c <HAL_GetTick>
10001522:	4602      	mov	r2, r0
10001524:	68fb      	ldr	r3, [r7, #12]
10001526:	1ad3      	subs	r3, r2, r3
10001528:	2b64      	cmp	r3, #100	@ 0x64
1000152a:	d901      	bls.n	10001530 <RCC_PLL1_Config+0x2e4>
          {
            return HAL_TIMEOUT;
1000152c:	2303      	movs	r3, #3
1000152e:	e00b      	b.n	10001548 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
10001530:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001534:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10001538:	f003 0302 	and.w	r3, r3, #2
1000153c:	2b02      	cmp	r3, #2
1000153e:	d0ee      	beq.n	1000151e <RCC_PLL1_Config+0x2d2>
      if ((pll1->PLLState) == RCC_PLL_ON)
10001540:	e001      	b.n	10001546 <RCC_PLL1_Config+0x2fa>
        }
      }
    }
    else
    {
      return HAL_ERROR;
10001542:	2301      	movs	r3, #1
10001544:	e000      	b.n	10001548 <RCC_PLL1_Config+0x2fc>
    }
  }
  return HAL_OK;
10001546:	2300      	movs	r3, #0

}
10001548:	4618      	mov	r0, r3
1000154a:	3710      	adds	r7, #16
1000154c:	46bd      	mov	sp, r7
1000154e:	bd80      	pop	{r7, pc}
10001550:	ffc0fe00 	.word	0xffc0fe00

10001554 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct)
{
10001554:	b580      	push	{r7, lr}
10001556:	b084      	sub	sp, #16
10001558:	af00      	add	r7, sp, #0
1000155a:	6078      	str	r0, [r7, #4]

  HAL_StatusTypeDef status = HAL_OK;
1000155c:	2300      	movs	r3, #0
1000155e:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
10001560:	687b      	ldr	r3, [r7, #4]
10001562:	2b00      	cmp	r3, #0
10001564:	d101      	bne.n	1000156a <HAL_RCC_ClockConfig+0x16>
  {
    return HAL_ERROR;
10001566:	2301      	movs	r3, #1
10001568:	e102      	b.n	10001770 <HAL_RCC_ClockConfig+0x21c>
  }

  assert_param(IS_RCC_CLOCKTYPETYPE(RCC_ClkInitStruct->ClockType));

  /* Configure MPU block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_MPU) == RCC_CLOCKTYPE_MPU)
1000156a:	687b      	ldr	r3, [r7, #4]
1000156c:	681b      	ldr	r3, [r3, #0]
1000156e:	f003 0301 	and.w	r3, r3, #1
10001572:	2b00      	cmp	r3, #0
10001574:	d00b      	beq.n	1000158e <HAL_RCC_ClockConfig+0x3a>
  {
    status = RCC_MPUConfig(&(RCC_ClkInitStruct->MPUInit));
10001576:	687b      	ldr	r3, [r7, #4]
10001578:	3304      	adds	r3, #4
1000157a:	4618      	mov	r0, r3
1000157c:	f000 f8fc 	bl	10001778 <RCC_MPUConfig>
10001580:	4603      	mov	r3, r0
10001582:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
10001584:	7bfb      	ldrb	r3, [r7, #15]
10001586:	2b00      	cmp	r3, #0
10001588:	d001      	beq.n	1000158e <HAL_RCC_ClockConfig+0x3a>
    {
      return status;
1000158a:	7bfb      	ldrb	r3, [r7, #15]
1000158c:	e0f0      	b.n	10001770 <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure AXISS block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_ACLK) == RCC_CLOCKTYPE_ACLK)
1000158e:	687b      	ldr	r3, [r7, #4]
10001590:	681b      	ldr	r3, [r3, #0]
10001592:	f003 0302 	and.w	r3, r3, #2
10001596:	2b00      	cmp	r3, #0
10001598:	d00b      	beq.n	100015b2 <HAL_RCC_ClockConfig+0x5e>
  {
    status = RCC_AXISSConfig(&(RCC_ClkInitStruct->AXISSInit));
1000159a:	687b      	ldr	r3, [r7, #4]
1000159c:	330c      	adds	r3, #12
1000159e:	4618      	mov	r0, r3
100015a0:	f000 f960 	bl	10001864 <RCC_AXISSConfig>
100015a4:	4603      	mov	r3, r0
100015a6:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
100015a8:	7bfb      	ldrb	r3, [r7, #15]
100015aa:	2b00      	cmp	r3, #0
100015ac:	d001      	beq.n	100015b2 <HAL_RCC_ClockConfig+0x5e>
    {
      return status;
100015ae:	7bfb      	ldrb	r3, [r7, #15]
100015b0:	e0de      	b.n	10001770 <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure MCU block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
100015b2:	687b      	ldr	r3, [r7, #4]
100015b4:	681b      	ldr	r3, [r3, #0]
100015b6:	f003 0304 	and.w	r3, r3, #4
100015ba:	2b00      	cmp	r3, #0
100015bc:	d00b      	beq.n	100015d6 <HAL_RCC_ClockConfig+0x82>
  {
    status = RCC_MCUConfig(&(RCC_ClkInitStruct->MCUInit));
100015be:	687b      	ldr	r3, [r7, #4]
100015c0:	3314      	adds	r3, #20
100015c2:	4618      	mov	r0, r3
100015c4:	f000 f9e6 	bl	10001994 <RCC_MCUConfig>
100015c8:	4603      	mov	r3, r0
100015ca:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
100015cc:	7bfb      	ldrb	r3, [r7, #15]
100015ce:	2b00      	cmp	r3, #0
100015d0:	d001      	beq.n	100015d6 <HAL_RCC_ClockConfig+0x82>
    {
      return status;
100015d2:	7bfb      	ldrb	r3, [r7, #15]
100015d4:	e0cc      	b.n	10001770 <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure APB4 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
100015d6:	687b      	ldr	r3, [r7, #4]
100015d8:	681b      	ldr	r3, [r3, #0]
100015da:	f003 0308 	and.w	r3, r3, #8
100015de:	2b00      	cmp	r3, #0
100015e0:	d020      	beq.n	10001624 <HAL_RCC_ClockConfig+0xd0>
  {
    assert_param(IS_RCC_APB4DIV(RCC_ClkInitStruct->APB4_Div));
    /* Set APB4 division factor */
    __HAL_RCC_APB4_DIV(RCC_ClkInitStruct->APB4_Div);
100015e2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100015e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
100015e8:	f023 0207 	bic.w	r2, r3, #7
100015ec:	687b      	ldr	r3, [r7, #4]
100015ee:	69db      	ldr	r3, [r3, #28]
100015f0:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100015f4:	4313      	orrs	r3, r2
100015f6:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100015f8:	f7fe ffc0 	bl	1000057c <HAL_GetTick>
100015fc:	60b8      	str	r0, [r7, #8]

    /* Wait till APB4 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB4DIVRDY) == RESET)
100015fe:	e009      	b.n	10001614 <HAL_RCC_ClockConfig+0xc0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001600:	f7fe ffbc 	bl	1000057c <HAL_GetTick>
10001604:	4602      	mov	r2, r0
10001606:	68bb      	ldr	r3, [r7, #8]
10001608:	1ad3      	subs	r3, r2, r3
1000160a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
1000160e:	d901      	bls.n	10001614 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_TIMEOUT;
10001610:	2303      	movs	r3, #3
10001612:	e0ad      	b.n	10001770 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB4DIVRDY) == RESET)
10001614:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001618:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
1000161a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
1000161e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10001622:	d1ed      	bne.n	10001600 <HAL_RCC_ClockConfig+0xac>
      }
    }
  }

  /* Configure APB5 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
10001624:	687b      	ldr	r3, [r7, #4]
10001626:	681b      	ldr	r3, [r3, #0]
10001628:	f003 0310 	and.w	r3, r3, #16
1000162c:	2b00      	cmp	r3, #0
1000162e:	d020      	beq.n	10001672 <HAL_RCC_ClockConfig+0x11e>
  {
    assert_param(IS_RCC_APB5DIV(RCC_ClkInitStruct->APB5_Div));
    /* Set APB5 division factor */
    __HAL_RCC_APB5_DIV(RCC_ClkInitStruct->APB5_Div);
10001630:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
10001636:	f023 0207 	bic.w	r2, r3, #7
1000163a:	687b      	ldr	r3, [r7, #4]
1000163c:	6a1b      	ldr	r3, [r3, #32]
1000163e:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10001642:	4313      	orrs	r3, r2
10001644:	640b      	str	r3, [r1, #64]	@ 0x40

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10001646:	f7fe ff99 	bl	1000057c <HAL_GetTick>
1000164a:	60b8      	str	r0, [r7, #8]

    /* Wait till APB5 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB5DIVRDY) == RESET)
1000164c:	e009      	b.n	10001662 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
1000164e:	f7fe ff95 	bl	1000057c <HAL_GetTick>
10001652:	4602      	mov	r2, r0
10001654:	68bb      	ldr	r3, [r7, #8]
10001656:	1ad3      	subs	r3, r2, r3
10001658:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
1000165c:	d901      	bls.n	10001662 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
1000165e:	2303      	movs	r3, #3
10001660:	e086      	b.n	10001770 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB5DIVRDY) == RESET)
10001662:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
10001668:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
1000166c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10001670:	d1ed      	bne.n	1000164e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Configure APB1 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
10001672:	687b      	ldr	r3, [r7, #4]
10001674:	681b      	ldr	r3, [r3, #0]
10001676:	f003 0320 	and.w	r3, r3, #32
1000167a:	2b00      	cmp	r3, #0
1000167c:	d023      	beq.n	100016c6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_APB1DIV(RCC_ClkInitStruct->APB1_Div));
    /* Set APB1 division factor */
    __HAL_RCC_APB1_DIV(RCC_ClkInitStruct->APB1_Div);
1000167e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001682:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
10001686:	f023 0207 	bic.w	r2, r3, #7
1000168a:	687b      	ldr	r3, [r7, #4]
1000168c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000168e:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10001692:	4313      	orrs	r3, r2
10001694:	f8c1 3834 	str.w	r3, [r1, #2100]	@ 0x834

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10001698:	f7fe ff70 	bl	1000057c <HAL_GetTick>
1000169c:	60b8      	str	r0, [r7, #8]

    /* Wait till APB1 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB1DIVRDY) == RESET)
1000169e:	e009      	b.n	100016b4 <HAL_RCC_ClockConfig+0x160>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100016a0:	f7fe ff6c 	bl	1000057c <HAL_GetTick>
100016a4:	4602      	mov	r2, r0
100016a6:	68bb      	ldr	r3, [r7, #8]
100016a8:	1ad3      	subs	r3, r2, r3
100016aa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
100016ae:	d901      	bls.n	100016b4 <HAL_RCC_ClockConfig+0x160>
      {
        return HAL_TIMEOUT;
100016b0:	2303      	movs	r3, #3
100016b2:	e05d      	b.n	10001770 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB1DIVRDY) == RESET)
100016b4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100016b8:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
100016bc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
100016c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
100016c4:	d1ec      	bne.n	100016a0 <HAL_RCC_ClockConfig+0x14c>
      }
    }
  }

  /* Configure APB2 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
100016c6:	687b      	ldr	r3, [r7, #4]
100016c8:	681b      	ldr	r3, [r3, #0]
100016ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
100016ce:	2b00      	cmp	r3, #0
100016d0:	d023      	beq.n	1000171a <HAL_RCC_ClockConfig+0x1c6>
  {
    assert_param(IS_RCC_APB2DIV(RCC_ClkInitStruct->APB2_Div));
    /* Set APB2 division factor */
    __HAL_RCC_APB2_DIV(RCC_ClkInitStruct->APB2_Div);
100016d2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100016d6:	f8d3 3838 	ldr.w	r3, [r3, #2104]	@ 0x838
100016da:	f023 0207 	bic.w	r2, r3, #7
100016de:	687b      	ldr	r3, [r7, #4]
100016e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100016e2:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100016e6:	4313      	orrs	r3, r2
100016e8:	f8c1 3838 	str.w	r3, [r1, #2104]	@ 0x838

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100016ec:	f7fe ff46 	bl	1000057c <HAL_GetTick>
100016f0:	60b8      	str	r0, [r7, #8]

    /* Wait till APB2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB2DIVRDY) == RESET)
100016f2:	e009      	b.n	10001708 <HAL_RCC_ClockConfig+0x1b4>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100016f4:	f7fe ff42 	bl	1000057c <HAL_GetTick>
100016f8:	4602      	mov	r2, r0
100016fa:	68bb      	ldr	r3, [r7, #8]
100016fc:	1ad3      	subs	r3, r2, r3
100016fe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10001702:	d901      	bls.n	10001708 <HAL_RCC_ClockConfig+0x1b4>
      {
        return HAL_TIMEOUT;
10001704:	2303      	movs	r3, #3
10001706:	e033      	b.n	10001770 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB2DIVRDY) == RESET)
10001708:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000170c:	f8d3 3838 	ldr.w	r3, [r3, #2104]	@ 0x838
10001710:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10001714:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10001718:	d1ec      	bne.n	100016f4 <HAL_RCC_ClockConfig+0x1a0>
      }
    }
  }

  /* Configure APB3 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
1000171a:	687b      	ldr	r3, [r7, #4]
1000171c:	681b      	ldr	r3, [r3, #0]
1000171e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
10001722:	2b00      	cmp	r3, #0
10001724:	d023      	beq.n	1000176e <HAL_RCC_ClockConfig+0x21a>
  {
    assert_param(IS_RCC_APB3DIV(RCC_ClkInitStruct->APB3_Div));
    /* Set APB3 division factor */
    __HAL_RCC_APB3_DIV(RCC_ClkInitStruct->APB3_Div);
10001726:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000172a:	f8d3 383c 	ldr.w	r3, [r3, #2108]	@ 0x83c
1000172e:	f023 0207 	bic.w	r2, r3, #7
10001732:	687b      	ldr	r3, [r7, #4]
10001734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10001736:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
1000173a:	4313      	orrs	r3, r2
1000173c:	f8c1 383c 	str.w	r3, [r1, #2108]	@ 0x83c

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10001740:	f7fe ff1c 	bl	1000057c <HAL_GetTick>
10001744:	60b8      	str	r0, [r7, #8]

    /* Wait till APB3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB3DIVRDY) == RESET)
10001746:	e009      	b.n	1000175c <HAL_RCC_ClockConfig+0x208>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001748:	f7fe ff18 	bl	1000057c <HAL_GetTick>
1000174c:	4602      	mov	r2, r0
1000174e:	68bb      	ldr	r3, [r7, #8]
10001750:	1ad3      	subs	r3, r2, r3
10001752:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10001756:	d901      	bls.n	1000175c <HAL_RCC_ClockConfig+0x208>
      {
        return HAL_TIMEOUT;
10001758:	2303      	movs	r3, #3
1000175a:	e009      	b.n	10001770 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB3DIVRDY) == RESET)
1000175c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001760:	f8d3 383c 	ldr.w	r3, [r3, #2108]	@ 0x83c
10001764:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10001768:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
1000176c:	d1ec      	bne.n	10001748 <HAL_RCC_ClockConfig+0x1f4>
      }
    }
  }

  return HAL_OK;
1000176e:	2300      	movs	r3, #0
}
10001770:	4618      	mov	r0, r3
10001772:	3710      	adds	r7, #16
10001774:	46bd      	mov	sp, r7
10001776:	bd80      	pop	{r7, pc}

10001778 <RCC_MPUConfig>:

HAL_StatusTypeDef RCC_MPUConfig(RCC_MPUInitTypeDef *RCC_MPUInitStruct)
{
10001778:	b580      	push	{r7, lr}
1000177a:	b084      	sub	sp, #16
1000177c:	af00      	add	r7, sp, #0
1000177e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  assert_param(IS_RCC_MPUSOURCE(RCC_MPUInitStruct->MPU_Clock));

  /* Ensure clock source is ready*/
  switch (RCC_MPUInitStruct->MPU_Clock)
10001780:	687b      	ldr	r3, [r7, #4]
10001782:	681b      	ldr	r3, [r3, #0]
10001784:	2b03      	cmp	r3, #3
10001786:	d840      	bhi.n	1000180a <RCC_MPUConfig+0x92>
10001788:	a201      	add	r2, pc, #4	@ (adr r2, 10001790 <RCC_MPUConfig+0x18>)
1000178a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1000178e:	bf00      	nop
10001790:	100017a1 	.word	0x100017a1
10001794:	100017b5 	.word	0x100017b5
10001798:	100017cb 	.word	0x100017cb
1000179c:	100017df 	.word	0x100017df
  {
    case (RCC_MPUSOURCE_HSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
100017a0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100017a4:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
100017a8:	f003 0301 	and.w	r3, r3, #1
100017ac:	2b01      	cmp	r3, #1
100017ae:	d02e      	beq.n	1000180e <RCC_MPUConfig+0x96>
      {
        return HAL_ERROR;
100017b0:	2301      	movs	r3, #1
100017b2:	e053      	b.n	1000185c <RCC_MPUConfig+0xe4>
    }

    case (RCC_MPUSOURCE_HSE):
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
100017b4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100017b8:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
100017bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
100017c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
100017c4:	d025      	beq.n	10001812 <RCC_MPUConfig+0x9a>
      {
        return HAL_ERROR;
100017c6:	2301      	movs	r3, #1
100017c8:	e048      	b.n	1000185c <RCC_MPUConfig+0xe4>
    }

    case (RCC_MPUSOURCE_PLL1):
    {
      /* Check the PLL1 ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
100017ca:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100017ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
100017d2:	f003 0302 	and.w	r3, r3, #2
100017d6:	2b02      	cmp	r3, #2
100017d8:	d01d      	beq.n	10001816 <RCC_MPUConfig+0x9e>
      {
        return HAL_ERROR;
100017da:	2301      	movs	r3, #1
100017dc:	e03e      	b.n	1000185c <RCC_MPUConfig+0xe4>
    case (RCC_MPUSOURCE_MPUDIV):
    {
      assert_param(IS_RCC_MPUDIV(RCC_MPUInitStruct->MPU_Div));

      /* Check the PLL1 ready flag (as PLL1_P is the MPUDIV source */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
100017de:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100017e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
100017e6:	f003 0302 	and.w	r3, r3, #2
100017ea:	2b02      	cmp	r3, #2
100017ec:	d001      	beq.n	100017f2 <RCC_MPUConfig+0x7a>
      {
        return HAL_ERROR;
100017ee:	2301      	movs	r3, #1
100017f0:	e034      	b.n	1000185c <RCC_MPUConfig+0xe4>
      }

      /* Set MPU division factor */
      __HAL_RCC_MPU_DIV(RCC_MPUInitStruct->MPU_Div);
100017f2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100017f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
100017f8:	f023 0207 	bic.w	r2, r3, #7
100017fc:	687b      	ldr	r3, [r7, #4]
100017fe:	685b      	ldr	r3, [r3, #4]
10001800:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10001804:	4313      	orrs	r3, r2
10001806:	62cb      	str	r3, [r1, #44]	@ 0x2c

      break;
10001808:	e006      	b.n	10001818 <RCC_MPUConfig+0xa0>
    }

    default:
      /* This case is impossible */
      return HAL_ERROR;
1000180a:	2301      	movs	r3, #1
1000180c:	e026      	b.n	1000185c <RCC_MPUConfig+0xe4>
      break;
1000180e:	bf00      	nop
10001810:	e002      	b.n	10001818 <RCC_MPUConfig+0xa0>
      break;
10001812:	bf00      	nop
10001814:	e000      	b.n	10001818 <RCC_MPUConfig+0xa0>
      break;
10001816:	bf00      	nop
      break;
  }

  /* Set MPU clock source */
  __HAL_RCC_MPU_SOURCE(RCC_MPUInitStruct->MPU_Clock);
10001818:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000181c:	6a1b      	ldr	r3, [r3, #32]
1000181e:	f023 0203 	bic.w	r2, r3, #3
10001822:	687b      	ldr	r3, [r7, #4]
10001824:	681b      	ldr	r3, [r3, #0]
10001826:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
1000182a:	4313      	orrs	r3, r2
1000182c:	620b      	str	r3, [r1, #32]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
1000182e:	f7fe fea5 	bl	1000057c <HAL_GetTick>
10001832:	60f8      	str	r0, [r7, #12]

  /* Wait till MPU is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MPUSRCRDY) == RESET)
10001834:	e009      	b.n	1000184a <RCC_MPUConfig+0xd2>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001836:	f7fe fea1 	bl	1000057c <HAL_GetTick>
1000183a:	4602      	mov	r2, r0
1000183c:	68fb      	ldr	r3, [r7, #12]
1000183e:	1ad3      	subs	r3, r2, r3
10001840:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10001844:	d901      	bls.n	1000184a <RCC_MPUConfig+0xd2>
    {
      return HAL_TIMEOUT;
10001846:	2303      	movs	r3, #3
10001848:	e008      	b.n	1000185c <RCC_MPUConfig+0xe4>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MPUSRCRDY) == RESET)
1000184a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000184e:	6a1b      	ldr	r3, [r3, #32]
10001850:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10001854:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10001858:	d1ed      	bne.n	10001836 <RCC_MPUConfig+0xbe>

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
#endif

  return HAL_OK;
1000185a:	2300      	movs	r3, #0
}
1000185c:	4618      	mov	r0, r3
1000185e:	3710      	adds	r7, #16
10001860:	46bd      	mov	sp, r7
10001862:	bd80      	pop	{r7, pc}

10001864 <RCC_AXISSConfig>:


HAL_StatusTypeDef RCC_AXISSConfig(RCC_AXISSInitTypeDef *RCC_AXISSInitStruct)
{
10001864:	b580      	push	{r7, lr}
10001866:	b084      	sub	sp, #16
10001868:	af00      	add	r7, sp, #0
1000186a:	6078      	str	r0, [r7, #4]

  assert_param(IS_RCC_AXISSOURCE(RCC_AXISSInitStruct->AXI_Clock));
  assert_param(IS_RCC_AXIDIV(RCC_AXISSInitStruct->AXI_Div));

  /* Ensure clock source is ready*/
  switch (RCC_AXISSInitStruct->AXI_Clock)
1000186c:	687b      	ldr	r3, [r7, #4]
1000186e:	681b      	ldr	r3, [r3, #0]
10001870:	2b02      	cmp	r3, #2
10001872:	d01b      	beq.n	100018ac <RCC_AXISSConfig+0x48>
10001874:	2b02      	cmp	r3, #2
10001876:	d823      	bhi.n	100018c0 <RCC_AXISSConfig+0x5c>
10001878:	2b00      	cmp	r3, #0
1000187a:	d002      	beq.n	10001882 <RCC_AXISSConfig+0x1e>
1000187c:	2b01      	cmp	r3, #1
1000187e:	d00a      	beq.n	10001896 <RCC_AXISSConfig+0x32>
      }
      break;
    }

    default:
      break;
10001880:	e01e      	b.n	100018c0 <RCC_AXISSConfig+0x5c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10001882:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001886:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
1000188a:	f003 0301 	and.w	r3, r3, #1
1000188e:	2b01      	cmp	r3, #1
10001890:	d018      	beq.n	100018c4 <RCC_AXISSConfig+0x60>
        return HAL_ERROR;
10001892:	2301      	movs	r3, #1
10001894:	e079      	b.n	1000198a <RCC_AXISSConfig+0x126>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
10001896:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000189a:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
1000189e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
100018a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
100018a6:	d00f      	beq.n	100018c8 <RCC_AXISSConfig+0x64>
        return HAL_ERROR;
100018a8:	2301      	movs	r3, #1
100018aa:	e06e      	b.n	1000198a <RCC_AXISSConfig+0x126>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
100018ac:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100018b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
100018b4:	f003 0302 	and.w	r3, r3, #2
100018b8:	2b02      	cmp	r3, #2
100018ba:	d007      	beq.n	100018cc <RCC_AXISSConfig+0x68>
        return HAL_ERROR;
100018bc:	2301      	movs	r3, #1
100018be:	e064      	b.n	1000198a <RCC_AXISSConfig+0x126>
      break;
100018c0:	bf00      	nop
100018c2:	e004      	b.n	100018ce <RCC_AXISSConfig+0x6a>
      break;
100018c4:	bf00      	nop
100018c6:	e002      	b.n	100018ce <RCC_AXISSConfig+0x6a>
      break;
100018c8:	bf00      	nop
100018ca:	e000      	b.n	100018ce <RCC_AXISSConfig+0x6a>
      break;
100018cc:	bf00      	nop

  }

  /* Set AXISS clock source */
  __HAL_RCC_AXISS_SOURCE(RCC_AXISSInitStruct->AXI_Clock);
100018ce:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100018d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100018d4:	f023 0207 	bic.w	r2, r3, #7
100018d8:	687b      	ldr	r3, [r7, #4]
100018da:	681b      	ldr	r3, [r3, #0]
100018dc:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100018e0:	4313      	orrs	r3, r2
100018e2:	624b      	str	r3, [r1, #36]	@ 0x24

  if (RCC_AXISSInitStruct->AXI_Clock != RCC_AXISSOURCE_OFF)
100018e4:	687b      	ldr	r3, [r7, #4]
100018e6:	681b      	ldr	r3, [r3, #0]
100018e8:	2b03      	cmp	r3, #3
100018ea:	d016      	beq.n	1000191a <RCC_AXISSConfig+0xb6>
  {
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100018ec:	f7fe fe46 	bl	1000057c <HAL_GetTick>
100018f0:	60f8      	str	r0, [r7, #12]

    /* Wait till AXISS is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) == RESET)
100018f2:	e009      	b.n	10001908 <RCC_AXISSConfig+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100018f4:	f7fe fe42 	bl	1000057c <HAL_GetTick>
100018f8:	4602      	mov	r2, r0
100018fa:	68fb      	ldr	r3, [r7, #12]
100018fc:	1ad3      	subs	r3, r2, r3
100018fe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10001902:	d901      	bls.n	10001908 <RCC_AXISSConfig+0xa4>
      {
        return HAL_TIMEOUT;
10001904:	2303      	movs	r3, #3
10001906:	e040      	b.n	1000198a <RCC_AXISSConfig+0x126>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) == RESET)
10001908:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000190c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000190e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10001912:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10001916:	d1ed      	bne.n	100018f4 <RCC_AXISSConfig+0x90>
10001918:	e015      	b.n	10001946 <RCC_AXISSConfig+0xe2>
  }
  else
  {
    // RCC_AXISSOURCE_OFF case
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
1000191a:	f7fe fe2f 	bl	1000057c <HAL_GetTick>
1000191e:	60f8      	str	r0, [r7, #12]

    /* Wait till AXISS is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) != RESET)
10001920:	e009      	b.n	10001936 <RCC_AXISSConfig+0xd2>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001922:	f7fe fe2b 	bl	1000057c <HAL_GetTick>
10001926:	4602      	mov	r2, r0
10001928:	68fb      	ldr	r3, [r7, #12]
1000192a:	1ad3      	subs	r3, r2, r3
1000192c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10001930:	d901      	bls.n	10001936 <RCC_AXISSConfig+0xd2>
      {
        return HAL_TIMEOUT;
10001932:	2303      	movs	r3, #3
10001934:	e029      	b.n	1000198a <RCC_AXISSConfig+0x126>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) != RESET)
10001936:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000193a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000193c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10001940:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10001944:	d0ed      	beq.n	10001922 <RCC_AXISSConfig+0xbe>
      }
    }
  }

  /* Set AXISS division factor */
  __HAL_RCC_AXI_DIV(RCC_AXISSInitStruct->AXI_Div);
10001946:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000194a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
1000194c:	f023 0207 	bic.w	r2, r3, #7
10001950:	687b      	ldr	r3, [r7, #4]
10001952:	685b      	ldr	r3, [r3, #4]
10001954:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10001958:	4313      	orrs	r3, r2
1000195a:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
1000195c:	f7fe fe0e 	bl	1000057c <HAL_GetTick>
10001960:	60f8      	str	r0, [r7, #12]

  /* Wait till AXISS is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXIDIVRDY) == RESET)
10001962:	e009      	b.n	10001978 <RCC_AXISSConfig+0x114>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001964:	f7fe fe0a 	bl	1000057c <HAL_GetTick>
10001968:	4602      	mov	r2, r0
1000196a:	68fb      	ldr	r3, [r7, #12]
1000196c:	1ad3      	subs	r3, r2, r3
1000196e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10001972:	d901      	bls.n	10001978 <RCC_AXISSConfig+0x114>
    {
      return HAL_TIMEOUT;
10001974:	2303      	movs	r3, #3
10001976:	e008      	b.n	1000198a <RCC_AXISSConfig+0x126>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXIDIVRDY) == RESET)
10001978:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000197c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
1000197e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10001982:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10001986:	d1ed      	bne.n	10001964 <RCC_AXISSConfig+0x100>
    }
  }

  return HAL_OK;
10001988:	2300      	movs	r3, #0
}
1000198a:	4618      	mov	r0, r3
1000198c:	3710      	adds	r7, #16
1000198e:	46bd      	mov	sp, r7
10001990:	bd80      	pop	{r7, pc}
	...

10001994 <RCC_MCUConfig>:


HAL_StatusTypeDef RCC_MCUConfig(RCC_MCUInitTypeDef *MCUInitStruct)
{
10001994:	b580      	push	{r7, lr}
10001996:	b084      	sub	sp, #16
10001998:	af00      	add	r7, sp, #0
1000199a:	6078      	str	r0, [r7, #4]

  assert_param(IS_RCC_MCUSSOURCE(MCUInitStruct->MCU_Clock));
  assert_param(IS_RCC_MCUDIV(MCUInitStruct->MCU_Div));

  /* Ensure clock source is ready*/
  switch (MCUInitStruct->MCU_Clock)
1000199c:	687b      	ldr	r3, [r7, #4]
1000199e:	681b      	ldr	r3, [r3, #0]
100019a0:	2b03      	cmp	r3, #3
100019a2:	d834      	bhi.n	10001a0e <RCC_MCUConfig+0x7a>
100019a4:	a201      	add	r2, pc, #4	@ (adr r2, 100019ac <RCC_MCUConfig+0x18>)
100019a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100019aa:	bf00      	nop
100019ac:	100019bd 	.word	0x100019bd
100019b0:	100019d1 	.word	0x100019d1
100019b4:	100019e7 	.word	0x100019e7
100019b8:	100019fb 	.word	0x100019fb
  {
    case (RCC_MCUSSOURCE_HSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
100019bc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100019c0:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
100019c4:	f003 0301 	and.w	r3, r3, #1
100019c8:	2b01      	cmp	r3, #1
100019ca:	d022      	beq.n	10001a12 <RCC_MCUConfig+0x7e>
      {
        return HAL_ERROR;
100019cc:	2301      	movs	r3, #1
100019ce:	e081      	b.n	10001ad4 <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_HSE):
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
100019d0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100019d4:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
100019d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
100019dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
100019e0:	d019      	beq.n	10001a16 <RCC_MCUConfig+0x82>
      {
        return HAL_ERROR;
100019e2:	2301      	movs	r3, #1
100019e4:	e076      	b.n	10001ad4 <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_CSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
100019e6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100019ea:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
100019ee:	f003 0310 	and.w	r3, r3, #16
100019f2:	2b10      	cmp	r3, #16
100019f4:	d011      	beq.n	10001a1a <RCC_MCUConfig+0x86>
      {
        return HAL_ERROR;
100019f6:	2301      	movs	r3, #1
100019f8:	e06c      	b.n	10001ad4 <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_PLL3):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
100019fa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100019fe:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10001a02:	f003 0302 	and.w	r3, r3, #2
10001a06:	2b02      	cmp	r3, #2
10001a08:	d009      	beq.n	10001a1e <RCC_MCUConfig+0x8a>
      {
        return HAL_ERROR;
10001a0a:	2301      	movs	r3, #1
10001a0c:	e062      	b.n	10001ad4 <RCC_MCUConfig+0x140>
      }
      break;
    }

    default:
      break;
10001a0e:	bf00      	nop
10001a10:	e006      	b.n	10001a20 <RCC_MCUConfig+0x8c>
      break;
10001a12:	bf00      	nop
10001a14:	e004      	b.n	10001a20 <RCC_MCUConfig+0x8c>
      break;
10001a16:	bf00      	nop
10001a18:	e002      	b.n	10001a20 <RCC_MCUConfig+0x8c>
      break;
10001a1a:	bf00      	nop
10001a1c:	e000      	b.n	10001a20 <RCC_MCUConfig+0x8c>
      break;
10001a1e:	bf00      	nop

  }

  /* Set MCU clock source */
  __HAL_RCC_MCU_SOURCE(MCUInitStruct->MCU_Clock);
10001a20:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001a24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10001a26:	f023 0203 	bic.w	r2, r3, #3
10001a2a:	687b      	ldr	r3, [r7, #4]
10001a2c:	681b      	ldr	r3, [r3, #0]
10001a2e:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10001a32:	4313      	orrs	r3, r2
10001a34:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10001a36:	f7fe fda1 	bl	1000057c <HAL_GetTick>
10001a3a:	60f8      	str	r0, [r7, #12]

  /* Wait till MCU is ready */

  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUSSRCRDY) == RESET)
10001a3c:	e009      	b.n	10001a52 <RCC_MCUConfig+0xbe>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001a3e:	f7fe fd9d 	bl	1000057c <HAL_GetTick>
10001a42:	4602      	mov	r2, r0
10001a44:	68fb      	ldr	r3, [r7, #12]
10001a46:	1ad3      	subs	r3, r2, r3
10001a48:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10001a4c:	d901      	bls.n	10001a52 <RCC_MCUConfig+0xbe>
    {
      return HAL_TIMEOUT;
10001a4e:	2303      	movs	r3, #3
10001a50:	e040      	b.n	10001ad4 <RCC_MCUConfig+0x140>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUSSRCRDY) == RESET)
10001a52:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001a56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10001a58:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10001a5c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10001a60:	d1ed      	bne.n	10001a3e <RCC_MCUConfig+0xaa>
    }
  }

#ifdef CORE_CM4
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
10001a62:	f000 f954 	bl	10001d0e <HAL_RCC_GetSystemCoreClockFreq>
10001a66:	4603      	mov	r3, r0
10001a68:	4a1c      	ldr	r2, [pc, #112]	@ (10001adc <RCC_MCUConfig+0x148>)
10001a6a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
10001a6c:	4b1c      	ldr	r3, [pc, #112]	@ (10001ae0 <RCC_MCUConfig+0x14c>)
10001a6e:	681b      	ldr	r3, [r3, #0]
10001a70:	4618      	mov	r0, r3
10001a72:	f7fe fd39 	bl	100004e8 <HAL_InitTick>
#endif

  /* Set MCU division factor */
  __HAL_RCC_MCU_DIV(MCUInitStruct->MCU_Div);
10001a76:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001a7a:	f8d3 3830 	ldr.w	r3, [r3, #2096]	@ 0x830
10001a7e:	f023 020f 	bic.w	r2, r3, #15
10001a82:	687b      	ldr	r3, [r7, #4]
10001a84:	685b      	ldr	r3, [r3, #4]
10001a86:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10001a8a:	4313      	orrs	r3, r2
10001a8c:	f8c1 3830 	str.w	r3, [r1, #2096]	@ 0x830

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10001a90:	f7fe fd74 	bl	1000057c <HAL_GetTick>
10001a94:	60f8      	str	r0, [r7, #12]

  /* Wait till MCU is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUDIVRDY) == RESET)
10001a96:	e009      	b.n	10001aac <RCC_MCUConfig+0x118>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001a98:	f7fe fd70 	bl	1000057c <HAL_GetTick>
10001a9c:	4602      	mov	r2, r0
10001a9e:	68fb      	ldr	r3, [r7, #12]
10001aa0:	1ad3      	subs	r3, r2, r3
10001aa2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10001aa6:	d901      	bls.n	10001aac <RCC_MCUConfig+0x118>
    {
      return HAL_TIMEOUT;
10001aa8:	2303      	movs	r3, #3
10001aaa:	e013      	b.n	10001ad4 <RCC_MCUConfig+0x140>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUDIVRDY) == RESET)
10001aac:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001ab0:	f8d3 3830 	ldr.w	r3, [r3, #2096]	@ 0x830
10001ab4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10001ab8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10001abc:	d1ec      	bne.n	10001a98 <RCC_MCUConfig+0x104>
    }
  }
#ifdef CORE_CM4
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
10001abe:	f000 f926 	bl	10001d0e <HAL_RCC_GetSystemCoreClockFreq>
10001ac2:	4603      	mov	r3, r0
10001ac4:	4a05      	ldr	r2, [pc, #20]	@ (10001adc <RCC_MCUConfig+0x148>)
10001ac6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
10001ac8:	4b05      	ldr	r3, [pc, #20]	@ (10001ae0 <RCC_MCUConfig+0x14c>)
10001aca:	681b      	ldr	r3, [r3, #0]
10001acc:	4618      	mov	r0, r3
10001ace:	f7fe fd0b 	bl	100004e8 <HAL_InitTick>
#endif

  return HAL_OK;
10001ad2:	2300      	movs	r3, #0
}
10001ad4:	4618      	mov	r0, r3
10001ad6:	3710      	adds	r7, #16
10001ad8:	46bd      	mov	sp, r7
10001ada:	bd80      	pop	{r7, pc}
10001adc:	10020000 	.word	0x10020000
10001ae0:	10020004 	.word	0x10020004

10001ae4 <HAL_RCC_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
__weak void HAL_RCC_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
10001ae4:	b480      	push	{r7}
10001ae6:	b089      	sub	sp, #36	@ 0x24
10001ae8:	af00      	add	r7, sp, #0
10001aea:	6078      	str	r0, [r7, #4]
  uint32_t   pllsource = 0, pll3m = 1, pll3fracen = 0, hsivalue = 0;
10001aec:	2300      	movs	r3, #0
10001aee:	61bb      	str	r3, [r7, #24]
10001af0:	2301      	movs	r3, #1
10001af2:	617b      	str	r3, [r7, #20]
10001af4:	2300      	movs	r3, #0
10001af6:	613b      	str	r3, [r7, #16]
10001af8:	2300      	movs	r3, #0
10001afa:	60fb      	str	r3, [r7, #12]
  float fracn1, pll3vco = 0;
10001afc:	f04f 0300 	mov.w	r3, #0
10001b00:	61fb      	str	r3, [r7, #28]

  pllsource = __HAL_RCC_GET_PLL3_SOURCE();
10001b02:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001b06:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
10001b0a:	f003 0303 	and.w	r3, r3, #3
10001b0e:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLL3CFGR1 & RCC_PLL3CFGR1_DIVM3) >> RCC_PLL3CFGR1_DIVM3_Pos) + 1U;
10001b10:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001b14:	f8d3 3884 	ldr.w	r3, [r3, #2180]	@ 0x884
10001b18:	0c1b      	lsrs	r3, r3, #16
10001b1a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
10001b1e:	3301      	adds	r3, #1
10001b20:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLL3FRACR & RCC_PLL3FRACR_FRACLE) >> RCC_PLL3FRACR_FRACLE_Pos;
10001b22:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001b26:	f8d3 388c 	ldr.w	r3, [r3, #2188]	@ 0x88c
10001b2a:	0c1b      	lsrs	r3, r3, #16
10001b2c:	f003 0301 	and.w	r3, r3, #1
10001b30:	613b      	str	r3, [r7, #16]
  fracn1 = (float)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACV) >> RCC_PLL3FRACR_FRACV_Pos));
10001b32:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001b36:	f8d3 388c 	ldr.w	r3, [r3, #2188]	@ 0x88c
10001b3a:	08db      	lsrs	r3, r3, #3
10001b3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
10001b40:	693a      	ldr	r2, [r7, #16]
10001b42:	fb02 f303 	mul.w	r3, r2, r3
10001b46:	ee07 3a90 	vmov	s15, r3
10001b4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
10001b4e:	edc7 7a02 	vstr	s15, [r7, #8]
  pll3vco = (float)((float)((RCC->PLL3CFGR1 & RCC_PLL3CFGR1_DIVN) + 1U) + (fracn1 / (float) 0x2000));  //Intermediary value
10001b52:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001b56:	f8d3 3884 	ldr.w	r3, [r3, #2180]	@ 0x884
10001b5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
10001b5e:	3301      	adds	r3, #1
10001b60:	ee07 3a90 	vmov	s15, r3
10001b64:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10001b68:	edd7 6a02 	vldr	s13, [r7, #8]
10001b6c:	ed9f 6a56 	vldr	s12, [pc, #344]	@ 10001cc8 <HAL_RCC_GetPLL3ClockFreq+0x1e4>
10001b70:	eec6 7a86 	vdiv.f32	s15, s13, s12
10001b74:	ee77 7a27 	vadd.f32	s15, s14, s15
10001b78:	edc7 7a07 	vstr	s15, [r7, #28]
  switch (pllsource)
10001b7c:	69bb      	ldr	r3, [r7, #24]
10001b7e:	2b03      	cmp	r3, #3
10001b80:	d85b      	bhi.n	10001c3a <HAL_RCC_GetPLL3ClockFreq+0x156>
10001b82:	a201      	add	r2, pc, #4	@ (adr r2, 10001b88 <HAL_RCC_GetPLL3ClockFreq+0xa4>)
10001b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10001b88:	10001b99 	.word	0x10001b99
10001b8c:	10001bf7 	.word	0x10001bf7
10001b90:	10001c15 	.word	0x10001c15
10001b94:	10001c33 	.word	0x10001c33
  {
    case RCC_PLL3SOURCE_HSI:  /* HSI used as PLL clock source */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) != 0U)
10001b98:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001b9c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10001ba0:	f003 0304 	and.w	r3, r3, #4
10001ba4:	2b04      	cmp	r3, #4
10001ba6:	d117      	bne.n	10001bd8 <HAL_RCC_GetPLL3ClockFreq+0xf4>
      {
        hsivalue = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10001ba8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001bac:	699b      	ldr	r3, [r3, #24]
10001bae:	f003 0303 	and.w	r3, r3, #3
10001bb2:	4a46      	ldr	r2, [pc, #280]	@ (10001ccc <HAL_RCC_GetPLL3ClockFreq+0x1e8>)
10001bb4:	fa22 f303 	lsr.w	r3, r2, r3
10001bb8:	60fb      	str	r3, [r7, #12]
        pll3vco *= (float)(hsivalue / pll3m);
10001bba:	68fa      	ldr	r2, [r7, #12]
10001bbc:	697b      	ldr	r3, [r7, #20]
10001bbe:	fbb2 f3f3 	udiv	r3, r2, r3
10001bc2:	ee07 3a90 	vmov	s15, r3
10001bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
10001bca:	ed97 7a07 	vldr	s14, [r7, #28]
10001bce:	ee67 7a27 	vmul.f32	s15, s14, s15
10001bd2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco *= (float)(HSI_VALUE / pll3m);
      }
      break;
10001bd6:	e030      	b.n	10001c3a <HAL_RCC_GetPLL3ClockFreq+0x156>
        pll3vco *= (float)(HSI_VALUE / pll3m);
10001bd8:	4a3c      	ldr	r2, [pc, #240]	@ (10001ccc <HAL_RCC_GetPLL3ClockFreq+0x1e8>)
10001bda:	697b      	ldr	r3, [r7, #20]
10001bdc:	fbb2 f3f3 	udiv	r3, r2, r3
10001be0:	ee07 3a90 	vmov	s15, r3
10001be4:	eef8 7a67 	vcvt.f32.u32	s15, s15
10001be8:	ed97 7a07 	vldr	s14, [r7, #28]
10001bec:	ee67 7a27 	vmul.f32	s15, s14, s15
10001bf0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10001bf4:	e021      	b.n	10001c3a <HAL_RCC_GetPLL3ClockFreq+0x156>

    case RCC_PLL3SOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco *= (float)(HSE_VALUE / pll3m);
10001bf6:	4a36      	ldr	r2, [pc, #216]	@ (10001cd0 <HAL_RCC_GetPLL3ClockFreq+0x1ec>)
10001bf8:	697b      	ldr	r3, [r7, #20]
10001bfa:	fbb2 f3f3 	udiv	r3, r2, r3
10001bfe:	ee07 3a90 	vmov	s15, r3
10001c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
10001c06:	ed97 7a07 	vldr	s14, [r7, #28]
10001c0a:	ee67 7a27 	vmul.f32	s15, s14, s15
10001c0e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10001c12:	e012      	b.n	10001c3a <HAL_RCC_GetPLL3ClockFreq+0x156>



    case RCC_PLL3SOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco *= (float)(CSI_VALUE / pll3m);
10001c14:	4a2f      	ldr	r2, [pc, #188]	@ (10001cd4 <HAL_RCC_GetPLL3ClockFreq+0x1f0>)
10001c16:	697b      	ldr	r3, [r7, #20]
10001c18:	fbb2 f3f3 	udiv	r3, r2, r3
10001c1c:	ee07 3a90 	vmov	s15, r3
10001c20:	eef8 7a67 	vcvt.f32.u32	s15, s15
10001c24:	ed97 7a07 	vldr	s14, [r7, #28]
10001c28:	ee67 7a27 	vmul.f32	s15, s14, s15
10001c2c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10001c30:	e003      	b.n	10001c3a <HAL_RCC_GetPLL3ClockFreq+0x156>

    case RCC_PLL3SOURCE_OFF:  /* No clock source for PLL */
      pll3vco = 0;
10001c32:	f04f 0300 	mov.w	r3, #0
10001c36:	61fb      	str	r3, [r7, #28]
      break;
10001c38:	bf00      	nop
  }

  PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVP) >> RCC_PLL3CFGR2_DIVP_Pos) + 1U)));
10001c3a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001c3e:	f8d3 3888 	ldr.w	r3, [r3, #2184]	@ 0x888
10001c42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
10001c46:	3301      	adds	r3, #1
10001c48:	ee07 3a90 	vmov	s15, r3
10001c4c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10001c50:	edd7 6a07 	vldr	s13, [r7, #28]
10001c54:	eec6 7a87 	vdiv.f32	s15, s13, s14
10001c58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10001c5c:	ee17 2a90 	vmov	r2, s15
10001c60:	687b      	ldr	r3, [r7, #4]
10001c62:	601a      	str	r2, [r3, #0]
  PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVQ) >> RCC_PLL3CFGR2_DIVQ_Pos) + 1U)));
10001c64:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001c68:	f8d3 3888 	ldr.w	r3, [r3, #2184]	@ 0x888
10001c6c:	0a1b      	lsrs	r3, r3, #8
10001c6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
10001c72:	3301      	adds	r3, #1
10001c74:	ee07 3a90 	vmov	s15, r3
10001c78:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10001c7c:	edd7 6a07 	vldr	s13, [r7, #28]
10001c80:	eec6 7a87 	vdiv.f32	s15, s13, s14
10001c84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10001c88:	ee17 2a90 	vmov	r2, s15
10001c8c:	687b      	ldr	r3, [r7, #4]
10001c8e:	605a      	str	r2, [r3, #4]
  PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVR) >> RCC_PLL3CFGR2_DIVR_Pos) + 1U)));
10001c90:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001c94:	f8d3 3888 	ldr.w	r3, [r3, #2184]	@ 0x888
10001c98:	0c1b      	lsrs	r3, r3, #16
10001c9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
10001c9e:	3301      	adds	r3, #1
10001ca0:	ee07 3a90 	vmov	s15, r3
10001ca4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10001ca8:	edd7 6a07 	vldr	s13, [r7, #28]
10001cac:	eec6 7a87 	vdiv.f32	s15, s13, s14
10001cb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10001cb4:	ee17 2a90 	vmov	r2, s15
10001cb8:	687b      	ldr	r3, [r7, #4]
10001cba:	609a      	str	r2, [r3, #8]
}
10001cbc:	bf00      	nop
10001cbe:	3724      	adds	r7, #36	@ 0x24
10001cc0:	46bd      	mov	sp, r7
10001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
10001cc6:	4770      	bx	lr
10001cc8:	46000000 	.word	0x46000000
10001ccc:	03d09000 	.word	0x03d09000
10001cd0:	016e3600 	.word	0x016e3600
10001cd4:	003d0900 	.word	0x003d0900

10001cd8 <HAL_RCC_GetMCUFreq>:
  * @note   Each time MCU changes, this function must be called to update the
  *         right MCU value. Otherwise, any configuration based on this function will be incorrect.
  * @retval MCU frequency
  */
uint32_t HAL_RCC_GetMCUFreq(void)
{
10001cd8:	b580      	push	{r7, lr}
10001cda:	b082      	sub	sp, #8
10001cdc:	af00      	add	r7, sp, #0
  uint32_t mcudiv = 0;
10001cde:	2300      	movs	r3, #0
10001ce0:	607b      	str	r3, [r7, #4]

  /* Compute MCU frequency ---------------------------*/
  mcudiv = __HAL_RCC_GET_MCU_DIV();
10001ce2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001ce6:	f8d3 3830 	ldr.w	r3, [r3, #2096]	@ 0x830
10001cea:	f003 030f 	and.w	r3, r3, #15
10001cee:	607b      	str	r3, [r7, #4]
  if (mcudiv > RCC_MCU_DIV512)
10001cf0:	687b      	ldr	r3, [r7, #4]
10001cf2:	2b09      	cmp	r3, #9
10001cf4:	d901      	bls.n	10001cfa <HAL_RCC_GetMCUFreq+0x22>
  {
    mcudiv = RCC_MCU_DIV512;
10001cf6:	2309      	movs	r3, #9
10001cf8:	607b      	str	r3, [r7, #4]
  }

  return HAL_RCC_GetMCUSSFreq() >> mcudiv;
10001cfa:	f000 f80f 	bl	10001d1c <HAL_RCC_GetMCUSSFreq>
10001cfe:	4602      	mov	r2, r0
10001d00:	687b      	ldr	r3, [r7, #4]
10001d02:	fa22 f303 	lsr.w	r3, r2, r3
}
10001d06:	4618      	mov	r0, r3
10001d08:	3708      	adds	r7, #8
10001d0a:	46bd      	mov	sp, r7
10001d0c:	bd80      	pop	{r7, pc}

10001d0e <HAL_RCC_GetSystemCoreClockFreq>:
  *         frequency in the chip. It is calculated based on the predefined
  *         constants and the selected clock source
  * @retval System Core frequency
  */
uint32_t HAL_RCC_GetSystemCoreClockFreq(void)
{
10001d0e:	b580      	push	{r7, lr}
10001d10:	af00      	add	r7, sp, #0
#ifdef CORE_CA7
  return HAL_RCC_GetMPUSSFreq();
#else /* CORE_CM4 */
  return HAL_RCC_GetMCUFreq();
10001d12:	f7ff ffe1 	bl	10001cd8 <HAL_RCC_GetMCUFreq>
10001d16:	4603      	mov	r3, r0
#endif
}
10001d18:	4618      	mov	r0, r3
10001d1a:	bd80      	pop	{r7, pc}

10001d1c <HAL_RCC_GetMCUSSFreq>:

  return axissfreq;
}

uint32_t HAL_RCC_GetMCUSSFreq()
{
10001d1c:	b580      	push	{r7, lr}
10001d1e:	b084      	sub	sp, #16
10001d20:	af00      	add	r7, sp, #0
  uint32_t mcussfreq = 0;
10001d22:	2300      	movs	r3, #0
10001d24:	60fb      	str	r3, [r7, #12]
  PLL3_ClocksTypeDef pll3_clocks;

  switch (__HAL_RCC_GET_MCU_SOURCE())
10001d26:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001d2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10001d2c:	f003 0303 	and.w	r3, r3, #3
10001d30:	2b03      	cmp	r3, #3
10001d32:	d822      	bhi.n	10001d7a <HAL_RCC_GetMCUSSFreq+0x5e>
10001d34:	a201      	add	r2, pc, #4	@ (adr r2, 10001d3c <HAL_RCC_GetMCUSSFreq+0x20>)
10001d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10001d3a:	bf00      	nop
10001d3c:	10001d5b 	.word	0x10001d5b
10001d40:	10001d6f 	.word	0x10001d6f
10001d44:	10001d75 	.word	0x10001d75
10001d48:	10001d4d 	.word	0x10001d4d
  {
    case RCC_MCUSSOURCE_PLL3:
      HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10001d4c:	463b      	mov	r3, r7
10001d4e:	4618      	mov	r0, r3
10001d50:	f7ff fec8 	bl	10001ae4 <HAL_RCC_GetPLL3ClockFreq>
      mcussfreq = pll3_clocks.PLL3_P_Frequency;
10001d54:	683b      	ldr	r3, [r7, #0]
10001d56:	60fb      	str	r3, [r7, #12]
      break;
10001d58:	e00f      	b.n	10001d7a <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_HSI:
      mcussfreq = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10001d5a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001d5e:	699b      	ldr	r3, [r3, #24]
10001d60:	f003 0303 	and.w	r3, r3, #3
10001d64:	4a07      	ldr	r2, [pc, #28]	@ (10001d84 <HAL_RCC_GetMCUSSFreq+0x68>)
10001d66:	fa22 f303 	lsr.w	r3, r2, r3
10001d6a:	60fb      	str	r3, [r7, #12]

      break;
10001d6c:	e005      	b.n	10001d7a <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_HSE:
      mcussfreq = HSE_VALUE;
10001d6e:	4b06      	ldr	r3, [pc, #24]	@ (10001d88 <HAL_RCC_GetMCUSSFreq+0x6c>)
10001d70:	60fb      	str	r3, [r7, #12]
      break;
10001d72:	e002      	b.n	10001d7a <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_CSI:
      mcussfreq = CSI_VALUE;
10001d74:	4b05      	ldr	r3, [pc, #20]	@ (10001d8c <HAL_RCC_GetMCUSSFreq+0x70>)
10001d76:	60fb      	str	r3, [r7, #12]
      break;
10001d78:	bf00      	nop
  }

  return mcussfreq;
10001d7a:	68fb      	ldr	r3, [r7, #12]
}
10001d7c:	4618      	mov	r0, r3
10001d7e:	3710      	adds	r7, #16
10001d80:	46bd      	mov	sp, r7
10001d82:	bd80      	pop	{r7, pc}
10001d84:	03d09000 	.word	0x03d09000
10001d88:	016e3600 	.word	0x016e3600
10001d8c:	003d0900 	.word	0x003d0900

10001d90 <HAL_RCC_WAKEUP_IRQHandler>:
  * @brief This function handles the RCC Wake up interrupt (rcc_mcu_wkup_irq/rcc_mpu_wkup_irq)
  * @note This API should be called under the RCC_WAKEUP_Handler().
  * @retval None
  */
void HAL_RCC_WAKEUP_IRQHandler(void)
{
10001d90:	b580      	push	{r7, lr}
10001d92:	af00      	add	r7, sp, #0
  /* Check RCC WKUP flag is set */
  if (__HAL_RCC_GET_IT(RCC_IT_WKUP) != RESET)
10001d94:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001d98:	f8d3 3c18 	ldr.w	r3, [r3, #3096]	@ 0xc18
10001d9c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
10001da0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
10001da4:	d107      	bne.n	10001db6 <HAL_RCC_WAKEUP_IRQHandler+0x26>
  {
    /* Clear the RCC WKUP flag bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_WKUP);
10001da6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001daa:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
10001dae:	f8c3 2c18 	str.w	r2, [r3, #3096]	@ 0xc18

    /* RCC WKUP interrupt user callback */
    HAL_RCC_WAKEUP_Callback();
10001db2:	f000 f802 	bl	10001dba <HAL_RCC_WAKEUP_Callback>
  }
}
10001db6:	bf00      	nop
10001db8:	bd80      	pop	{r7, pc}

10001dba <HAL_RCC_WAKEUP_Callback>:
/**
  * @brief  RCC WAKEUP interrupt callback
  * @retval None
  */
__weak void HAL_RCC_WAKEUP_Callback(void)
{
10001dba:	b480      	push	{r7}
10001dbc:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_WAKEUP_Callback could be implemented in the user file
  */
}
10001dbe:	bf00      	nop
10001dc0:	46bd      	mov	sp, r7
10001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
10001dc6:	4770      	bx	lr

10001dc8 <RCCEx_PLL2_Config>:
  *
  * @retval HAL status
  */

HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLLInitTypeDef *pll2)
{
10001dc8:	b580      	push	{r7, lr}
10001dca:	b084      	sub	sp, #16
10001dcc:	af00      	add	r7, sp, #0
10001dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll2->PLLState));
  if ((pll2->PLLState) != RCC_PLL_NONE)
10001dd0:	687b      	ldr	r3, [r7, #4]
10001dd2:	681b      	ldr	r3, [r3, #0]
10001dd4:	2b00      	cmp	r3, #0
10001dd6:	f000 8171 	beq.w	100020bc <RCCEx_PLL2_Config+0x2f4>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL2_IN_USE()) /* If not used then */
10001dda:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001dde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10001de0:	f003 0307 	and.w	r3, r3, #7
10001de4:	2b02      	cmp	r3, #2
10001de6:	d108      	bne.n	10001dfa <RCCEx_PLL2_Config+0x32>
10001de8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10001dee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10001df2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10001df6:	f000 815f 	beq.w	100020b8 <RCCEx_PLL2_Config+0x2f0>
    {
      if ((pll2->PLLState) == RCC_PLL_ON)
10001dfa:	687b      	ldr	r3, [r7, #4]
10001dfc:	681b      	ldr	r3, [r3, #0]
10001dfe:	2b02      	cmp	r3, #2
10001e00:	f040 8130 	bne.w	10002064 <RCCEx_PLL2_Config+0x29c>
        assert_param(IS_RCC_PLLP2_VALUE(pll2->PLLP));
        assert_param(IS_RCC_PLLQ2_VALUE(pll2->PLLQ));
        assert_param(IS_RCC_PLLR2_VALUE(pll2->PLLR));

        /* Check that PLL2 OSC clock source is already set */
        if ((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) &&
10001e04:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001e08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10001e0a:	f003 0303 	and.w	r3, r3, #3
10001e0e:	2b00      	cmp	r3, #0
10001e10:	d008      	beq.n	10001e24 <RCCEx_PLL2_Config+0x5c>
            (__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSE))
10001e12:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001e16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10001e18:	f003 0303 	and.w	r3, r3, #3
        if ((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) &&
10001e1c:	2b01      	cmp	r3, #1
10001e1e:	d001      	beq.n	10001e24 <RCCEx_PLL2_Config+0x5c>
        {
          return HAL_ERROR;
10001e20:	2301      	movs	r3, #1
10001e22:	e14c      	b.n	100020be <RCCEx_PLL2_Config+0x2f6>
        }

        /*Disable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_DISABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
10001e24:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001e28:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10001e2c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001e30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
10001e34:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        /* Disable the main PLL. */
        __HAL_RCC_PLL2_DISABLE();
10001e38:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001e3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10001e40:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001e44:	f023 0301 	bic.w	r3, r3, #1
10001e48:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10001e4c:	f7fe fb96 	bl	1000057c <HAL_GetTick>
10001e50:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
10001e52:	e008      	b.n	10001e66 <RCCEx_PLL2_Config+0x9e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10001e54:	f7fe fb92 	bl	1000057c <HAL_GetTick>
10001e58:	4602      	mov	r2, r0
10001e5a:	68fb      	ldr	r3, [r7, #12]
10001e5c:	1ad3      	subs	r3, r2, r3
10001e5e:	2b64      	cmp	r3, #100	@ 0x64
10001e60:	d901      	bls.n	10001e66 <RCCEx_PLL2_Config+0x9e>
          {
            return HAL_TIMEOUT;
10001e62:	2303      	movs	r3, #3
10001e64:	e12b      	b.n	100020be <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
10001e66:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001e6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10001e6e:	f003 0302 	and.w	r3, r3, #2
10001e72:	2b02      	cmp	r3, #2
10001e74:	d0ee      	beq.n	10001e54 <RCCEx_PLL2_Config+0x8c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Do not change pll src if already in use */
        if (__IS_PLL1_IN_USE())
10001e76:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001e7a:	6a1b      	ldr	r3, [r3, #32]
10001e7c:	f003 0303 	and.w	r3, r3, #3
10001e80:	2b02      	cmp	r3, #2
10001e82:	d107      	bne.n	10001e94 <RCCEx_PLL2_Config+0xcc>
10001e84:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001e88:	6a1b      	ldr	r3, [r3, #32]
10001e8a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10001e8e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10001e92:	d00e      	beq.n	10001eb2 <RCCEx_PLL2_Config+0xea>
10001e94:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001e98:	6a1b      	ldr	r3, [r3, #32]
10001e9a:	f003 0303 	and.w	r3, r3, #3
10001e9e:	2b03      	cmp	r3, #3
10001ea0:	d112      	bne.n	10001ec8 <RCCEx_PLL2_Config+0x100>
10001ea2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001ea6:	6a1b      	ldr	r3, [r3, #32]
10001ea8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10001eac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10001eb0:	d10a      	bne.n	10001ec8 <RCCEx_PLL2_Config+0x100>
        {
          if (pll2->PLLSource != __HAL_RCC_GET_PLL12_SOURCE())
10001eb2:	687b      	ldr	r3, [r7, #4]
10001eb4:	685a      	ldr	r2, [r3, #4]
10001eb6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001eba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10001ebc:	f003 0303 	and.w	r3, r3, #3
10001ec0:	429a      	cmp	r2, r3
10001ec2:	d00c      	beq.n	10001ede <RCCEx_PLL2_Config+0x116>
          {
            return HAL_ERROR;
10001ec4:	2301      	movs	r3, #1
10001ec6:	e0fa      	b.n	100020be <RCCEx_PLL2_Config+0x2f6>
          }
        }
        else
        {
          /* Configure PLL1 and PLL2 clock source */
          __HAL_RCC_PLL12_SOURCE(pll2->PLLSource);
10001ec8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001ecc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10001ece:	f023 0203 	bic.w	r2, r3, #3
10001ed2:	687b      	ldr	r3, [r7, #4]
10001ed4:	685b      	ldr	r3, [r3, #4]
10001ed6:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10001eda:	4313      	orrs	r3, r2
10001edc:	628b      	str	r3, [r1, #40]	@ 0x28
        }

        /* Configure the PLL2 multiplication and division factors. */
        __HAL_RCC_PLL2_CONFIG(
10001ede:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001ee2:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
10001ee6:	4b78      	ldr	r3, [pc, #480]	@ (100020c8 <RCCEx_PLL2_Config+0x300>)
10001ee8:	4013      	ands	r3, r2
10001eea:	687a      	ldr	r2, [r7, #4]
10001eec:	68d2      	ldr	r2, [r2, #12]
10001eee:	1e51      	subs	r1, r2, #1
10001ef0:	687a      	ldr	r2, [r7, #4]
10001ef2:	6892      	ldr	r2, [r2, #8]
10001ef4:	3a01      	subs	r2, #1
10001ef6:	0412      	lsls	r2, r2, #16
10001ef8:	430a      	orrs	r2, r1
10001efa:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10001efe:	4313      	orrs	r3, r2
10001f00:	f8c1 3098 	str.w	r3, [r1, #152]	@ 0x98
10001f04:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001f08:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
10001f0c:	f023 137f 	bic.w	r3, r3, #8323199	@ 0x7f007f
10001f10:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
10001f14:	687a      	ldr	r2, [r7, #4]
10001f16:	6912      	ldr	r2, [r2, #16]
10001f18:	1e51      	subs	r1, r2, #1
10001f1a:	687a      	ldr	r2, [r7, #4]
10001f1c:	6952      	ldr	r2, [r2, #20]
10001f1e:	3a01      	subs	r2, #1
10001f20:	0212      	lsls	r2, r2, #8
10001f22:	4311      	orrs	r1, r2
10001f24:	687a      	ldr	r2, [r7, #4]
10001f26:	6992      	ldr	r2, [r2, #24]
10001f28:	3a01      	subs	r2, #1
10001f2a:	0412      	lsls	r2, r2, #16
10001f2c:	430a      	orrs	r2, r1
10001f2e:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10001f32:	4313      	orrs	r3, r2
10001f34:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
          pll2->PLLQ,
          pll2->PLLR);


        /* Configure the Fractional Divider */
        __HAL_RCC_PLL2FRACV_DISABLE(); //Set FRACLE to ‘0’
10001f38:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001f3c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
10001f40:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001f44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
10001f48:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll2->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll2->PLLMODE == RCC_PLL_INTEGER))
10001f4c:	687b      	ldr	r3, [r7, #4]
10001f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10001f50:	2b02      	cmp	r3, #2
10001f52:	d003      	beq.n	10001f5c <RCCEx_PLL2_Config+0x194>
10001f54:	687b      	ldr	r3, [r7, #4]
10001f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10001f58:	2b00      	cmp	r3, #0
10001f5a:	d10c      	bne.n	10001f76 <RCCEx_PLL2_Config+0x1ae>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL2FRACV_CONFIG(0); //Set FRACV to '0'
10001f5c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001f60:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
10001f64:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001f68:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
10001f6c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
10001f70:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
10001f74:	e00f      	b.n	10001f96 <RCCEx_PLL2_Config+0x1ce>
        }
        else
        {
          /* Configure PLL  PLL2FRACV  in fractional mode*/
          __HAL_RCC_PLL2FRACV_CONFIG(pll2->PLLFRACV);
10001f76:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001f7a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
10001f7e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
10001f82:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
10001f86:	687a      	ldr	r2, [r7, #4]
10001f88:	6a12      	ldr	r2, [r2, #32]
10001f8a:	00d2      	lsls	r2, r2, #3
10001f8c:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10001f90:	4313      	orrs	r3, r2
10001f92:	f8c1 30a0 	str.w	r3, [r1, #160]	@ 0xa0
        }
        __HAL_RCC_PLL2FRACV_ENABLE(); //Set FRACLE to ‘1’
10001f96:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001f9a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
10001f9e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001fa2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
10001fa6:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0


        /* Configure the Spread Control */
        if (pll2->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
10001faa:	687b      	ldr	r3, [r7, #4]
10001fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10001fae:	2b02      	cmp	r3, #2
10001fb0:	d124      	bne.n	10001ffc <RCCEx_PLL2_Config+0x234>
          assert_param(IS_RCC_SSCG_MODE(pll2->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll2->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll2->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll2->MOD_PER));

          __HAL_RCC_PLL2CSGCONFIG(pll2->MOD_PER, pll2->TPDFN_DIS, pll2->RPDFN_DIS,
10001fb2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001fb6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
10001fba:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
10001fbe:	687b      	ldr	r3, [r7, #4]
10001fc0:	6a99      	ldr	r1, [r3, #40]	@ 0x28
10001fc2:	687b      	ldr	r3, [r7, #4]
10001fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10001fc6:	4319      	orrs	r1, r3
10001fc8:	687b      	ldr	r3, [r7, #4]
10001fca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10001fcc:	4319      	orrs	r1, r3
10001fce:	687b      	ldr	r3, [r7, #4]
10001fd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
10001fd2:	4319      	orrs	r1, r3
10001fd4:	687b      	ldr	r3, [r7, #4]
10001fd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10001fd8:	041b      	lsls	r3, r3, #16
10001fda:	430b      	orrs	r3, r1
10001fdc:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10001fe0:	4313      	orrs	r3, r2
10001fe2:	f8c1 30a4 	str.w	r3, [r1, #164]	@ 0xa4
                                  pll2->SSCG_MODE, pll2->INC_STEP);
          __HAL_RCC_PLL2_SSMODE_ENABLE();
10001fe6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001fea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10001fee:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001ff2:	f043 0304 	orr.w	r3, r3, #4
10001ff6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
10001ffa:	e009      	b.n	10002010 <RCCEx_PLL2_Config+0x248>
        }
        else
        {
          __HAL_RCC_PLL2_SSMODE_DISABLE();
10001ffc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002000:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10002004:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002008:	f023 0304 	bic.w	r3, r3, #4
1000200c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }


        /* Enable the PLL2. */
        __HAL_RCC_PLL2_ENABLE();
10002010:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002014:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10002018:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000201c:	f043 0301 	orr.w	r3, r3, #1
10002020:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10002024:	f7fe faaa 	bl	1000057c <HAL_GetTick>
10002028:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
1000202a:	e008      	b.n	1000203e <RCCEx_PLL2_Config+0x276>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1000202c:	f7fe faa6 	bl	1000057c <HAL_GetTick>
10002030:	4602      	mov	r2, r0
10002032:	68fb      	ldr	r3, [r7, #12]
10002034:	1ad3      	subs	r3, r2, r3
10002036:	2b64      	cmp	r3, #100	@ 0x64
10002038:	d901      	bls.n	1000203e <RCCEx_PLL2_Config+0x276>
          {
            return HAL_TIMEOUT;
1000203a:	2303      	movs	r3, #3
1000203c:	e03f      	b.n	100020be <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
1000203e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002042:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10002046:	f003 0302 	and.w	r3, r3, #2
1000204a:	2b02      	cmp	r3, #2
1000204c:	d1ee      	bne.n	1000202c <RCCEx_PLL2_Config+0x264>
          }
        }
        /*Enable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
1000204e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002052:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10002056:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000205a:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
1000205e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      if ((pll2->PLLState) == RCC_PLL_ON)
10002062:	e02b      	b.n	100020bc <RCCEx_PLL2_Config+0x2f4>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_DISABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
10002064:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002068:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
1000206c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002070:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
10002074:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        /* Disable the PLL2. */
        __HAL_RCC_PLL2_DISABLE();
10002078:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000207c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10002080:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002084:	f023 0301 	bic.w	r3, r3, #1
10002088:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
1000208c:	f7fe fa76 	bl	1000057c <HAL_GetTick>
10002090:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
10002092:	e008      	b.n	100020a6 <RCCEx_PLL2_Config+0x2de>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10002094:	f7fe fa72 	bl	1000057c <HAL_GetTick>
10002098:	4602      	mov	r2, r0
1000209a:	68fb      	ldr	r3, [r7, #12]
1000209c:	1ad3      	subs	r3, r2, r3
1000209e:	2b64      	cmp	r3, #100	@ 0x64
100020a0:	d901      	bls.n	100020a6 <RCCEx_PLL2_Config+0x2de>
          {
            return HAL_TIMEOUT;
100020a2:	2303      	movs	r3, #3
100020a4:	e00b      	b.n	100020be <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
100020a6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100020aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
100020ae:	f003 0302 	and.w	r3, r3, #2
100020b2:	2b02      	cmp	r3, #2
100020b4:	d0ee      	beq.n	10002094 <RCCEx_PLL2_Config+0x2cc>
      if ((pll2->PLLState) == RCC_PLL_ON)
100020b6:	e001      	b.n	100020bc <RCCEx_PLL2_Config+0x2f4>
        }
      }
    }
    else
    {
      return HAL_ERROR;
100020b8:	2301      	movs	r3, #1
100020ba:	e000      	b.n	100020be <RCCEx_PLL2_Config+0x2f6>
    }
  }
  return HAL_OK;
100020bc:	2300      	movs	r3, #0

}
100020be:	4618      	mov	r0, r3
100020c0:	3710      	adds	r7, #16
100020c2:	46bd      	mov	sp, r7
100020c4:	bd80      	pop	{r7, pc}
100020c6:	bf00      	nop
100020c8:	ffc0fe00 	.word	0xffc0fe00

100020cc <RCCEx_PLL3_Config>:
  * @param  pll3: pointer to a RCC_PLLInitTypeDef structure
  *
  * @retval HAL status
  */
HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLLInitTypeDef *pll3)
{
100020cc:	b580      	push	{r7, lr}
100020ce:	b084      	sub	sp, #16
100020d0:	af00      	add	r7, sp, #0
100020d2:	6078      	str	r0, [r7, #4]

  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll3->PLLState));
  if ((pll3->PLLState) != RCC_PLL_NONE)
100020d4:	687b      	ldr	r3, [r7, #4]
100020d6:	681b      	ldr	r3, [r3, #0]
100020d8:	2b00      	cmp	r3, #0
100020da:	f000 815a 	beq.w	10002392 <RCCEx_PLL3_Config+0x2c6>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL3_IN_USE()) /* If not used then*/
100020de:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100020e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
100020e4:	f003 0303 	and.w	r3, r3, #3
100020e8:	2b03      	cmp	r3, #3
100020ea:	d108      	bne.n	100020fe <RCCEx_PLL3_Config+0x32>
100020ec:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100020f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
100020f2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
100020f6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
100020fa:	f000 8148 	beq.w	1000238e <RCCEx_PLL3_Config+0x2c2>
    {
      if ((pll3->PLLState) == RCC_PLL_ON)
100020fe:	687b      	ldr	r3, [r7, #4]
10002100:	681b      	ldr	r3, [r3, #0]
10002102:	2b02      	cmp	r3, #2
10002104:	f040 8119 	bne.w	1000233a <RCCEx_PLL3_Config+0x26e>
        assert_param(IS_RCC_PLLP3_VALUE(pll3->PLLP));
        assert_param(IS_RCC_PLLQ3_VALUE(pll3->PLLQ));
        assert_param(IS_RCC_PLLR3_VALUE(pll3->PLLR));

        /*Disable the post-dividers*/
        __HAL_RCC_PLL3CLKOUT_DISABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
10002108:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000210c:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10002110:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002114:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
10002118:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880
        /* Disable the main PLL. */
        __HAL_RCC_PLL3_DISABLE();
1000211c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002120:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10002124:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002128:	f023 0301 	bic.w	r3, r3, #1
1000212c:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10002130:	f7fe fa24 	bl	1000057c <HAL_GetTick>
10002134:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
10002136:	e008      	b.n	1000214a <RCCEx_PLL3_Config+0x7e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10002138:	f7fe fa20 	bl	1000057c <HAL_GetTick>
1000213c:	4602      	mov	r2, r0
1000213e:	68fb      	ldr	r3, [r7, #12]
10002140:	1ad3      	subs	r3, r2, r3
10002142:	2b64      	cmp	r3, #100	@ 0x64
10002144:	d901      	bls.n	1000214a <RCCEx_PLL3_Config+0x7e>
          {
            return HAL_TIMEOUT;
10002146:	2303      	movs	r3, #3
10002148:	e124      	b.n	10002394 <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
1000214a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000214e:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10002152:	f003 0302 	and.w	r3, r3, #2
10002156:	2b02      	cmp	r3, #2
10002158:	d0ee      	beq.n	10002138 <RCCEx_PLL3_Config+0x6c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Configure PLL3 clock source */
        __HAL_RCC_PLL3_SOURCE(pll3->PLLSource);
1000215a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000215e:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
10002162:	f023 0203 	bic.w	r2, r3, #3
10002166:	687b      	ldr	r3, [r7, #4]
10002168:	685b      	ldr	r3, [r3, #4]
1000216a:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
1000216e:	4313      	orrs	r3, r2
10002170:	f8c1 3820 	str.w	r3, [r1, #2080]	@ 0x820

        /* Wait till PLL SOURCE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3SRCRDY) == RESET)
10002174:	e008      	b.n	10002188 <RCCEx_PLL3_Config+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10002176:	f7fe fa01 	bl	1000057c <HAL_GetTick>
1000217a:	4602      	mov	r2, r0
1000217c:	68fb      	ldr	r3, [r7, #12]
1000217e:	1ad3      	subs	r3, r2, r3
10002180:	2b64      	cmp	r3, #100	@ 0x64
10002182:	d901      	bls.n	10002188 <RCCEx_PLL3_Config+0xbc>
          {
            return HAL_TIMEOUT;
10002184:	2303      	movs	r3, #3
10002186:	e105      	b.n	10002394 <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3SRCRDY) == RESET)
10002188:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000218c:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
10002190:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10002194:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10002198:	d1ed      	bne.n	10002176 <RCCEx_PLL3_Config+0xaa>
          }
        }

        /* Select PLL3 input reference frequency range */
        __HAL_RCC_PLL3_IFRANGE(pll3->PLLRGE) ;
1000219a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000219e:	f8d3 3884 	ldr.w	r3, [r3, #2180]	@ 0x884
100021a2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
100021a6:	687b      	ldr	r3, [r7, #4]
100021a8:	69db      	ldr	r3, [r3, #28]
100021aa:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100021ae:	4313      	orrs	r3, r2
100021b0:	f8c1 3884 	str.w	r3, [r1, #2180]	@ 0x884

        /* Configure the PLL3 multiplication and division factors. */
        __HAL_RCC_PLL3_CONFIG(
100021b4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100021b8:	f8d3 2884 	ldr.w	r2, [r3, #2180]	@ 0x884
100021bc:	4b77      	ldr	r3, [pc, #476]	@ (1000239c <RCCEx_PLL3_Config+0x2d0>)
100021be:	4013      	ands	r3, r2
100021c0:	687a      	ldr	r2, [r7, #4]
100021c2:	68d2      	ldr	r2, [r2, #12]
100021c4:	1e51      	subs	r1, r2, #1
100021c6:	687a      	ldr	r2, [r7, #4]
100021c8:	6892      	ldr	r2, [r2, #8]
100021ca:	3a01      	subs	r2, #1
100021cc:	0412      	lsls	r2, r2, #16
100021ce:	430a      	orrs	r2, r1
100021d0:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100021d4:	4313      	orrs	r3, r2
100021d6:	f8c1 3884 	str.w	r3, [r1, #2180]	@ 0x884
100021da:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100021de:	f8d3 3888 	ldr.w	r3, [r3, #2184]	@ 0x888
100021e2:	f023 137f 	bic.w	r3, r3, #8323199	@ 0x7f007f
100021e6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
100021ea:	687a      	ldr	r2, [r7, #4]
100021ec:	6912      	ldr	r2, [r2, #16]
100021ee:	1e51      	subs	r1, r2, #1
100021f0:	687a      	ldr	r2, [r7, #4]
100021f2:	6952      	ldr	r2, [r2, #20]
100021f4:	3a01      	subs	r2, #1
100021f6:	0212      	lsls	r2, r2, #8
100021f8:	4311      	orrs	r1, r2
100021fa:	687a      	ldr	r2, [r7, #4]
100021fc:	6992      	ldr	r2, [r2, #24]
100021fe:	3a01      	subs	r2, #1
10002200:	0412      	lsls	r2, r2, #16
10002202:	430a      	orrs	r2, r1
10002204:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10002208:	4313      	orrs	r3, r2
1000220a:	f8c1 3888 	str.w	r3, [r1, #2184]	@ 0x888
          pll3->PLLP,
          pll3->PLLQ,
          pll3->PLLR);

        /* Configure the Fractional Divider */
        __HAL_RCC_PLL3FRACV_DISABLE(); //Set FRACLE to ‘0’
1000220e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002212:	f8d3 388c 	ldr.w	r3, [r3, #2188]	@ 0x88c
10002216:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000221a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
1000221e:	f8c2 388c 	str.w	r3, [r2, #2188]	@ 0x88c
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll3->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll3->PLLMODE == RCC_PLL_INTEGER))
10002222:	687b      	ldr	r3, [r7, #4]
10002224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10002226:	2b02      	cmp	r3, #2
10002228:	d003      	beq.n	10002232 <RCCEx_PLL3_Config+0x166>
1000222a:	687b      	ldr	r3, [r7, #4]
1000222c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000222e:	2b00      	cmp	r3, #0
10002230:	d10c      	bne.n	1000224c <RCCEx_PLL3_Config+0x180>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL3FRACV_CONFIG(0); //Set FRACV to '0'
10002232:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002236:	f8d3 388c 	ldr.w	r3, [r3, #2188]	@ 0x88c
1000223a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000223e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
10002242:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
10002246:	f8c2 388c 	str.w	r3, [r2, #2188]	@ 0x88c
1000224a:	e00f      	b.n	1000226c <RCCEx_PLL3_Config+0x1a0>
        }
        else
        {
          /* Configure PLL  PLL3FRACV  in fractional mode*/
          __HAL_RCC_PLL3FRACV_CONFIG(pll3->PLLFRACV);
1000224c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002250:	f8d3 388c 	ldr.w	r3, [r3, #2188]	@ 0x88c
10002254:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
10002258:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
1000225c:	687a      	ldr	r2, [r7, #4]
1000225e:	6a12      	ldr	r2, [r2, #32]
10002260:	00d2      	lsls	r2, r2, #3
10002262:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10002266:	4313      	orrs	r3, r2
10002268:	f8c1 388c 	str.w	r3, [r1, #2188]	@ 0x88c
        }
        __HAL_RCC_PLL3FRACV_ENABLE(); //Set FRACLE to ‘1’
1000226c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002270:	f8d3 388c 	ldr.w	r3, [r3, #2188]	@ 0x88c
10002274:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002278:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
1000227c:	f8c2 388c 	str.w	r3, [r2, #2188]	@ 0x88c


        /* Configure the Spread Control */
        if (pll3->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
10002280:	687b      	ldr	r3, [r7, #4]
10002282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10002284:	2b02      	cmp	r3, #2
10002286:	d124      	bne.n	100022d2 <RCCEx_PLL3_Config+0x206>
          assert_param(IS_RCC_SSCG_MODE(pll3->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll3->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll3->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll3->MOD_PER));

          __HAL_RCC_PLL3CSGCONFIG(pll3->MOD_PER, pll3->TPDFN_DIS, pll3->RPDFN_DIS,
10002288:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000228c:	f8d3 3890 	ldr.w	r3, [r3, #2192]	@ 0x890
10002290:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
10002294:	687b      	ldr	r3, [r7, #4]
10002296:	6a99      	ldr	r1, [r3, #40]	@ 0x28
10002298:	687b      	ldr	r3, [r7, #4]
1000229a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
1000229c:	4319      	orrs	r1, r3
1000229e:	687b      	ldr	r3, [r7, #4]
100022a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
100022a2:	4319      	orrs	r1, r3
100022a4:	687b      	ldr	r3, [r7, #4]
100022a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
100022a8:	4319      	orrs	r1, r3
100022aa:	687b      	ldr	r3, [r7, #4]
100022ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
100022ae:	041b      	lsls	r3, r3, #16
100022b0:	430b      	orrs	r3, r1
100022b2:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100022b6:	4313      	orrs	r3, r2
100022b8:	f8c1 3890 	str.w	r3, [r1, #2192]	@ 0x890
                                  pll3->SSCG_MODE, pll3->INC_STEP);
          __HAL_RCC_PLL3_SSMODE_ENABLE();
100022bc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100022c0:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100022c4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100022c8:	f043 0304 	orr.w	r3, r3, #4
100022cc:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880
100022d0:	e009      	b.n	100022e6 <RCCEx_PLL3_Config+0x21a>
        }
        else
        {
          __HAL_RCC_PLL3_SSMODE_DISABLE();
100022d2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100022d6:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100022da:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100022de:	f023 0304 	bic.w	r3, r3, #4
100022e2:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880
        }


        /* Enable the PLL3. */
        __HAL_RCC_PLL3_ENABLE();
100022e6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100022ea:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100022ee:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100022f2:	f043 0301 	orr.w	r3, r3, #1
100022f6:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100022fa:	f7fe f93f 	bl	1000057c <HAL_GetTick>
100022fe:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
10002300:	e008      	b.n	10002314 <RCCEx_PLL3_Config+0x248>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10002302:	f7fe f93b 	bl	1000057c <HAL_GetTick>
10002306:	4602      	mov	r2, r0
10002308:	68fb      	ldr	r3, [r7, #12]
1000230a:	1ad3      	subs	r3, r2, r3
1000230c:	2b64      	cmp	r3, #100	@ 0x64
1000230e:	d901      	bls.n	10002314 <RCCEx_PLL3_Config+0x248>
          {
            return HAL_TIMEOUT;
10002310:	2303      	movs	r3, #3
10002312:	e03f      	b.n	10002394 <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
10002314:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002318:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
1000231c:	f003 0302 	and.w	r3, r3, #2
10002320:	2b02      	cmp	r3, #2
10002322:	d1ee      	bne.n	10002302 <RCCEx_PLL3_Config+0x236>
          }
        }
        /* Enable the post-dividers */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
10002324:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002328:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
1000232c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002330:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
10002334:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880
      if ((pll3->PLLState) == RCC_PLL_ON)
10002338:	e02b      	b.n	10002392 <RCCEx_PLL3_Config+0x2c6>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL3CLKOUT_DISABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
1000233a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000233e:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10002342:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002346:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
1000234a:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880
        /* Disable the PLL3. */
        __HAL_RCC_PLL3_DISABLE();
1000234e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002352:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10002356:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000235a:	f023 0301 	bic.w	r3, r3, #1
1000235e:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10002362:	f7fe f90b 	bl	1000057c <HAL_GetTick>
10002366:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
10002368:	e008      	b.n	1000237c <RCCEx_PLL3_Config+0x2b0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1000236a:	f7fe f907 	bl	1000057c <HAL_GetTick>
1000236e:	4602      	mov	r2, r0
10002370:	68fb      	ldr	r3, [r7, #12]
10002372:	1ad3      	subs	r3, r2, r3
10002374:	2b64      	cmp	r3, #100	@ 0x64
10002376:	d901      	bls.n	1000237c <RCCEx_PLL3_Config+0x2b0>
          {
            return HAL_TIMEOUT;
10002378:	2303      	movs	r3, #3
1000237a:	e00b      	b.n	10002394 <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
1000237c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002380:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10002384:	f003 0302 	and.w	r3, r3, #2
10002388:	2b02      	cmp	r3, #2
1000238a:	d0ee      	beq.n	1000236a <RCCEx_PLL3_Config+0x29e>
      if ((pll3->PLLState) == RCC_PLL_ON)
1000238c:	e001      	b.n	10002392 <RCCEx_PLL3_Config+0x2c6>
        }
      }
    }
    else
    {
      return HAL_ERROR;
1000238e:	2301      	movs	r3, #1
10002390:	e000      	b.n	10002394 <RCCEx_PLL3_Config+0x2c8>
    }
  }
  return HAL_OK;
10002392:	2300      	movs	r3, #0
}
10002394:	4618      	mov	r0, r3
10002396:	3710      	adds	r7, #16
10002398:	46bd      	mov	sp, r7
1000239a:	bd80      	pop	{r7, pc}
1000239c:	ffc0fe00 	.word	0xffc0fe00

100023a0 <RCCEx_PLL4_Config>:
  * @param  pll4: pointer to a RCC_PLLInitTypeDef structure
  *
  * @retval HAL status
  */
HAL_StatusTypeDef RCCEx_PLL4_Config(RCC_PLLInitTypeDef *pll4)
{
100023a0:	b580      	push	{r7, lr}
100023a2:	b084      	sub	sp, #16
100023a4:	af00      	add	r7, sp, #0
100023a6:	6078      	str	r0, [r7, #4]

  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll4->PLLState));
  if ((pll4->PLLState) != RCC_PLL_NONE)
100023a8:	687b      	ldr	r3, [r7, #4]
100023aa:	681b      	ldr	r3, [r3, #0]
100023ac:	2b00      	cmp	r3, #0
100023ae:	f000 8147 	beq.w	10002640 <RCCEx_PLL4_Config+0x2a0>
  {

    if ((pll4->PLLState) == RCC_PLL_ON)
100023b2:	687b      	ldr	r3, [r7, #4]
100023b4:	681b      	ldr	r3, [r3, #0]
100023b6:	2b02      	cmp	r3, #2
100023b8:	f040 8119 	bne.w	100025ee <RCCEx_PLL4_Config+0x24e>
      assert_param(IS_RCC_PLLP4_VALUE(pll4->PLLP));
      assert_param(IS_RCC_PLLQ4_VALUE(pll4->PLLQ));
      assert_param(IS_RCC_PLLR4_VALUE(pll4->PLLR));

      /*Disable the post-dividers*/
      __HAL_RCC_PLL4CLKOUT_DISABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
100023bc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100023c0:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100023c4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100023c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
100023cc:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
      /* Disable the main PLL. */
      __HAL_RCC_PLL4_DISABLE();
100023d0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100023d4:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100023d8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100023dc:	f023 0301 	bic.w	r3, r3, #1
100023e0:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
100023e4:	f7fe f8ca 	bl	1000057c <HAL_GetTick>
100023e8:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
100023ea:	e008      	b.n	100023fe <RCCEx_PLL4_Config+0x5e>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100023ec:	f7fe f8c6 	bl	1000057c <HAL_GetTick>
100023f0:	4602      	mov	r2, r0
100023f2:	68fb      	ldr	r3, [r7, #12]
100023f4:	1ad3      	subs	r3, r2, r3
100023f6:	2b64      	cmp	r3, #100	@ 0x64
100023f8:	d901      	bls.n	100023fe <RCCEx_PLL4_Config+0x5e>
        {
          return HAL_TIMEOUT;
100023fa:	2303      	movs	r3, #3
100023fc:	e121      	b.n	10002642 <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
100023fe:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002402:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10002406:	f003 0302 	and.w	r3, r3, #2
1000240a:	2b02      	cmp	r3, #2
1000240c:	d0ee      	beq.n	100023ec <RCCEx_PLL4_Config+0x4c>
      -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
      -Fractional Division Enable (PLLxFRACNEN)
      -Fractional Division factor (FRACNx)*/

      /* Configure PLL4 and PLL4 clock source */
      __HAL_RCC_PLL4_SOURCE(pll4->PLLSource);
1000240e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002412:	f8d3 3824 	ldr.w	r3, [r3, #2084]	@ 0x824
10002416:	f023 0203 	bic.w	r2, r3, #3
1000241a:	687b      	ldr	r3, [r7, #4]
1000241c:	685b      	ldr	r3, [r3, #4]
1000241e:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10002422:	4313      	orrs	r3, r2
10002424:	f8c1 3824 	str.w	r3, [r1, #2084]	@ 0x824

      /* Wait till PLL SOURCE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4SRCRDY) == RESET)
10002428:	e008      	b.n	1000243c <RCCEx_PLL4_Config+0x9c>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1000242a:	f7fe f8a7 	bl	1000057c <HAL_GetTick>
1000242e:	4602      	mov	r2, r0
10002430:	68fb      	ldr	r3, [r7, #12]
10002432:	1ad3      	subs	r3, r2, r3
10002434:	2b64      	cmp	r3, #100	@ 0x64
10002436:	d901      	bls.n	1000243c <RCCEx_PLL4_Config+0x9c>
        {
          return HAL_TIMEOUT;
10002438:	2303      	movs	r3, #3
1000243a:	e102      	b.n	10002642 <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4SRCRDY) == RESET)
1000243c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002440:	f8d3 3824 	ldr.w	r3, [r3, #2084]	@ 0x824
10002444:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10002448:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
1000244c:	d1ed      	bne.n	1000242a <RCCEx_PLL4_Config+0x8a>
        }
      }

      /* Select PLL4 input reference frequency range */
      __HAL_RCC_PLL4_IFRANGE(pll4->PLLRGE) ;
1000244e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002452:	f8d3 3898 	ldr.w	r3, [r3, #2200]	@ 0x898
10002456:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
1000245a:	687b      	ldr	r3, [r7, #4]
1000245c:	69db      	ldr	r3, [r3, #28]
1000245e:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10002462:	4313      	orrs	r3, r2
10002464:	f8c1 3898 	str.w	r3, [r1, #2200]	@ 0x898

      /* Configure the PLL4 multiplication and division factors. */
      __HAL_RCC_PLL4_CONFIG(
10002468:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000246c:	f8d3 2898 	ldr.w	r2, [r3, #2200]	@ 0x898
10002470:	4b76      	ldr	r3, [pc, #472]	@ (1000264c <RCCEx_PLL4_Config+0x2ac>)
10002472:	4013      	ands	r3, r2
10002474:	687a      	ldr	r2, [r7, #4]
10002476:	68d2      	ldr	r2, [r2, #12]
10002478:	1e51      	subs	r1, r2, #1
1000247a:	687a      	ldr	r2, [r7, #4]
1000247c:	6892      	ldr	r2, [r2, #8]
1000247e:	3a01      	subs	r2, #1
10002480:	0412      	lsls	r2, r2, #16
10002482:	430a      	orrs	r2, r1
10002484:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10002488:	4313      	orrs	r3, r2
1000248a:	f8c1 3898 	str.w	r3, [r1, #2200]	@ 0x898
1000248e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002492:	f8d3 389c 	ldr.w	r3, [r3, #2204]	@ 0x89c
10002496:	f023 137f 	bic.w	r3, r3, #8323199	@ 0x7f007f
1000249a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
1000249e:	687a      	ldr	r2, [r7, #4]
100024a0:	6912      	ldr	r2, [r2, #16]
100024a2:	1e51      	subs	r1, r2, #1
100024a4:	687a      	ldr	r2, [r7, #4]
100024a6:	6952      	ldr	r2, [r2, #20]
100024a8:	3a01      	subs	r2, #1
100024aa:	0212      	lsls	r2, r2, #8
100024ac:	4311      	orrs	r1, r2
100024ae:	687a      	ldr	r2, [r7, #4]
100024b0:	6992      	ldr	r2, [r2, #24]
100024b2:	3a01      	subs	r2, #1
100024b4:	0412      	lsls	r2, r2, #16
100024b6:	430a      	orrs	r2, r1
100024b8:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100024bc:	4313      	orrs	r3, r2
100024be:	f8c1 389c 	str.w	r3, [r1, #2204]	@ 0x89c
        pll4->PLLP,
        pll4->PLLQ,
        pll4->PLLR);

      /* Configure the Fractional Divider */
      __HAL_RCC_PLL4FRACV_DISABLE(); //Set FRACLE to ‘0’
100024c2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100024c6:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	@ 0x8a0
100024ca:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100024ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
100024d2:	f8c2 38a0 	str.w	r3, [r2, #2208]	@ 0x8a0
      /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
      if ((pll4->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll4->PLLMODE == RCC_PLL_INTEGER))
100024d6:	687b      	ldr	r3, [r7, #4]
100024d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100024da:	2b02      	cmp	r3, #2
100024dc:	d003      	beq.n	100024e6 <RCCEx_PLL4_Config+0x146>
100024de:	687b      	ldr	r3, [r7, #4]
100024e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100024e2:	2b00      	cmp	r3, #0
100024e4:	d10c      	bne.n	10002500 <RCCEx_PLL4_Config+0x160>
      {
        /* Do not use the fractional divider */
        __HAL_RCC_PLL4FRACV_CONFIG(0); //Set FRACV to '0'
100024e6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100024ea:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	@ 0x8a0
100024ee:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100024f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
100024f6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
100024fa:	f8c2 38a0 	str.w	r3, [r2, #2208]	@ 0x8a0
100024fe:	e00f      	b.n	10002520 <RCCEx_PLL4_Config+0x180>
      }
      else
      {
        /* Configure PLL  PLL4FRACV  in fractional mode*/
        __HAL_RCC_PLL4FRACV_CONFIG(pll4->PLLFRACV);
10002500:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002504:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	@ 0x8a0
10002508:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
1000250c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
10002510:	687a      	ldr	r2, [r7, #4]
10002512:	6a12      	ldr	r2, [r2, #32]
10002514:	00d2      	lsls	r2, r2, #3
10002516:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
1000251a:	4313      	orrs	r3, r2
1000251c:	f8c1 38a0 	str.w	r3, [r1, #2208]	@ 0x8a0
      }
      __HAL_RCC_PLL4FRACV_ENABLE(); //Set FRACLE to ‘1’
10002520:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002524:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	@ 0x8a0
10002528:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000252c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
10002530:	f8c2 38a0 	str.w	r3, [r2, #2208]	@ 0x8a0

      /* Configure the Spread Control */
      if (pll4->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
10002534:	687b      	ldr	r3, [r7, #4]
10002536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10002538:	2b02      	cmp	r3, #2
1000253a:	d124      	bne.n	10002586 <RCCEx_PLL4_Config+0x1e6>
        assert_param(IS_RCC_SSCG_MODE(pll4->SSCG_MODE));
        assert_param(IS_RCC_RPDFN_DIS(pll4->RPDFN_DIS));
        assert_param(IS_RCC_TPDFN_DIS(pll4->TPDFN_DIS));
        assert_param(IS_RCC_MOD_PER(pll4->MOD_PER));

        __HAL_RCC_PLL4CSGCONFIG(pll4->MOD_PER, pll4->TPDFN_DIS, pll4->RPDFN_DIS,
1000253c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002540:	f8d3 38a4 	ldr.w	r3, [r3, #2212]	@ 0x8a4
10002544:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
10002548:	687b      	ldr	r3, [r7, #4]
1000254a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
1000254c:	687b      	ldr	r3, [r7, #4]
1000254e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10002550:	4319      	orrs	r1, r3
10002552:	687b      	ldr	r3, [r7, #4]
10002554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10002556:	4319      	orrs	r1, r3
10002558:	687b      	ldr	r3, [r7, #4]
1000255a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
1000255c:	4319      	orrs	r1, r3
1000255e:	687b      	ldr	r3, [r7, #4]
10002560:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10002562:	041b      	lsls	r3, r3, #16
10002564:	430b      	orrs	r3, r1
10002566:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
1000256a:	4313      	orrs	r3, r2
1000256c:	f8c1 38a4 	str.w	r3, [r1, #2212]	@ 0x8a4
                                pll4->SSCG_MODE, pll4->INC_STEP);
        __HAL_RCC_PLL4_SSMODE_ENABLE();
10002570:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002574:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10002578:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000257c:	f043 0304 	orr.w	r3, r3, #4
10002580:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
10002584:	e009      	b.n	1000259a <RCCEx_PLL4_Config+0x1fa>
      }
      else
      {
        __HAL_RCC_PLL4_SSMODE_DISABLE();
10002586:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000258a:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
1000258e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002592:	f023 0304 	bic.w	r3, r3, #4
10002596:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
      }

      /* Enable the PLL4. */
      __HAL_RCC_PLL4_ENABLE();
1000259a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000259e:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100025a2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100025a6:	f043 0301 	orr.w	r3, r3, #1
100025aa:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
100025ae:	f7fd ffe5 	bl	1000057c <HAL_GetTick>
100025b2:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) == RESET)
100025b4:	e008      	b.n	100025c8 <RCCEx_PLL4_Config+0x228>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100025b6:	f7fd ffe1 	bl	1000057c <HAL_GetTick>
100025ba:	4602      	mov	r2, r0
100025bc:	68fb      	ldr	r3, [r7, #12]
100025be:	1ad3      	subs	r3, r2, r3
100025c0:	2b64      	cmp	r3, #100	@ 0x64
100025c2:	d901      	bls.n	100025c8 <RCCEx_PLL4_Config+0x228>
        {
          return HAL_TIMEOUT;
100025c4:	2303      	movs	r3, #3
100025c6:	e03c      	b.n	10002642 <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) == RESET)
100025c8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100025cc:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100025d0:	f003 0302 	and.w	r3, r3, #2
100025d4:	2b02      	cmp	r3, #2
100025d6:	d1ee      	bne.n	100025b6 <RCCEx_PLL4_Config+0x216>
        }
      }
      /* Enable PLL4P Clock output. */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
100025d8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100025dc:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100025e0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100025e4:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
100025e8:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
100025ec:	e028      	b.n	10002640 <RCCEx_PLL4_Config+0x2a0>
    }
    else
    {
      /*Disable the post-dividers*/
      __HAL_RCC_PLL4CLKOUT_DISABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
100025ee:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100025f2:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100025f6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100025fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
100025fe:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
      /* Disable the PLL4. */
      __HAL_RCC_PLL4_DISABLE();
10002602:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002606:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
1000260a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000260e:	f023 0301 	bic.w	r3, r3, #1
10002612:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10002616:	f7fd ffb1 	bl	1000057c <HAL_GetTick>
1000261a:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
1000261c:	e008      	b.n	10002630 <RCCEx_PLL4_Config+0x290>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1000261e:	f7fd ffad 	bl	1000057c <HAL_GetTick>
10002622:	4602      	mov	r2, r0
10002624:	68fb      	ldr	r3, [r7, #12]
10002626:	1ad3      	subs	r3, r2, r3
10002628:	2b64      	cmp	r3, #100	@ 0x64
1000262a:	d901      	bls.n	10002630 <RCCEx_PLL4_Config+0x290>
        {
          return HAL_TIMEOUT;
1000262c:	2303      	movs	r3, #3
1000262e:	e008      	b.n	10002642 <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
10002630:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002634:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10002638:	f003 0302 	and.w	r3, r3, #2
1000263c:	2b02      	cmp	r3, #2
1000263e:	d0ee      	beq.n	1000261e <RCCEx_PLL4_Config+0x27e>
        }
      }
    }
  }
  return HAL_OK;
10002640:	2300      	movs	r3, #0
}
10002642:	4618      	mov	r0, r3
10002644:	3710      	adds	r7, #16
10002646:	46bd      	mov	sp, r7
10002648:	bd80      	pop	{r7, pc}
1000264a:	bf00      	nop
1000264c:	ffc0fe00 	.word	0xffc0fe00

10002650 <memset>:
10002650:	4402      	add	r2, r0
10002652:	4603      	mov	r3, r0
10002654:	4293      	cmp	r3, r2
10002656:	d100      	bne.n	1000265a <memset+0xa>
10002658:	4770      	bx	lr
1000265a:	f803 1b01 	strb.w	r1, [r3], #1
1000265e:	e7f9      	b.n	10002654 <memset+0x4>

10002660 <__libc_init_array>:
10002660:	b570      	push	{r4, r5, r6, lr}
10002662:	4d0d      	ldr	r5, [pc, #52]	@ (10002698 <__libc_init_array+0x38>)
10002664:	4c0d      	ldr	r4, [pc, #52]	@ (1000269c <__libc_init_array+0x3c>)
10002666:	1b64      	subs	r4, r4, r5
10002668:	10a4      	asrs	r4, r4, #2
1000266a:	2600      	movs	r6, #0
1000266c:	42a6      	cmp	r6, r4
1000266e:	d109      	bne.n	10002684 <__libc_init_array+0x24>
10002670:	4d0b      	ldr	r5, [pc, #44]	@ (100026a0 <__libc_init_array+0x40>)
10002672:	4c0c      	ldr	r4, [pc, #48]	@ (100026a4 <__libc_init_array+0x44>)
10002674:	f000 f818 	bl	100026a8 <_init>
10002678:	1b64      	subs	r4, r4, r5
1000267a:	10a4      	asrs	r4, r4, #2
1000267c:	2600      	movs	r6, #0
1000267e:	42a6      	cmp	r6, r4
10002680:	d105      	bne.n	1000268e <__libc_init_array+0x2e>
10002682:	bd70      	pop	{r4, r5, r6, pc}
10002684:	f855 3b04 	ldr.w	r3, [r5], #4
10002688:	4798      	blx	r3
1000268a:	3601      	adds	r6, #1
1000268c:	e7ee      	b.n	1000266c <__libc_init_array+0xc>
1000268e:	f855 3b04 	ldr.w	r3, [r5], #4
10002692:	4798      	blx	r3
10002694:	3601      	adds	r6, #1
10002696:	e7f2      	b.n	1000267e <__libc_init_array+0x1e>
10002698:	10002710 	.word	0x10002710
1000269c:	10002710 	.word	0x10002710
100026a0:	10002710 	.word	0x10002710
100026a4:	10002714 	.word	0x10002714

100026a8 <_init>:
100026a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100026aa:	bf00      	nop
100026ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
100026ae:	bc08      	pop	{r3}
100026b0:	469e      	mov	lr, r3
100026b2:	4770      	bx	lr

100026b4 <_fini>:
100026b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100026b6:	bf00      	nop
100026b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
100026ba:	bc08      	pop	{r3}
100026bc:	469e      	mov	lr, r3
100026be:	4770      	bx	lr

Disassembly of section .startup_copro_fw.Reset_Handler:

100026c0 <Reset_Handler>:
  ldr   sp, =_estack      /* set stack pointer */
100026c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 100026f8 <LoopForever+0x2>
  movs  r1, #0
100026c4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
100026c6:	e003      	b.n	100026d0 <LoopCopyDataInit>

100026c8 <CopyDataInit>:
  ldr  r3, =_sidata
100026c8:	4b0c      	ldr	r3, [pc, #48]	@ (100026fc <LoopForever+0x6>)
  ldr  r3, [r3, r1]
100026ca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
100026cc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
100026ce:	3104      	adds	r1, #4

100026d0 <LoopCopyDataInit>:
  ldr  r0, =_sdata
100026d0:	480b      	ldr	r0, [pc, #44]	@ (10002700 <LoopForever+0xa>)
  ldr  r3, =_edata
100026d2:	4b0c      	ldr	r3, [pc, #48]	@ (10002704 <LoopForever+0xe>)
  adds  r2, r0, r1
100026d4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
100026d6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
100026d8:	d3f6      	bcc.n	100026c8 <CopyDataInit>
  ldr  r2, =_sbss
100026da:	4a0b      	ldr	r2, [pc, #44]	@ (10002708 <LoopForever+0x12>)
  b  LoopFillZerobss
100026dc:	e002      	b.n	100026e4 <LoopFillZerobss>

100026de <FillZerobss>:
  movs  r3, #0
100026de:	2300      	movs	r3, #0
  str  r3, [r2], #4
100026e0:	f842 3b04 	str.w	r3, [r2], #4

100026e4 <LoopFillZerobss>:
  ldr  r3, = _ebss
100026e4:	4b09      	ldr	r3, [pc, #36]	@ (1000270c <LoopForever+0x16>)
  cmp  r2, r3
100026e6:	429a      	cmp	r2, r3
  bcc  FillZerobss
100026e8:	d3f9      	bcc.n	100026de <FillZerobss>
  bl  SystemInit
100026ea:	f7fd fca9 	bl	10000040 <SystemInit>
 bl __libc_init_array
100026ee:	f7ff ffb7 	bl	10002660 <__libc_init_array>
  bl main
100026f2:	f7fd fd17 	bl	10000124 <main>

100026f6 <LoopForever>:
    b LoopForever
100026f6:	e7fe      	b.n	100026f6 <LoopForever>
  ldr   sp, =_estack      /* set stack pointer */
100026f8:	10040000 	.word	0x10040000
  ldr  r3, =_sidata
100026fc:	10002718 	.word	0x10002718
  ldr  r0, =_sdata
10002700:	10020000 	.word	0x10020000
  ldr  r3, =_edata
10002704:	1002000c 	.word	0x1002000c
  ldr  r2, =_sbss
10002708:	1002000c 	.word	0x1002000c
  ldr  r3, = _ebss
1000270c:	10020068 	.word	0x10020068
