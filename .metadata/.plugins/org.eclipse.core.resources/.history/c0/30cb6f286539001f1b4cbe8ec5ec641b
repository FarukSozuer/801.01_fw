/**
 ******************************************************************************
  * @file		: main.c
  * @brief		: Task scheduler source file
  *				  This file contains task structure of the application
  * @author		: Faruk Sozuer
  * @date		: 20.01.2024
  * @version	: 0.0.1
 ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2024 UMFA TECH, All Rights Reserved </center></h2>
  *
  * All information contained herein is, and remains the property of UMFA TECH. The
  * intellectual and technical concepts contained herein are proprietary to UMFA TECH
  * and are protected by trade secret or copyright law. Dissemination of this
  * information or reproduction of this material is strictly forbidden unless
  * prior written permission is obtained from UMFA TECH.  Access to the source code
  * contained herein is hereby forbidden to anyone except current UMFA TECH employees,
  * managers or contractors who have executed Confidentiality and Non-disclosure
  * agreements explicitly covering such access.
  *
 ******************************************************************************
  */



#include "main.h"
#include "zed_gpio.h"
#include "zed_uart.h"
#include "zed_common_def.h"
#include "zed_cpu_info.h"
#include "zed_rflink.h"
#include "zed_serial_com.h"
#include "libserialport.h"
#include <linux/gpio.h>


/*
 * @brief
 *
 * @param
 *
 * @return
 *
 * */
void set_schedular_info(PS_THREAD_ATTR pThreadAttr)
{
	cpu_set_t cpuset;
	int nRet;
	__CPU_ZERO_S(sizeof(cpu_set_t), &cpuset);
	__CPU_SET_S(pThreadAttr->nCPUID, sizeof(cpu_set_t), &cpuset);

	pThreadAttr->nSysThreadID = pthread_self();

	if ( pThreadAttr->nSetCPU )
	{
		if ((nRet = pthread_setaffinity_np(pthread_self(), sizeof(cpu_set_t), &cpuset)) != 0)
		{
			printf("CPU atamada bir hata(%d) olustu.\n", nRet);
		}
	}
	if ( pThreadAttr->nSetPri )
	{
		if ((nRet = pthread_setschedparam(pthread_self(), pThreadAttr->nPolicy, &pThreadAttr->nParam)) != 0)
		{
			printf("Oncelik atamada bir hata(%d) olustu.\n", nRet);
		}
	}
}

S_THREAD_ATTR gnThreadAttr[TOTAL_NUMBER_OF_THREAD] = {
	{.nName = "RFLINK_READ",        .nThreadFunction = &rflinkLoop,           .nSetCPU = 0, .nCPUID = 0, .nSetPri = 1, .nPolicy = SCHED_FIFO,  .nParam.sched_priority = 9, .nThreadID = THREAD_RFLINK_ID, },
	{.nName = "DATA_SERIAL_READ",   .nThreadFunction = &readDataSerialPort,   .nSetCPU = 0, .nCPUID = 0, .nSetPri = 1, .nPolicy = SCHED_FIFO,  .nParam.sched_priority = 8, .nThreadID = THREAD_DATA_SERIAL, },
	{.nName = "CONFIG_SERIAL_READ", .nThreadFunction = &readConfigSerialPort, .nSetCPU = 0, .nCPUID = 0, .nSetPri = 1, .nPolicy = SCHED_FIFO,  .nParam.sched_priority = 8, .nThreadID = THREAD_CONFIG_SERIAL, },
	{.nName = "CLI_SERIAL_READ",    .nThreadFunction = &readCliSerialPort,    .nSetCPU = 0, .nCPUID = 0, .nSetPri = 1, .nPolicy = SCHED_FIFO,  .nParam.sched_priority = 8, .nThreadID = THREAD_CLI_SERIAL, },
	{.nName = "MAIN_LOOP",	        .nThreadFunction = NULL,		          .nSetCPU = 0, .nCPUID = 0, .nSetPri = 1, .nPolicy = SCHED_OTHER, .nParam.sched_priority = 0, .nThreadID = THREAD_MAIN_LOOP_ID}
};



/*
 * @brief
 *
 * @param
 *
 * @return
 *
 * */
int main()
{
	uartInitialize();

	pthread_t thread[TOTAL_NUMBER_OF_THREAD - 1];

	for (int i = 0; i < (TOTAL_NUMBER_OF_THREAD - 1); i++)
	{
	    pthread_create(&thread[i], NULL, gnThreadAttr[i].nThreadFunction, (void *)&gnThreadAttr[i]);
	}

	for (int i = 0; i < (TOTAL_NUMBER_OF_THREAD - 1); i++)
	{
	    pthread_join(thread[i], NULL);
	}

    return EXIT_SUCCESS;
}
