/**
 ******************************************************************************
  * @file		: ZED_xadc.c
  * @brief		: XADC source file
  *				  This file contains task structure of the application
  * @author		: Faruk Sozuer
  * @date		: 20.04.2024
  * @version	: 0.0.1
 ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2024 ZED TECH, All Rights Reserved </center></h2>
  *
  * All information contained herein is, and remains the property of ZED TECH. The
  * intellectual and technical concepts contained herein are proprietary to ZED TECH
  * and are protected by trade secret or copyright law. Dissemination of this
  * information or reproduction of this material is strictly forbidden unless
  * prior written permission is obtained from ZED TECH.  Access to the source code
  * contained herein is hereby forbidden to anyone except current ZED TECH employees,
  * managers or contractors who have executed Confidentiality and Non-disclosure
  * agreements explicitly covering such access.
  *
 ******************************************************************************
  */

#include "zed_xadc.h"

#include "zed_iio.h"

#define IIO_DEVICE			"xadc"
#define LEN_OF_ARRAY(x)		(sizeof (x) / sizeof(*x))
#define NUM_OF_CHANNEL 		9

static struct iio_device*  xadc_iio_dev;
static struct iio_channel* xadc_iio_ch[NUM_OF_CHANNEL];

xadc_value_type xadc_value;

enum
{
    IN_VOLTAGE0 = 0x00, //Voltage0
	IN_VOLTAGE1,        //Voltage1
    IN_VOLTAGE2,        //Voltage2
    IN_VOLTAGE3,        //Voltage3
    IN_VOLTAGE4,        //Voltage4
    IN_VOLTAGE5,        //Voltage5
    IN_VOLTAGE6,        //Voltage6
    IN_VOLTAGE7,        //Voltage7
    IN_TEMP0            //Temperature
};

static const iio_channel_configs_t xadc_iio_ch_cfg[NUM_OF_CHANNEL] =
{
    { "voltage0",  IN},  //in_voltage0_
    { "voltage1",  IN},  //in_voltage1_
    { "voltage2",  IN},  //in_voltage2_
    { "voltage3",  IN},  //in_voltage3_
    { "voltage4",  IN},  //in_voltage4_
    { "voltage5",  IN},  //in_voltage5_
    { "voltage6",  IN}, //in_voltage6_
    { "voltage7",  IN}, //in_voltage7_
    { "temp0",     IN}  //in_temp0_
};



/*
 * @brief xadcInit
 *
 * @param
 *
 * @return
 *
 * */
int32_t xadcInit(void)
{
    if (init_iio_device(IIO_DEVICE, &xadc_iio_dev))
        return -1;

    if (init_iio_device_channels(xadc_iio_dev,
                                 xadc_iio_ch_cfg,
                                 xadc_iio_ch,
                                 LEN_OF_ARRAY(xadc_iio_ch)))
        return -1;

    return 0;
}



/*
 * @brief xadcGetTemperature
 *
 * @param
 *
 * @return
 *
 * */
int32_t xadcGetTemperature(float* temperature)
{
    int32_t ret = -1;

    int64_t raw = 0;
    int64_t offset = 0;
    double scale = 0;

	ret = iio_channel_attr_read_longlong(xadc_iio_ch[IN_TEMP0],"raw",&raw);

	if (ret)
		return -1;

	ret = iio_channel_attr_read_longlong(xadc_iio_ch[IN_TEMP0],"offset",&offset);

	if (ret)
		return -1;

	ret = iio_channel_attr_read_double(xadc_iio_ch[IN_TEMP0],"scale",&scale);

	if (ret)
		return -1;

	*temperature = (float)((raw + offset) * scale / 1000);

	return 0;
}



/*
 * @brief xadcGetVccInt
 *
 * @param
 *
 * @return
 *
 * */
int32_t xadcGetVccInt(float *voltage)
{
    int32_t ret = -1;

    int64_t raw = 0;
    double scale = 0;

    ret = iio_channel_attr_read_longlong(xadc_iio_ch[IN_VOLTAGE0], "raw", &raw);

	if (ret)
		return -1;

	ret = iio_channel_attr_read_double(xadc_iio_ch[IN_VOLTAGE0],"scale",&scale);

	if (ret)
		return -1;

	*voltage = (float)((raw * scale) / 1000);

	return 0;
}



/*
 * @brief xadcGetVccAux
 *
 * @param
 *
 * @return
 *
 * */
int32_t xadcGetVccAux(float* voltage)
{
    int32_t ret = -1;

    int64_t raw = 0;
    double scale = 0;

	ret = iio_channel_attr_read_longlong(xadc_iio_ch[IN_VOLTAGE1],"raw",&raw);

	if (ret)
		return -1;

	ret = iio_channel_attr_read_double(xadc_iio_ch[IN_VOLTAGE1], "scale",&scale);

	if (ret)
		return -1;

	*voltage = (float)((raw * scale) / 1000);

	return 0;
}



/*
 * @brief xadcGetVccBram
 *
 * @param
 *
 * @return
 *
 * */
int32_t xadcGetVccBram(float *voltage)
{
    int32_t ret = -1;

    int64_t raw = 0;
    double scale = 0;

	ret = iio_channel_attr_read_longlong(xadc_iio_ch[IN_VOLTAGE2],"raw",&raw);

	if (ret)
		return -1;

	ret = iio_channel_attr_read_double(xadc_iio_ch[IN_VOLTAGE2],"scale",&scale);

	if (ret)
		return -1;

	*voltage = (float)((raw) * scale / 1000);

	return 0;
}



/*
 * @brief xadcGetVccpInt
 *
 * @param
 *
 * @return
 *
 * */
int32_t xadcGetVccpInt(float *voltage)
{
    int32_t ret = -1;

    int64_t raw = 0;
    double scale = 0;

	ret = iio_channel_attr_read_longlong(xadc_iio_ch[IN_VOLTAGE3],"raw",&raw);

	if (ret)
		return -1;

	ret = iio_channel_attr_read_double(xadc_iio_ch[IN_VOLTAGE3],"scale",&scale);

	if (ret)
		return -1;

	*voltage = (float)((raw * scale) / 1000);

	return 0;
}



/*
 * @brief xadcGetVccpAux
 *
 * @param
 *
 * @return
 *
 * */
int32_t xadcGetVccpAux(float *voltage)
{
    int32_t ret = -1;

    int64_t raw = 0;
    double scale = 0;

	ret = iio_channel_attr_read_longlong(xadc_iio_ch[IN_VOLTAGE4],"raw",&raw);

	if (ret)
		return -1;

	ret = iio_channel_attr_read_double(xadc_iio_ch[IN_VOLTAGE4],"scale",&scale);

	if (ret)
		return -1;

	*voltage = (float)((raw * scale) / 1000);

	return 0;
}



/*
 * @brief xadcGetVccAux
 *
 * @param
 *
 * @return
 *
 * */
int32_t xadcGetVccDdr(float *voltage)
{
    int32_t ret = -1;

    int64_t raw = 0;
    double scale = 0;

	ret = iio_channel_attr_read_longlong(xadc_iio_ch[IN_VOLTAGE5], "raw",&raw);

	if (ret)
		return -1;

	ret = iio_channel_attr_read_double(xadc_iio_ch[IN_VOLTAGE5],"scale",&scale);

	if (ret)
		return -1;

	*voltage = (float)((raw * scale) / 1000);

	return 0;
}











