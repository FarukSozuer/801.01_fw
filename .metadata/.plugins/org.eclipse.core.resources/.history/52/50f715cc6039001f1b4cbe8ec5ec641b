/**
 ******************************************************************************
  * @file		: ZED_ad9361.c
  * @brief		: Task scheduler source file
  *				  This file contains task structure of the application
  * @author		: Faruk Sozuer
  * @date		: 20.01.2024
  * @version	: 0.0.1
 ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2024 ZED TECH, All Rights Reserved </center></h2>
  *
  * All information contained herein is, and remains the property of ZED TECH. The
  * intellectual and technical concepts contained herein are proprietary to ZED TECH
  * and are protected by trade secret or copyright law. Dissemination of this
  * information or reproduction of this material is strictly forbidden unless
  * prior written permission is obtained from ZED TECH.  Access to the source code
  * contained herein is hereby forbidden to anyone except current ZED TECH employees,
  * managers or contractors who have executed Confidentiality and Non-disclosure
  * agreements explicitly covering such access.
  *
 ******************************************************************************
  */

#include "zed_ad9361.h"

#define AD9661_IIO_DEVICE			"ad9361-phy"
#define LEN_OF_ARRAY(x)		(sizeof (x) / sizeof(*x))


static struct iio_device*  ad9361_iio_dev;
static struct iio_channel* ad9361_iio_ch[AD9361_NUM_OF_CHANNEL];


/*
 * @brief xadcInit
 *
 * @param
 *
 * @return
 *
 * */
bool ad9361_init(void)
{
	bool status;

    if (init_iio_device(AD9661_IIO_DEVICE, &ad9361_iio_dev))
    {
    	status = false;
    }

    if(iio_device_get_channels_count(ad9361_iio_dev) != 0)
    {
    	status = true;
    }
    else
    {
    	status = false;
    }

    if (init_iio_device_channels(ad9361_iio_dev, ad9361_iio_ch_cfg, ad9361_iio_ch, LEN_OF_ARRAY(ad9361_iio_ch)))
    {
    	status = false;
    }

    return status;
}



/*
 * @brief ad9361_getHardwareGain
 *
 * @param
 *
 * @return
 *
 * */
bool ad9361_rx1_getHardwareGain(float *harware_gain)
{
    int32_t ret = -1;
    double scale = 0;

    bool status;

    ret = iio_channel_attr_read_double(ad9361_iio_ch[AD9361_RX1_IN_VOLTAGE0], "hardwaregain", &scale);

	if (ret)
	{
		status = false;
	}
	else
	{
		status = true;
	}

	*harware_gain = (float)(scale);

	return status;
}



/*
 * @brief ad9361_getHardwareGain
 *
 * @param
 *
 * @return
 *
 * */
bool ad9361_rx2_getHardwareGain(float *harware_gain)
{
    int32_t ret = -1;
    double scale = 0;

    bool status;

    ret = iio_channel_attr_read_double(ad9361_iio_ch[AD9361_RX2_IN_VOLTAGE1], "hardwaregain", &scale);

	if (ret)
	{
		status = false;
	}

	*harware_gain = (float)(scale);

	return status;
}



/*
 * @brief xadcGetTemperature
 *
 * @param
 *
 * @return
 *
 * */
int32_t ad9361_getCoreVoltage(float* voltage)
{
    int32_t ret = -1;

    int64_t raw = 0;
    int64_t offset = 0;
    double scale = 0;

	ret = iio_channel_attr_read_longlong(ad9361_iio_ch[AD9361_IN_VOLTAGE2],"raw",&raw);

	if (ret)
		return -1;

	ret = iio_channel_attr_read_longlong(ad9361_iio_ch[AD9361_IN_VOLTAGE2],"offset",&offset);

	if (ret)
		return -1;

	ret = iio_channel_attr_read_double(ad9361_iio_ch[AD9361_IN_VOLTAGE2],"scale",&scale);

	if (ret)
		return -1;

	*voltage = (float)((raw + offset) * scale / 1000);

	return 0;
}



/*
 * @brief ad9361_getRssi
 *
 * @param
 *
 * @return
 *
 * */
bool ad9361_rx1_getRssi(float *rssi)
{
    int32_t ret = -1;
    double scale = 0;

    bool status;

    ret = iio_channel_attr_read_double(ad9361_iio_ch[AD9361_RX1_IN_VOLTAGE0], "rssi", &scale);

	if (ret)
	{
		status = false;
	}
	else
	{
		status = true;
	}

	*rssi = (float)(scale);

	return status;
}



/*
 * @brief ad9361_getRssi
 *
 * @param
 *
 * @return
 *
 * */
bool ad9361_rx2_getRssi(float *rssi)
{
    int32_t ret = -1;
    double scale = 0;

    bool status;

    ret = iio_channel_attr_read_double(ad9361_iio_ch[AD9361_RX2_IN_VOLTAGE1], "rssi", &scale);

	if (ret)
	{
		status = false;
	}
	else
	{
		status = true;
	}


	*rssi = (float)(scale);

	return status;
}



/*
 * @brief ad9361_rx_getBandwidth
 *
 * @param
 *
 * @return
 *
 * */
bool ad9361_rx_getBandwidth(int64_t *bw)
{
    int32_t ret = -1;
    int64_t data = 0;

    bool status;

    ret = iio_channel_attr_read_longlong(ad9361_iio_ch[AD9361_RX_PATH_IN_VOLTAGE], "rf_bandwidth", &data);

	if (ret)
	{
		status = false;
	}
	else
	{
		status = true;
	}

	*bw = (int64_t)(data);

	return status;
}



/*
 * @brief ad9361_rx_setBandwidth
 *
 * @param
 *
 * @return
 *
 * */
bool ad9361_rx_setBandwidth(int64_t bw)
{
	int32_t ret = -1;
	bool status;

	ret = iio_channel_attr_write_longlong(ad9361_iio_ch[AD9361_RX_PATH_IN_VOLTAGE], "rf_bandwidth", bw);

	if (ret)
	{
		status = false;
	}
	else
	{
		status = true;
	}
	return status;
}



/*
 * @brief ad9361_rx_getSamplingFrequency
 *
 * @param
 *
 * @return
 *
 * */
bool ad9361_rx_getSamplingFrequency(int64_t *sampling_freq)
{
    int32_t ret = -1;
    int64_t data = 0;

    bool status;

    ret = iio_channel_attr_read_longlong(ad9361_iio_ch[AD9361_RX_PATH_IN_VOLTAGE], "sampling_frequency", &data);

	if (ret)
	{
		status = false;
	}
	else
	{
		status = true;
	}

	*sampling_freq = (int64_t)(data);

	return status;
}



/*
 * @brief ad9361_rx_setSamplingFrequency
 *
 * @param
 *
 * @return
 *
 * */
bool ad9361_rx_setSamplingFrequency(int64_t sampling_freq)
{
	int32_t ret = -1;
	bool status;

	ret = iio_channel_attr_write_longlong(ad9361_iio_ch[AD9361_RX_PATH_IN_VOLTAGE], "sampling_frequency", sampling_freq);

	if (ret)
	{
		status = false;
	}
	else
	{
		status = true;
	}
	return status;
}



/*
 * @brief ad9361_getRxLoFrequency
 *
 * @param
 *
 * @return
 *
 * */
bool ad9361_getRxLoFrequency(int64_t *lo_frequency)
{
	int32_t ret = -1;
    int64_t data = 0;

	bool status;

	ret = iio_channel_attr_read_longlong(ad9361_iio_ch[AD9361_RX_LO_ALTVOLTAGE0], "RX_LO_frequency", &data);


	if (ret)
	{
		status = false;
	}
	else
	{
		status = true;
	}

	*lo_frequency = (int64_t)(data);

	return status;
}



/*
 * @brief ad9361_setRxLoFrequency
 *
 * @param
 *
 * @return
 *
 * */
bool ad9361_setRxLoFrequency(int64_t lo_frequency)
{
	int32_t ret = -1;
	bool status;

	ret = iio_channel_attr_write_longlong(ad9361_iio_ch[AD9361_RX_LO_ALTVOLTAGE0], "RX_LO_frequency", lo_frequency);

	if (ret)
	{
		status = false;
	}
	else
	{
		status = true;
	}
	return status;
}



/*
 * @brief ad9361_getTxLoFrequency
 *
 * @param
 *
 * @return
 *
 * */
bool ad9361_getTxLoFrequency(int64_t *lo_frequency)
{
	int32_t ret = -1;
    int64_t data = 0;

	bool status;

	ret = iio_channel_attr_read_longlong(ad9361_iio_ch[AD9361_TX_LO_ALTVOLTAGE1], "TX_LO_frequency", &data);

	if (ret)
	{
		status = false;
	}
	else
	{
		status = true;
	}

	*lo_frequency = (int64_t)(data);

	return status;
}



/*
 * @brief ad9361_setTxLoFrequency
 *
 * @param
 *
 * @return
 *
 * */
bool ad9361_setTxLoFrequency(int64_t lo_frequency)
{
	int32_t ret = -1;
	bool status;

	ret = iio_channel_attr_write_longlong(ad9361_iio_ch[AD9361_TX_LO_ALTVOLTAGE1], "TX_LO_frequency", lo_frequency);

	if (ret)
	{
		status = false;
	}
	else
	{
		status = true;
	}
	return status;
}



/*
 * @brief ad9361_tx1_getHardwareGain
 *
 * @param
 *
 * @return
 *
 * */
bool ad9361_tx1_getHardwareGain(float *harware_gain)
{
    int32_t ret = -1;
    double scale = 0;

    bool status;

    ret = iio_channel_attr_read_double(ad9361_iio_ch[AD9361_TX1_OUT_VOLTAGE0], "hardwaregain", &scale);

	if (ret)
	{
		status = false;
	}
	else
	{
		status = true;
	}

	*harware_gain = (float)(scale);

	return status;
}



/*
 * @brief ad9361_tx2_getHardwareGain
 *
 * @param
 *
 * @return
 *
 * */
bool ad9361_tx2_getHardwareGain(float *harware_gain)
{
    int32_t ret = -1;
    double scale = 0;

    bool status;

    ret = iio_channel_attr_read_double(ad9361_iio_ch[AD9361_TX2_OUT_VOLTAGE1], "hardwaregain", &scale);

	if (ret)
	{
		status = false;
	}

	*harware_gain = (float)(scale);

	return status;
}



/*
 * @brief ad9361_tx1_getRssi
 *
 * @param
 *
 * @return
 *
 * */
bool ad9361_tx1_getRssi(float *rssi)
{
    int32_t ret = -1;
    double scale = 0;

    bool status;

    ret = iio_channel_attr_read_double(ad9361_iio_ch[AD9361_TX1_OUT_VOLTAGE0], "rssi", &scale);

	if (ret)
	{
		status = false;
	}
	else
	{
		status = true;
	}

	*rssi = (float)(scale);

	return status;
}



/*
 * @brief ad9361_tx2_getRssi
 *
 * @param
 *
 * @return
 *
 * */
bool ad9361_tx2_getRssi(float *rssi)
{
    int32_t ret = -1;
    double scale = 0;

    bool status;

    ret = iio_channel_attr_read_double(ad9361_iio_ch[AD9361_TX2_OUT_VOLTAGE1], "rssi", &scale);

	if (ret)
	{
		status = false;
	}
	else
	{
		status = true;
	}

	*rssi = (float)(scale);

	return status;
}



/*
 * @brief ad9361_tx_getSamplingFrequency
 *
 * @param
 *
 * @return
 *
 * */
bool ad9361_tx_getSamplingFrequency(int64_t *sampling_freq)
{
    int32_t ret = -1;
    int64_t data = 0;

    bool status;

    ret = iio_channel_attr_read_longlong(ad9361_iio_ch[AD9361_TX_PATH_IN_VOLTAGE], "sampling_frequency", &data);

	if (ret)
	{
		status = false;
	}
	else
	{
		status = true;
	}

	*sampling_freq = (int64_t)(data);

	return status;
}



/*
 * @brief ad9361_tx_setSamplingFrequency
 *
 * @param
 *
 * @return
 *
 * */
bool ad9361_tx_setSamplingFrequency(int64_t sampling_freq)
{
	int32_t ret = -1;
	bool status;

	ret = iio_channel_attr_write_longlong(ad9361_iio_ch[AD9361_TX_PATH_IN_VOLTAGE], "sampling_frequency", sampling_freq);

	if (ret)
	{
		status = false;
	}
	else
	{
		status = true;
	}
	return status;
}


/*
 * @brief ad9361_tx_getSamplingFrequency
 *
 * @param
 *
 * @return
 *
 * */
bool ad9361_tx_getBandwidth(int64_t *bw)
{
    int32_t ret = -1;
    int64_t data = 0;

    bool status;

    ret = iio_channel_attr_read_longlong(ad9361_iio_ch[AD9361_TX_PATH_IN_VOLTAGE], "rf_bandwidth", &data);

	if (ret)
	{
		status = false;
	}
	else
	{
		status = true;
	}

	*bw = (int64_t)(data);

	return status;
}



/*
 * @brief ad9361_tx_setSamplingFrequency
 *
 * @param
 *
 * @return
 *
 * */
bool ad9361_tx_setBandwidth(int64_t bw)
{
	int32_t ret = -1;
	bool status;

	ret = iio_channel_attr_write_longlong(ad9361_iio_ch[AD9361_TX_PATH_IN_VOLTAGE], "rf_bandwidth", bw);

	if (ret)
	{
		status = false;
	}
	else
	{
		status = true;
	}
	return status;
}



/*
 * @brief ad9361_tx_getSamplingFrequency
 *
 * @param
 *
 * @return
 *
 * */
bool ad9361_getTemp(int64_t *temp)
{
    int32_t ret = -1;
    int64_t data = 0;

    bool status;

    ret = iio_channel_attr_read_longlong(ad9361_iio_ch[AD9361_IN_TEMP0], "input", &data);

	if (ret)
	{
		status = false;
	}
	else
	{
		status = true;
	}

	*temp = (int64_t)(data);

	return status;
}
