/**
 ******************************************************************************
  * @file		: ZED_axi_config.c
  * @brief		: Task scheduler source file
  *				  This file contains task structure of the application
  * @author		: Faruk Sozuer
  * @date		: 23.04.2024
  * @version	: 0.0.1
 ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2024 ZED TECH, All Rights Reserved </center></h2>
  *
  * All information contained herein is, and remains the property of ZED TECH. The
  * intellectual and technical concepts contained herein are proprietary to ZED TECH
  * and are protected by trade secret or copyright law. Dissemination of this
  * information or reproduction of this material is strictly forbidden unless
  * prior written permission is obtained from ZED TECH.  Access to the source code
  * contained herein is hereby forbidden to anyone except current ZED TECH employees,
  * managers or contractors who have executed Confidentiality and Non-disclosure
  * agreements explicitly covering such access.
  *
 ******************************************************************************
  */

#include "zed_axi_config.h"
#include "zed_uio.h"


axi_bus_base_address_type axi_bus_base_address;
axi_bus_read_val_type axi_bus_read_val;

/*
 * @brief serviceConfigBusInitialize
 *
 * @param
 *
 * @return
 */
bool axi_serviceConfigBusInitialize(void)
{

	bool status = false;

	axi_bus_base_address.service_config = (uint32_t*)uio_device_init(SERVICE_UIO_DEVICE_NAME, MMAP_SIZE);
	if (!axi_bus_base_address.service_config)
	{
		status = false;
	}
	else
	{
		status = true;
	}
	return status;
}



/*
 * @brief donorConfigBusInitialize
 *
 * @param
 *
 * @return
 *
 * */
bool axi_donorConfigBusInitialize(void)
{
	bool status = false;

	axi_bus_base_address.donor_config = (uint32_t*)uio_device_init(DONOR_UIO_DEVICE_NAME, MMAP_SIZE);
	if (!axi_bus_base_address.donor_config )
	{
		status = false;
	}
	else
	{
		status = true;
	}
	return status;
}



/*
 * @brief serviceConfigWrite
 *
 * @param
 *
 * @return
 *
 * */
bool axi_serviceConfigWrite(uint32_t data)
{
	uio_device_write(axi_bus_base_address.service_config, 0x00, data);
	return true;
}



/*
 * @brief donorConfigWrite
 *
 * @param
 *
 * @return
 *
 * */
bool axi_donorConfigWrite(uint32_t data)
{
	uio_device_write(axi_bus_base_address.donor_config, 0x00, data);
	return true;
}



/*
 * @brief serviceConfigRead
 *
 * @param
 *
 * @return
 *
 * */
uint32_t axi_serviceConfigRead(void)
{
	uio_device_read(axi_bus_base_address.service_config, 0x00, &axi_bus_read_val.service_config_val);
	return 1;
}



/*
 * @brief donorConfigRead
 *
 * @param
 *
 * @return
 *
 * */
uint32_t axi_donorConfigRead(void)
{
	uio_device_read(axi_bus_base_address.donor_config, 0x00, &axi_bus_read_val.donor_config_val);
	return 1;
}
